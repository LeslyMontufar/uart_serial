
uart_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003430  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a0  080038a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038a0  080038a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a0  080038a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000070  08003918  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08003918  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d52  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8e  00000000  00000000  00026deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00028880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  00029030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c41  00000000  00000000  00029728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008530  00000000  00000000  00040369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082fbc  00000000  00000000  00048899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002550  00000000  00000000  000cb8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003524 	.word	0x08003524

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003524 	.word	0x08003524

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fac0 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80b 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8a2 	bl	80002b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f876 	bl	800025c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f84a 	bl	8000208 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000174:	f001 fbb6 	bl	80018e4 <app_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_loop();
 8000178:	f001 fbcc 	bl	8001914 <app_loop>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	; 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	; 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f002 f87f 	bl	8002290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a0:	2301      	movs	r3, #1
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001aa:	2300      	movs	r3, #0
 80001ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ae:	2301      	movs	r3, #1
 80001b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b2:	2302      	movs	r3, #2
 80001b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 fe26 	bl	8000e18 <HAL_RCC_OscConfig>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d2:	f000 f909 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d6:	230f      	movs	r3, #15
 80001d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001da:	2302      	movs	r3, #2
 80001dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2102      	movs	r1, #2
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 f893 	bl	800131c <HAL_RCC_ClockConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001fc:	f000 f8f4 	bl	80003e8 <Error_Handler>
  }
}
 8000200:	bf00      	nop
 8000202:	3740      	adds	r7, #64	; 0x40
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800020e:	4a12      	ldr	r2, [pc, #72]	; (8000258 <MX_USART1_UART_Init+0x50>)
 8000210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000228:	2200      	movs	r2, #0
 800022a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800022e:	220c      	movs	r2, #12
 8000230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 800023a:	2200      	movs	r2, #0
 800023c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <MX_USART1_UART_Init+0x4c>)
 8000240:	f001 fa04 	bl	800164c <HAL_UART_Init>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800024a:	f000 f8cd 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	2000008c 	.word	0x2000008c
 8000258:	40013800 	.word	0x40013800

0800025c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000262:	4a12      	ldr	r2, [pc, #72]	; (80002ac <MX_USART2_UART_Init+0x50>)
 8000264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800026c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000282:	220c      	movs	r2, #12
 8000284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000292:	4805      	ldr	r0, [pc, #20]	; (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000294:	f001 f9da 	bl	800164c <HAL_UART_Init>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800029e:	f000 f8a3 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200000d0 	.word	0x200000d0
 80002ac:	40004400 	.word	0x40004400

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c4:	4b43      	ldr	r3, [pc, #268]	; (80003d4 <MX_GPIO_Init+0x124>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a42      	ldr	r2, [pc, #264]	; (80003d4 <MX_GPIO_Init+0x124>)
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b40      	ldr	r3, [pc, #256]	; (80003d4 <MX_GPIO_Init+0x124>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0310 	and.w	r3, r3, #16
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <MX_GPIO_Init+0x124>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <MX_GPIO_Init+0x124>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b3a      	ldr	r3, [pc, #232]	; (80003d4 <MX_GPIO_Init+0x124>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b37      	ldr	r3, [pc, #220]	; (80003d4 <MX_GPIO_Init+0x124>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a36      	ldr	r2, [pc, #216]	; (80003d4 <MX_GPIO_Init+0x124>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b34      	ldr	r3, [pc, #208]	; (80003d4 <MX_GPIO_Init+0x124>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b31      	ldr	r3, [pc, #196]	; (80003d4 <MX_GPIO_Init+0x124>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a30      	ldr	r2, [pc, #192]	; (80003d4 <MX_GPIO_Init+0x124>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <MX_GPIO_Init+0x124>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0308 	and.w	r3, r3, #8
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032a:	482b      	ldr	r0, [pc, #172]	; (80003d8 <MX_GPIO_Init+0x128>)
 800032c:	f000 fd43 	bl	8000db6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000336:	4829      	ldr	r0, [pc, #164]	; (80003dc <MX_GPIO_Init+0x12c>)
 8000338:	f000 fd3d 	bl	8000db6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800033c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	2301      	movs	r3, #1
 8000344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	2302      	movs	r3, #2
 800034c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800034e:	f107 0310 	add.w	r3, r7, #16
 8000352:	4619      	mov	r1, r3
 8000354:	4820      	ldr	r0, [pc, #128]	; (80003d8 <MX_GPIO_Init+0x128>)
 8000356:	f000 fb93 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800035a:	2301      	movs	r3, #1
 800035c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800035e:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <MX_GPIO_Init+0x130>)
 8000360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000362:	2301      	movs	r3, #1
 8000364:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	4619      	mov	r1, r3
 800036c:	481b      	ldr	r0, [pc, #108]	; (80003dc <MX_GPIO_Init+0x12c>)
 800036e:	f000 fb87 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8000372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000378:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <MX_GPIO_Init+0x130>)
 800037a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800037c:	2301      	movs	r3, #1
 800037e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	4817      	ldr	r0, [pc, #92]	; (80003e4 <MX_GPIO_Init+0x134>)
 8000388:	f000 fb7a 	bl	8000a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800038c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2302      	movs	r3, #2
 800039c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <MX_GPIO_Init+0x12c>)
 80003a6:	f000 fb6b 	bl	8000a80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2105      	movs	r1, #5
 80003ae:	2006      	movs	r0, #6
 80003b0:	f000 fb13 	bl	80009da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003b4:	2006      	movs	r0, #6
 80003b6:	f000 fb2c 	bl	8000a12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2105      	movs	r1, #5
 80003be:	2028      	movs	r0, #40	; 0x28
 80003c0:	f000 fb0b 	bl	80009da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003c4:	2028      	movs	r0, #40	; 0x28
 80003c6:	f000 fb24 	bl	8000a12 <HAL_NVIC_EnableIRQ>

}
 80003ca:	bf00      	nop
 80003cc:	3720      	adds	r7, #32
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40011000 	.word	0x40011000
 80003dc:	40010800 	.word	0x40010800
 80003e0:	10110000 	.word	0x10110000
 80003e4:	40010c00 	.word	0x40010c00

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <Error_Handler+0x8>
	...

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	; 0x28
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a3f      	ldr	r2, [pc, #252]	; (8000570 <HAL_UART_MspInit+0x118>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d13a      	bne.n	80004ee <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000478:	4b3e      	ldr	r3, [pc, #248]	; (8000574 <HAL_UART_MspInit+0x11c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a3d      	ldr	r2, [pc, #244]	; (8000574 <HAL_UART_MspInit+0x11c>)
 800047e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b3b      	ldr	r3, [pc, #236]	; (8000574 <HAL_UART_MspInit+0x11c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b38      	ldr	r3, [pc, #224]	; (8000574 <HAL_UART_MspInit+0x11c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a37      	ldr	r2, [pc, #220]	; (8000574 <HAL_UART_MspInit+0x11c>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b35      	ldr	r3, [pc, #212]	; (8000574 <HAL_UART_MspInit+0x11c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	613b      	str	r3, [r7, #16]
 80004a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b2:	2303      	movs	r3, #3
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	f107 0318 	add.w	r3, r7, #24
 80004ba:	4619      	mov	r1, r3
 80004bc:	482e      	ldr	r0, [pc, #184]	; (8000578 <HAL_UART_MspInit+0x120>)
 80004be:	f000 fadf 	bl	8000a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	4619      	mov	r1, r3
 80004d6:	4828      	ldr	r0, [pc, #160]	; (8000578 <HAL_UART_MspInit+0x120>)
 80004d8:	f000 fad2 	bl	8000a80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	2103      	movs	r1, #3
 80004e0:	2025      	movs	r0, #37	; 0x25
 80004e2:	f000 fa7a 	bl	80009da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004e6:	2025      	movs	r0, #37	; 0x25
 80004e8:	f000 fa93 	bl	8000a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004ec:	e03c      	b.n	8000568 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a22      	ldr	r2, [pc, #136]	; (800057c <HAL_UART_MspInit+0x124>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d137      	bne.n	8000568 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <HAL_UART_MspInit+0x11c>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <HAL_UART_MspInit+0x11c>)
 80004fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000502:	61d3      	str	r3, [r2, #28]
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <HAL_UART_MspInit+0x11c>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <HAL_UART_MspInit+0x11c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a17      	ldr	r2, [pc, #92]	; (8000574 <HAL_UART_MspInit+0x11c>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <HAL_UART_MspInit+0x11c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000528:	2304      	movs	r3, #4
 800052a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000530:	2303      	movs	r3, #3
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0318 	add.w	r3, r7, #24
 8000538:	4619      	mov	r1, r3
 800053a:	480f      	ldr	r0, [pc, #60]	; (8000578 <HAL_UART_MspInit+0x120>)
 800053c:	f000 faa0 	bl	8000a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000540:	2308      	movs	r3, #8
 8000542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	4619      	mov	r1, r3
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <HAL_UART_MspInit+0x120>)
 8000554:	f000 fa94 	bl	8000a80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2102      	movs	r1, #2
 800055c:	2026      	movs	r0, #38	; 0x26
 800055e:	f000 fa3c 	bl	80009da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000562:	2026      	movs	r0, #38	; 0x26
 8000564:	f000 fa55 	bl	8000a12 <HAL_NVIC_EnableIRQ>
}
 8000568:	bf00      	nop
 800056a:	3728      	adds	r7, #40	; 0x28
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40013800 	.word	0x40013800
 8000574:	40021000 	.word	0x40021000
 8000578:	40010800 	.word	0x40010800
 800057c:	40004400 	.word	0x40004400

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c6:	f000 f8d3 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_tick_1ms();
 80005ca:	f001 f97d 	bl	80018c8 <app_tick_1ms>
  shell_tick_1ms();
 80005ce:	f001 fb63 	bl	8001c98 <shell_tick_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
#if 1
	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_Pin);
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <EXTI0_IRQHandler+0x14>)
 80005de:	2201      	movs	r2, #1
 80005e0:	615a      	str	r2, [r3, #20]
	app_button_interrupt();
 80005e2:	f001 f90f 	bl	8001804 <app_button_interrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
  /* USER CODE BEGIN EXTI0_IRQn 1 */
#endif
  /* USER CODE END EXTI0_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40010400 	.word	0x40010400

080005f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
#if 1
	extern void shell_uart_interrupt(void);
	shell_uart_interrupt();
 80005f4:	f001 fdae 	bl	8002154 <shell_uart_interrupt>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
#if 1
	extern void hw_uart2_interrupt(void);
	hw_uart2_interrupt();
 8000600:	f001 fa12 	bl	8001a28 <hw_uart2_interrupt>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
#if 1
	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2_Pin);
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <EXTI15_10_IRQHandler+0x14>)
 800060e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000612:	615a      	str	r2, [r3, #20]
	app_button2_interrupt();
 8000614:	f001 f928 	bl	8001868 <app_button2_interrupt>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
#endif
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40010400 	.word	0x40010400

08000620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <_sbrk+0x5c>)
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <_sbrk+0x60>)
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <_sbrk+0x64>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d102      	bne.n	8000642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <_sbrk+0x64>)
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <_sbrk+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	429a      	cmp	r2, r3
 800064e:	d207      	bcs.n	8000660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000650:	f001 fdf4 	bl	800223c <__errno>
 8000654:	4603      	mov	r3, r0
 8000656:	220c      	movs	r2, #12
 8000658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	e009      	b.n	8000674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <_sbrk+0x64>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <_sbrk+0x64>)
 8000670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20005000 	.word	0x20005000
 8000680:	00000400 	.word	0x00000400
 8000684:	20000114 	.word	0x20000114
 8000688:	200001d8 	.word	0x200001d8

0800068c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	; (80006d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	; (80006dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006be:	f7ff ffe5 	bl	800068c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006c2:	f001 fdc1 	bl	8002248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff fd49 	bl	800015c <main>
  bx lr
 80006ca:	4770      	bx	lr
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006d4:	080038a8 	.word	0x080038a8
  ldr r2, =_sbss
 80006d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006dc:	200001d8 	.word	0x200001d8

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_Init+0x28>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_Init+0x28>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f965 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	200f      	movs	r0, #15
 80006fc:	f000 f808 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff fe78 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f98b 	bl	8000a4a <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f000 f945 	bl	80009da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_InitTick+0x5c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	20000008 	.word	0x20000008
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x1c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x20>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <HAL_IncTick+0x20>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000008 	.word	0x20000008
 8000790:	20000118 	.word	0x20000118

08000794 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <HAL_GetTick+0x10>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	20000118 	.word	0x20000118

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <__NVIC_EnableIRQ+0x34>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100

08000844 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db12      	blt.n	800087c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 021f 	and.w	r2, r3, #31
 800085c:	490a      	ldr	r1, [pc, #40]	; (8000888 <__NVIC_DisableIRQ+0x44>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	095b      	lsrs	r3, r3, #5
 8000864:	2001      	movs	r0, #1
 8000866:	fa00 f202 	lsl.w	r2, r0, r2
 800086a:	3320      	adds	r3, #32
 800086c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000870:	f3bf 8f4f 	dsb	sy
}
 8000874:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000876:	f3bf 8f6f 	isb	sy
}
 800087a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0c      	blt.n	80008b8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4907      	ldr	r1, [pc, #28]	; (80008c4 <__NVIC_ClearPendingIRQ+0x38>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	3360      	adds	r3, #96	; 0x60
 80008b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000990:	d301      	bcc.n	8000996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000992:	2301      	movs	r3, #1
 8000994:	e00f      	b.n	80009b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <SysTick_Config+0x40>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099e:	210f      	movs	r1, #15
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f7ff ff90 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <SysTick_Config+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SysTick_Config+0x40>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff feeb 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ec:	f7ff ff00 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 80009f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff ff90 	bl	800091c <NVIC_EncodePriority>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff5f 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fef3 	bl	800080c <__NVIC_EnableIRQ>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff01 	bl	8000844 <__NVIC_DisableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ff94 	bl	8000980 <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff0b 	bl	800088c <__NVIC_ClearPendingIRQ>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b08b      	sub	sp, #44	; 0x2c
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a92:	e169      	b.n	8000d68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a94:	2201      	movs	r2, #1
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	f040 8158 	bne.w	8000d62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	4a9a      	ldr	r2, [pc, #616]	; (8000d20 <HAL_GPIO_Init+0x2a0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d05e      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000abc:	4a98      	ldr	r2, [pc, #608]	; (8000d20 <HAL_GPIO_Init+0x2a0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d875      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000ac2:	4a98      	ldr	r2, [pc, #608]	; (8000d24 <HAL_GPIO_Init+0x2a4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d058      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000ac8:	4a96      	ldr	r2, [pc, #600]	; (8000d24 <HAL_GPIO_Init+0x2a4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d86f      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000ace:	4a96      	ldr	r2, [pc, #600]	; (8000d28 <HAL_GPIO_Init+0x2a8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d052      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000ad4:	4a94      	ldr	r2, [pc, #592]	; (8000d28 <HAL_GPIO_Init+0x2a8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d869      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000ada:	4a94      	ldr	r2, [pc, #592]	; (8000d2c <HAL_GPIO_Init+0x2ac>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d04c      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000ae0:	4a92      	ldr	r2, [pc, #584]	; (8000d2c <HAL_GPIO_Init+0x2ac>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d863      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000ae6:	4a92      	ldr	r2, [pc, #584]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d046      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000aec:	4a90      	ldr	r2, [pc, #576]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d85d      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000af2:	2b12      	cmp	r3, #18
 8000af4:	d82a      	bhi.n	8000b4c <HAL_GPIO_Init+0xcc>
 8000af6:	2b12      	cmp	r3, #18
 8000af8:	d859      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <HAL_GPIO_Init+0x80>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b7b 	.word	0x08000b7b
 8000b04:	08000b55 	.word	0x08000b55
 8000b08:	08000b67 	.word	0x08000b67
 8000b0c:	08000ba9 	.word	0x08000ba9
 8000b10:	08000baf 	.word	0x08000baf
 8000b14:	08000baf 	.word	0x08000baf
 8000b18:	08000baf 	.word	0x08000baf
 8000b1c:	08000baf 	.word	0x08000baf
 8000b20:	08000baf 	.word	0x08000baf
 8000b24:	08000baf 	.word	0x08000baf
 8000b28:	08000baf 	.word	0x08000baf
 8000b2c:	08000baf 	.word	0x08000baf
 8000b30:	08000baf 	.word	0x08000baf
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000baf 	.word	0x08000baf
 8000b3c:	08000baf 	.word	0x08000baf
 8000b40:	08000baf 	.word	0x08000baf
 8000b44:	08000b5d 	.word	0x08000b5d
 8000b48:	08000b71 	.word	0x08000b71
 8000b4c:	4a79      	ldr	r2, [pc, #484]	; (8000d34 <HAL_GPIO_Init+0x2b4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d013      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b52:	e02c      	b.n	8000bae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	623b      	str	r3, [r7, #32]
          break;
 8000b5a:	e029      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	3304      	adds	r3, #4
 8000b62:	623b      	str	r3, [r7, #32]
          break;
 8000b64:	e024      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	623b      	str	r3, [r7, #32]
          break;
 8000b6e:	e01f      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	330c      	adds	r3, #12
 8000b76:	623b      	str	r3, [r7, #32]
          break;
 8000b78:	e01a      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b82:	2304      	movs	r3, #4
 8000b84:	623b      	str	r3, [r7, #32]
          break;
 8000b86:	e013      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d105      	bne.n	8000b9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b90:	2308      	movs	r3, #8
 8000b92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	611a      	str	r2, [r3, #16]
          break;
 8000b9a:	e009      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	615a      	str	r2, [r3, #20]
          break;
 8000ba6:	e003      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
          break;
 8000bac:	e000      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          break;
 8000bae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	2bff      	cmp	r3, #255	; 0xff
 8000bb4:	d801      	bhi.n	8000bba <HAL_GPIO_Init+0x13a>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	e001      	b.n	8000bbe <HAL_GPIO_Init+0x13e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	2bff      	cmp	r3, #255	; 0xff
 8000bc4:	d802      	bhi.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	e002      	b.n	8000bd2 <HAL_GPIO_Init+0x152>
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3b08      	subs	r3, #8
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	210f      	movs	r1, #15
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	6a39      	ldr	r1, [r7, #32]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	431a      	orrs	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 80b1 	beq.w	8000d62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c00:	4b4d      	ldr	r3, [pc, #308]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a4c      	ldr	r2, [pc, #304]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b4a      	ldr	r3, [pc, #296]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <HAL_GPIO_Init+0x2bc>)
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3302      	adds	r3, #2
 8000c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	220f      	movs	r2, #15
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a40      	ldr	r2, [pc, #256]	; (8000d40 <HAL_GPIO_Init+0x2c0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d013      	beq.n	8000c6c <HAL_GPIO_Init+0x1ec>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3f      	ldr	r2, [pc, #252]	; (8000d44 <HAL_GPIO_Init+0x2c4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d00d      	beq.n	8000c68 <HAL_GPIO_Init+0x1e8>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3e      	ldr	r2, [pc, #248]	; (8000d48 <HAL_GPIO_Init+0x2c8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d007      	beq.n	8000c64 <HAL_GPIO_Init+0x1e4>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3d      	ldr	r2, [pc, #244]	; (8000d4c <HAL_GPIO_Init+0x2cc>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d101      	bne.n	8000c60 <HAL_GPIO_Init+0x1e0>
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e006      	b.n	8000c6e <HAL_GPIO_Init+0x1ee>
 8000c60:	2304      	movs	r3, #4
 8000c62:	e004      	b.n	8000c6e <HAL_GPIO_Init+0x1ee>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e002      	b.n	8000c6e <HAL_GPIO_Init+0x1ee>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <HAL_GPIO_Init+0x1ee>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c70:	f002 0203 	and.w	r2, r2, #3
 8000c74:	0092      	lsls	r2, r2, #2
 8000c76:	4093      	lsls	r3, r2
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c7e:	492f      	ldr	r1, [pc, #188]	; (8000d3c <HAL_GPIO_Init+0x2bc>)
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	3302      	adds	r3, #2
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	492c      	ldr	r1, [pc, #176]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	600b      	str	r3, [r1, #0]
 8000ca4:	e006      	b.n	8000cb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4928      	ldr	r1, [pc, #160]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4922      	ldr	r1, [pc, #136]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	604b      	str	r3, [r1, #4]
 8000ccc:	e006      	b.n	8000cdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	491e      	ldr	r1, [pc, #120]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d006      	beq.n	8000cf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	4918      	ldr	r1, [pc, #96]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	608b      	str	r3, [r1, #8]
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4914      	ldr	r1, [pc, #80]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d021      	beq.n	8000d54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	490e      	ldr	r1, [pc, #56]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60cb      	str	r3, [r1, #12]
 8000d1c:	e021      	b.n	8000d62 <HAL_GPIO_Init+0x2e2>
 8000d1e:	bf00      	nop
 8000d20:	10320000 	.word	0x10320000
 8000d24:	10310000 	.word	0x10310000
 8000d28:	10220000 	.word	0x10220000
 8000d2c:	10210000 	.word	0x10210000
 8000d30:	10120000 	.word	0x10120000
 8000d34:	10110000 	.word	0x10110000
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40010c00 	.word	0x40010c00
 8000d48:	40011000 	.word	0x40011000
 8000d4c:	40011400 	.word	0x40011400
 8000d50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_GPIO_Init+0x304>)
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4909      	ldr	r1, [pc, #36]	; (8000d84 <HAL_GPIO_Init+0x304>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	3301      	adds	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f47f ae8e 	bne.w	8000a94 <HAL_GPIO_Init+0x14>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	372c      	adds	r7, #44	; 0x2c
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	887b      	ldrh	r3, [r7, #2]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e001      	b.n	8000daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	807b      	strh	r3, [r7, #2]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc6:	787b      	ldrb	r3, [r7, #1]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dcc:	887a      	ldrh	r2, [r7, #2]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dd2:	e003      	b.n	8000ddc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	041a      	lsls	r2, r3, #16
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	611a      	str	r2, [r3, #16]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000df8:	887a      	ldrh	r2, [r7, #2]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	041a      	lsls	r2, r3, #16
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	887b      	ldrh	r3, [r7, #2]
 8000e06:	400b      	ands	r3, r1
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	611a      	str	r2, [r3, #16]
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e272      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 8087 	beq.w	8000f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e38:	4b92      	ldr	r3, [pc, #584]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d00c      	beq.n	8000e5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e44:	4b8f      	ldr	r3, [pc, #572]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d112      	bne.n	8000e76 <HAL_RCC_OscConfig+0x5e>
 8000e50:	4b8c      	ldr	r3, [pc, #560]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5c:	d10b      	bne.n	8000e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5e:	4b89      	ldr	r3, [pc, #548]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d06c      	beq.n	8000f44 <HAL_RCC_OscConfig+0x12c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d168      	bne.n	8000f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e24c      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7e:	d106      	bne.n	8000e8e <HAL_RCC_OscConfig+0x76>
 8000e80:	4b80      	ldr	r3, [pc, #512]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a7f      	ldr	r2, [pc, #508]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e02e      	b.n	8000eec <HAL_RCC_OscConfig+0xd4>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x98>
 8000e96:	4b7b      	ldr	r3, [pc, #492]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a7a      	ldr	r2, [pc, #488]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	4b78      	ldr	r3, [pc, #480]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a77      	ldr	r2, [pc, #476]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e01d      	b.n	8000eec <HAL_RCC_OscConfig+0xd4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0xbc>
 8000eba:	4b72      	ldr	r3, [pc, #456]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a71      	ldr	r2, [pc, #452]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b6f      	ldr	r3, [pc, #444]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a6e      	ldr	r2, [pc, #440]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e00b      	b.n	8000eec <HAL_RCC_OscConfig+0xd4>
 8000ed4:	4b6b      	ldr	r3, [pc, #428]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a6a      	ldr	r2, [pc, #424]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b68      	ldr	r3, [pc, #416]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a67      	ldr	r2, [pc, #412]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc4e 	bl	8000794 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fc4a 	bl	8000794 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e200      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0e:	4b5d      	ldr	r3, [pc, #372]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0xe4>
 8000f1a:	e014      	b.n	8000f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc3a 	bl	8000794 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fc36 	bl	8000794 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	; 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e1ec      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	4b53      	ldr	r3, [pc, #332]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x10c>
 8000f42:	e000      	b.n	8000f46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d063      	beq.n	800101a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f52:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f5e:	4b49      	ldr	r3, [pc, #292]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d11c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x18c>
 8000f6a:	4b46      	ldr	r3, [pc, #280]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d116      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f76:	4b43      	ldr	r3, [pc, #268]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_RCC_OscConfig+0x176>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d001      	beq.n	8000f8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e1c0      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4939      	ldr	r1, [pc, #228]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa2:	e03a      	b.n	800101a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d020      	beq.n	8000fee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_RCC_OscConfig+0x270>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fbef 	bl	8000794 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff fbeb 	bl	8000794 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e1a1      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f0      	beq.n	8000fba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4927      	ldr	r1, [pc, #156]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
 8000fec:	e015      	b.n	800101a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fbce 	bl	8000794 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fbca 	bl	8000794 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e180      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f0      	bne.n	8000ffc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d03a      	beq.n	800109c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d019      	beq.n	8001062 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_RCC_OscConfig+0x274>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001034:	f7ff fbae 	bl	8000794 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fbaa 	bl	8000794 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e160      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_RCC_OscConfig+0x26c>)
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800105a:	2001      	movs	r0, #1
 800105c:	f000 fad8 	bl	8001610 <RCC_Delay>
 8001060:	e01c      	b.n	800109c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_RCC_OscConfig+0x274>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001068:	f7ff fb94 	bl	8000794 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800106e:	e00f      	b.n	8001090 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001070:	f7ff fb90 	bl	8000794 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d908      	bls.n	8001090 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e146      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	42420000 	.word	0x42420000
 800108c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001090:	4b92      	ldr	r3, [pc, #584]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1e9      	bne.n	8001070 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80a6 	beq.w	80011f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ae:	4b8b      	ldr	r3, [pc, #556]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10d      	bne.n	80010d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b88      	ldr	r3, [pc, #544]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a87      	ldr	r2, [pc, #540]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b85      	ldr	r3, [pc, #532]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010d2:	2301      	movs	r3, #1
 80010d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d6:	4b82      	ldr	r3, [pc, #520]	; (80012e0 <HAL_RCC_OscConfig+0x4c8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d118      	bne.n	8001114 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e2:	4b7f      	ldr	r3, [pc, #508]	; (80012e0 <HAL_RCC_OscConfig+0x4c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a7e      	ldr	r2, [pc, #504]	; (80012e0 <HAL_RCC_OscConfig+0x4c8>)
 80010e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fb51 	bl	8000794 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f6:	f7ff fb4d 	bl	8000794 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b64      	cmp	r3, #100	; 0x64
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e103      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001108:	4b75      	ldr	r3, [pc, #468]	; (80012e0 <HAL_RCC_OscConfig+0x4c8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d106      	bne.n	800112a <HAL_RCC_OscConfig+0x312>
 800111c:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4a6e      	ldr	r2, [pc, #440]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6213      	str	r3, [r2, #32]
 8001128:	e02d      	b.n	8001186 <HAL_RCC_OscConfig+0x36e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x334>
 8001132:	4b6a      	ldr	r3, [pc, #424]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a69      	ldr	r2, [pc, #420]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	6213      	str	r3, [r2, #32]
 800113e:	4b67      	ldr	r3, [pc, #412]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a66      	ldr	r2, [pc, #408]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	e01c      	b.n	8001186 <HAL_RCC_OscConfig+0x36e>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b05      	cmp	r3, #5
 8001152:	d10c      	bne.n	800116e <HAL_RCC_OscConfig+0x356>
 8001154:	4b61      	ldr	r3, [pc, #388]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a60      	ldr	r2, [pc, #384]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6213      	str	r3, [r2, #32]
 8001160:	4b5e      	ldr	r3, [pc, #376]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4a5d      	ldr	r2, [pc, #372]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6213      	str	r3, [r2, #32]
 800116c:	e00b      	b.n	8001186 <HAL_RCC_OscConfig+0x36e>
 800116e:	4b5b      	ldr	r3, [pc, #364]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a5a      	ldr	r2, [pc, #360]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	4b58      	ldr	r3, [pc, #352]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001180:	f023 0304 	bic.w	r3, r3, #4
 8001184:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d015      	beq.n	80011ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118e:	f7ff fb01 	bl	8000794 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001194:	e00a      	b.n	80011ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001196:	f7ff fafd 	bl	8000794 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e0b1      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ac:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0ee      	beq.n	8001196 <HAL_RCC_OscConfig+0x37e>
 80011b8:	e014      	b.n	80011e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ba:	f7ff faeb 	bl	8000794 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c0:	e00a      	b.n	80011d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c2:	f7ff fae7 	bl	8000794 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e09b      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d8:	4b40      	ldr	r3, [pc, #256]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1ee      	bne.n	80011c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d105      	bne.n	80011f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a3b      	ldr	r2, [pc, #236]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8087 	beq.w	800130e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b08      	cmp	r3, #8
 800120a:	d061      	beq.n	80012d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d146      	bne.n	80012a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <HAL_RCC_OscConfig+0x4cc>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fabb 	bl	8000794 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001222:	f7ff fab7 	bl	8000794 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e06d      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f0      	bne.n	8001222 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001248:	d108      	bne.n	800125c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4921      	ldr	r1, [pc, #132]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a19      	ldr	r1, [r3, #32]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	430b      	orrs	r3, r1
 800126e:	491b      	ldr	r1, [pc, #108]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x4cc>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fa8b 	bl	8000794 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff fa87 	bl	8000794 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e03d      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x46a>
 80012a0:	e035      	b.n	800130e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_RCC_OscConfig+0x4cc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fa74 	bl	8000794 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fa70 	bl	8000794 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e026      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x498>
 80012ce:	e01e      	b.n	800130e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d107      	bne.n	80012e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e019      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40007000 	.word	0x40007000
 80012e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x500>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d106      	bne.n	800130a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d001      	beq.n	800130e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0d0      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d910      	bls.n	8001360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b67      	ldr	r3, [pc, #412]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 0207 	bic.w	r2, r3, #7
 8001346:	4965      	ldr	r1, [pc, #404]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134e:	4b63      	ldr	r3, [pc, #396]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e0b8      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d020      	beq.n	80013ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001378:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a58      	ldr	r2, [pc, #352]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001382:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800139a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	494d      	ldr	r1, [pc, #308]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d040      	beq.n	800143c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d107      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d115      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e07f      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d107      	bne.n	80013ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e073      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e06b      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f023 0203 	bic.w	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4936      	ldr	r1, [pc, #216]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800140c:	f7ff f9c2 	bl	8000794 <HAL_GetTick>
 8001410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	e00a      	b.n	800142a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001414:	f7ff f9be 	bl	8000794 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001422:	4293      	cmp	r3, r2
 8001424:	d901      	bls.n	800142a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e053      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 020c 	and.w	r2, r3, #12
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	429a      	cmp	r2, r3
 800143a:	d1eb      	bne.n	8001414 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d210      	bcs.n	800146c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 0207 	bic.w	r2, r3, #7
 8001452:	4922      	ldr	r1, [pc, #136]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e032      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4916      	ldr	r1, [pc, #88]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	490e      	ldr	r1, [pc, #56]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014aa:	f000 f821 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 80014ae:	4602      	mov	r2, r0
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	490a      	ldr	r1, [pc, #40]	; (80014e4 <HAL_RCC_ClockConfig+0x1c8>)
 80014bc:	5ccb      	ldrb	r3, [r1, r3]
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_RCC_ClockConfig+0x1cc>)
 80014c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_ClockConfig+0x1d0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f920 	bl	8000710 <HAL_InitTick>

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	080036d8 	.word	0x080036d8
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000004 	.word	0x20000004

080014f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f0:	b490      	push	{r4, r7}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_RCC_GetSysClockFreq+0xac>)
 80014f8:	1d3c      	adds	r4, r7, #4
 80014fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001500:	f240 2301 	movw	r3, #513	; 0x201
 8001504:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b04      	cmp	r3, #4
 8001528:	d002      	beq.n	8001530 <HAL_RCC_GetSysClockFreq+0x40>
 800152a:	2b08      	cmp	r3, #8
 800152c:	d003      	beq.n	8001536 <HAL_RCC_GetSysClockFreq+0x46>
 800152e:	e02b      	b.n	8001588 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001532:	623b      	str	r3, [r7, #32]
      break;
 8001534:	e02b      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	0c9b      	lsrs	r3, r3, #18
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3328      	adds	r3, #40	; 0x28
 8001540:	443b      	add	r3, r7
 8001542:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001546:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d012      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	0c5b      	lsrs	r3, r3, #17
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	3328      	adds	r3, #40	; 0x28
 800155e:	443b      	add	r3, r7
 8001560:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001564:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800156a:	fb03 f202 	mul.w	r2, r3, r2
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	fbb2 f3f3 	udiv	r3, r2, r3
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	e004      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	623b      	str	r3, [r7, #32]
      break;
 8001586:	e002      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800158a:	623b      	str	r3, [r7, #32]
      break;
 800158c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800158e:	6a3b      	ldr	r3, [r7, #32]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bc90      	pop	{r4, r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	0800353c 	.word	0x0800353c
 80015a0:	40021000 	.word	0x40021000
 80015a4:	007a1200 	.word	0x007a1200
 80015a8:	003d0900 	.word	0x003d0900

080015ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HAL_RCC_GetHCLKFreq+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	20000000 	.word	0x20000000

080015c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015c4:	f7ff fff2 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	4903      	ldr	r1, [pc, #12]	; (80015e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015d6:	5ccb      	ldrb	r3, [r1, r3]
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	080036e8 	.word	0x080036e8

080015e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015ec:	f7ff ffde 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	0adb      	lsrs	r3, r3, #11
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	4903      	ldr	r1, [pc, #12]	; (800160c <HAL_RCC_GetPCLK2Freq+0x24>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	080036e8 	.word	0x080036e8

08001610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <RCC_Delay+0x34>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <RCC_Delay+0x38>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0a5b      	lsrs	r3, r3, #9
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800162c:	bf00      	nop
  }
  while (Delay --);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	60fa      	str	r2, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f9      	bne.n	800162c <RCC_Delay+0x1c>
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000000 	.word	0x20000000
 8001648:	10624dd3 	.word	0x10624dd3

0800164c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e03f      	b.n	80016de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7fe fef0 	bl	8000458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2224      	movs	r2, #36	; 0x24
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800168e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f829 	bl	80016e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001722:	f023 030c 	bic.w	r3, r3, #12
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	430b      	orrs	r3, r1
 800172e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699a      	ldr	r2, [r3, #24]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <UART_SetConfig+0x114>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d103      	bne.n	8001758 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001750:	f7ff ff4a 	bl	80015e8 <HAL_RCC_GetPCLK2Freq>
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	e002      	b.n	800175e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001758:	f7ff ff32 	bl	80015c0 <HAL_RCC_GetPCLK1Freq>
 800175c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	009a      	lsls	r2, r3, #2
 8001768:	441a      	add	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	fbb2 f3f3 	udiv	r3, r2, r3
 8001774:	4a22      	ldr	r2, [pc, #136]	; (8001800 <UART_SetConfig+0x118>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	0119      	lsls	r1, r3, #4
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	009a      	lsls	r2, r3, #2
 8001788:	441a      	add	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fbb2 f2f3 	udiv	r2, r2, r3
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <UART_SetConfig+0x118>)
 8001796:	fba3 0302 	umull	r0, r3, r3, r2
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	fb00 f303 	mul.w	r3, r0, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	3332      	adds	r3, #50	; 0x32
 80017a8:	4a15      	ldr	r2, [pc, #84]	; (8001800 <UART_SetConfig+0x118>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b4:	4419      	add	r1, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009a      	lsls	r2, r3, #2
 80017c0:	441a      	add	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <UART_SetConfig+0x118>)
 80017ce:	fba3 0302 	umull	r0, r3, r3, r2
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2064      	movs	r0, #100	; 0x64
 80017d6:	fb00 f303 	mul.w	r3, r0, r3
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	3332      	adds	r3, #50	; 0x32
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <UART_SetConfig+0x118>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	f003 020f 	and.w	r2, r3, #15
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	440a      	add	r2, r1
 80017f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40013800 	.word	0x40013800
 8001800:	51eb851f 	.word	0x51eb851f

08001804 <app_button_interrupt>:
static cbf_t cbf;
static uint8_t cbf_area[APP_UART_BUFFER_MAX];
static bool app_started = false;
extern uint32_t delay;

void app_button_interrupt(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

	static uint32_t debouncing_time_ms = 0;
	if(!app_started)
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <app_button_interrupt+0x50>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f083 0301 	eor.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d11b      	bne.n	800184e <app_button_interrupt+0x4a>
		return;

	if((hw_tick_ms_get() - debouncing_time_ms) >= APP_DEBOUNCING_TIME_MS){
 8001816:	f000 fa37 	bl	8001c88 <hw_tick_ms_get>
 800181a:	4602      	mov	r2, r0
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <app_button_interrupt+0x54>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b31      	cmp	r3, #49	; 0x31
 8001824:	d914      	bls.n	8001850 <app_button_interrupt+0x4c>
		if(delay == 1000){
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <app_button_interrupt+0x58>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800182e:	d104      	bne.n	800183a <app_button_interrupt+0x36>
			SERIAL_TX("set timer 50\n"); //13
 8001830:	210e      	movs	r1, #14
 8001832:	480b      	ldr	r0, [pc, #44]	; (8001860 <app_button_interrupt+0x5c>)
 8001834:	f000 f952 	bl	8001adc <hw_uart_tx>
 8001838:	e003      	b.n	8001842 <app_button_interrupt+0x3e>
		}
		else{
			SERIAL_TX("set timer 1000\n"); //15
 800183a:	2110      	movs	r1, #16
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <app_button_interrupt+0x60>)
 800183e:	f000 f94d 	bl	8001adc <hw_uart_tx>
		}
		debouncing_time_ms = hw_tick_ms_get();
 8001842:	f000 fa21 	bl	8001c88 <hw_tick_ms_get>
 8001846:	4603      	mov	r3, r0
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <app_button_interrupt+0x54>)
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e000      	b.n	8001850 <app_button_interrupt+0x4c>
		return;
 800184e:	bf00      	nop
	}
}
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000168 	.word	0x20000168
 8001858:	2000016c 	.word	0x2000016c
 800185c:	200001c0 	.word	0x200001c0
 8001860:	0800354c 	.word	0x0800354c
 8001864:	0800355c 	.word	0x0800355c

08001868 <app_button2_interrupt>:

void app_button2_interrupt(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

	static uint32_t debouncing_time_ms = 0;
	if(!app_started)
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <app_button2_interrupt+0x50>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d11c      	bne.n	80018b4 <app_button2_interrupt+0x4c>
		return;

	if((hw_tick_ms_get() - debouncing_time_ms) >= APP_DEBOUNCING_TIME_MS){
 800187a:	f000 fa05 	bl	8001c88 <hw_tick_ms_get>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <app_button2_interrupt+0x54>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b31      	cmp	r3, #49	; 0x31
 8001888:	d915      	bls.n	80018b6 <app_button2_interrupt+0x4e>
		if(hw_led_n_state_get(2))
 800188a:	2002      	movs	r0, #2
 800188c:	f000 f9be 	bl	8001c0c <hw_led_n_state_get>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d004      	beq.n	80018a0 <app_button2_interrupt+0x38>
			SERIAL_TX("led 2 off\n");
 8001896:	210b      	movs	r1, #11
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <app_button2_interrupt+0x58>)
 800189a:	f000 f91f 	bl	8001adc <hw_uart_tx>
 800189e:	e003      	b.n	80018a8 <app_button2_interrupt+0x40>
		else
			SERIAL_TX("led 2 on\n");
 80018a0:	210a      	movs	r1, #10
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <app_button2_interrupt+0x5c>)
 80018a4:	f000 f91a 	bl	8001adc <hw_uart_tx>
		debouncing_time_ms = hw_tick_ms_get();
 80018a8:	f000 f9ee 	bl	8001c88 <hw_tick_ms_get>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a03      	ldr	r2, [pc, #12]	; (80018bc <app_button2_interrupt+0x54>)
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e000      	b.n	80018b6 <app_button2_interrupt+0x4e>
		return;
 80018b4:	bf00      	nop
	}
}
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000168 	.word	0x20000168
 80018bc:	20000170 	.word	0x20000170
 80018c0:	0800356c 	.word	0x0800356c
 80018c4:	08003578 	.word	0x08003578

080018c8 <app_tick_1ms>:

void app_tick_1ms(void){
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	if(!app_started)
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <app_tick_1ms+0x18>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	f083 0301 	eor.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
		return;
}
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000168 	.word	0x20000168

080018e4 <app_init>:

void app_init(void){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	cbf_init(&cbf,cbf_area,APP_UART_BUFFER_MAX);
 80018e8:	2240      	movs	r2, #64	; 0x40
 80018ea:	4907      	ldr	r1, [pc, #28]	; (8001908 <app_init+0x24>)
 80018ec:	4807      	ldr	r0, [pc, #28]	; (800190c <app_init+0x28>)
 80018ee:	f000 f817 	bl	8001920 <cbf_init>
	hw_uart_init(&cbf);
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <app_init+0x28>)
 80018f4:	f000 f874 	bl	80019e0 <hw_uart_init>
	shell_init();
 80018f8:	f000 fc8a 	bl	8002210 <shell_init>
	app_started = true;
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <app_init+0x2c>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000128 	.word	0x20000128
 800190c:	2000011c 	.word	0x2000011c
 8001910:	20000168 	.word	0x20000168

08001914 <app_loop>:


void app_loop(void){
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <cbf_init>:
#include <stdint.h>
#include "cbf.h"

#define CBF_INC(v,mv) (((v+1) >= mv) ? 0 : (v+1)) // Faz o giro no buffer circular

cbf_status_t cbf_init(cbf_t *cb, uint8_t *area, uint16_t size){
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	4613      	mov	r3, r2
 800192c:	80fb      	strh	r3, [r7, #6]
	cb->buffer = area;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	609a      	str	r2, [r3, #8]
	cb->size = size;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	88fa      	ldrh	r2, [r7, #6]
 8001938:	809a      	strh	r2, [r3, #4]
	cb->prod = cb->cons = 0;
 800193a:	2100      	movs	r1, #0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	460a      	mov	r2, r1
 8001940:	805a      	strh	r2, [r3, #2]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	460a      	mov	r2, r1
 8001946:	801a      	strh	r2, [r3, #0]

	return CBF_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <cbf_put>:
	cb->cons = CBF_INC(cb->cons, cb->size); // vê se será pos+1 ou volta para a pos==0 no buffer circular

	return CBF_OK;
}

cbf_status_t cbf_put(cbf_t *cb, uint8_t c){
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
	uint16_t next_prod = CBF_INC(cb->prod, cb->size);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	3301      	adds	r3, #1
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	8892      	ldrh	r2, [r2, #4]
 800196c:	4293      	cmp	r3, r2
 800196e:	da05      	bge.n	800197c <cbf_put+0x28>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	3301      	adds	r3, #1
 8001978:	b29b      	uxth	r3, r3
 800197a:	e000      	b.n	800197e <cbf_put+0x2a>
 800197c:	2300      	movs	r3, #0
 800197e:	81fb      	strh	r3, [r7, #14]

	if(next_prod == cb->cons) // evitar de um dado sobreescrever um dado já existente no buffer circular, overrun
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	885b      	ldrh	r3, [r3, #2]
 8001984:	b29b      	uxth	r3, r3
 8001986:	89fa      	ldrh	r2, [r7, #14]
 8001988:	429a      	cmp	r2, r3
 800198a:	d101      	bne.n	8001990 <cbf_put+0x3c>
		return CBF_FULL;
 800198c:	2301      	movs	r3, #1
 800198e:	e00b      	b.n	80019a8 <cbf_put+0x54>

	cb->buffer[cb->prod] = c; // Na posição do produtor atual, colocar o dado c.
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	b292      	uxth	r2, r2
 800199a:	4413      	add	r3, r2
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	701a      	strb	r2, [r3, #0]
	cb->prod = next_prod;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	89fa      	ldrh	r2, [r7, #14]
 80019a4:	801a      	strh	r2, [r3, #0]

	return CBF_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <hw_uart_disable_interrupts>:
#include "hw.h"

extern UART_HandleTypeDef huart2; //extern: linker sabe que essa var já existe, e usa essa msm variável
static cbf_t *hw_uart_cbf = 0; // buffer circular

void hw_uart_disable_interrupts(void){
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80019b6:	2026      	movs	r0, #38	; 0x26
 80019b8:	f7ff f839 	bl	8000a2e <HAL_NVIC_DisableIRQ>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <hw_uart_enable_interrupts>:

void hw_uart_enable_interrupts(void){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2102      	movs	r1, #2
 80019c8:	2026      	movs	r0, #38	; 0x26
 80019ca:	f7ff f806 	bl	80009da <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 80019ce:	2026      	movs	r0, #38	; 0x26
 80019d0:	f7ff f847 	bl	8000a62 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019d4:	2026      	movs	r0, #38	; 0x26
 80019d6:	f7ff f81c 	bl	8000a12 <HAL_NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <hw_uart_init>:

void hw_uart_init(cbf_t *cbf){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	hw_uart_disable_interrupts();
 80019e8:	f7ff ffe3 	bl	80019b2 <hw_uart_disable_interrupts>

	huart2.Instance->CR3 |= USART_CR3_EIE;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <hw_uart_init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <hw_uart_init+0x40>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	615a      	str	r2, [r3, #20]
	huart2.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <hw_uart_init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <hw_uart_init+0x40>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001a0a:	60da      	str	r2, [r3, #12]

	hw_uart_cbf = cbf;
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <hw_uart_init+0x44>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
	hw_uart_enable_interrupts();
 8001a12:	f7ff ffd5 	bl	80019c0 <hw_uart_enable_interrupts>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200000d0 	.word	0x200000d0
 8001a24:	20000174 	.word	0x20000174

08001a28 <hw_uart2_interrupt>:

// INTERRUPÇÃO - recepção - importante!
void hw_uart2_interrupt(void){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t sr;
	USART_TypeDef *h = huart2.Instance;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <hw_uart2_interrupt+0x78>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60bb      	str	r3, [r7, #8]

	sr = h->SR;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 8001a3a:	e005      	b.n	8001a48 <hw_uart2_interrupt+0x20>
		sr = h->SR;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
		c = h->DR;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	71fb      	strb	r3, [r7, #7]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f4      	bne.n	8001a3c <hw_uart2_interrupt+0x14>
	}

	// se sem erros e com dado recebido ... pegar o dado e colocar no buffer
	if(sr & UART_FLAG_RXNE){
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00d      	beq.n	8001a78 <hw_uart2_interrupt+0x50>
		c = h->DR;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	71fb      	strb	r3, [r7, #7]

		if(hw_uart_cbf)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <hw_uart2_interrupt+0x7c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <hw_uart2_interrupt+0x50>
			cbf_put(hw_uart_cbf,c);
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <hw_uart2_interrupt+0x7c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff6e 	bl	8001954 <cbf_put>
	}
	if(hw_led_n_state_get(3))
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f000 f8c7 	bl	8001c0c <hw_led_n_state_get>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <hw_uart2_interrupt+0x66>
		hw_led_n_state_set(3,false);
 8001a84:	2100      	movs	r1, #0
 8001a86:	2003      	movs	r0, #3
 8001a88:	f000 f880 	bl	8001b8c <hw_led_n_state_set>
	else
		hw_led_n_state_set(3,true);
}
 8001a8c:	e003      	b.n	8001a96 <hw_uart2_interrupt+0x6e>
		hw_led_n_state_set(3,true);
 8001a8e:	2101      	movs	r1, #1
 8001a90:	2003      	movs	r0, #3
 8001a92:	f000 f87b 	bl	8001b8c <hw_led_n_state_set>
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200000d0 	.word	0x200000d0
 8001aa4:	20000174 	.word	0x20000174

08001aa8 <hw_uart_tx_byte>:

// POOLING - transmissão
static void hw_uart_tx_byte(uint8_t c){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *h = huart2.Instance; // USART_PORT
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <hw_uart_tx_byte+0x30>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]

	// garante que o shift register esteja vazio
	while(!(h->SR & UART_FLAG_TXE)){}
 8001ab8:	bf00      	nop
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f9      	beq.n	8001aba <hw_uart_tx_byte+0x12>
	h->DR = c;
 8001ac6:	79fa      	ldrb	r2, [r7, #7]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200000d0 	.word	0x200000d0

08001adc <hw_uart_tx>:

void hw_uart_tx(uint8_t *buffer, uint32_t size){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	for(size_t pos = 0; pos < size; pos++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e009      	b.n	8001b00 <hw_uart_tx+0x24>
		hw_uart_tx_byte(buffer[pos]);
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ffd7 	bl	8001aa8 <hw_uart_tx_byte>
	for(size_t pos = 0; pos < size; pos++)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3f1      	bcc.n	8001aec <hw_uart_tx+0x10>
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <hw_button_n_state_get>:
		return true;
	else
		return false;
}

bool hw_button_n_state_get(uint8_t n){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState button_state;
	switch(n){
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d002      	beq.n	8001b2a <hw_button_n_state_get+0x16>
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d007      	beq.n	8001b38 <hw_button_n_state_get+0x24>
 8001b28:	e00e      	b.n	8001b48 <hw_button_n_state_get+0x34>
		case 1:
			button_state = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	480f      	ldr	r0, [pc, #60]	; (8001b6c <hw_button_n_state_get+0x58>)
 8001b2e:	f7ff f92b 	bl	8000d88 <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	73fb      	strb	r3, [r7, #15]
			break;
 8001b36:	e00e      	b.n	8001b56 <hw_button_n_state_get+0x42>
		case 2:
			button_state = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8001b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <hw_button_n_state_get+0x5c>)
 8001b3e:	f7ff f923 	bl	8000d88 <HAL_GPIO_ReadPin>
 8001b42:	4603      	mov	r3, r0
 8001b44:	73fb      	strb	r3, [r7, #15]
			break;
 8001b46:	e006      	b.n	8001b56 <hw_button_n_state_get+0x42>
		default:
			button_state = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <hw_button_n_state_get+0x58>)
 8001b4c:	f7ff f91c 	bl	8000d88 <HAL_GPIO_ReadPin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]
			break;
 8001b54:	bf00      	nop
	}
	if(button_state == GPIO_PIN_RESET)
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <hw_button_n_state_get+0x4c>
		return true;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <hw_button_n_state_get+0x4e>
	else
		return false;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	40010c00 	.word	0x40010c00

08001b74 <hw_led_toggle>:

void hw_led_toggle(void){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <hw_led_toggle+0x14>)
 8001b7e:	f7ff f932 	bl	8000de6 <HAL_GPIO_TogglePin>
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40011000 	.word	0x40011000

08001b8c <hw_led_n_state_set>:
void hw_led_state_set(bool state){
	GPIO_PinState led_state = state ? GPIO_PIN_RESET : GPIO_PIN_SET;
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_state);
}

void hw_led_n_state_set(uint8_t n, bool state){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	460a      	mov	r2, r1
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState led_state = state ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	f083 0301 	eor.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	73fb      	strb	r3, [r7, #15]
	switch(n){
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d016      	beq.n	8001bda <hw_led_n_state_set+0x4e>
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	dc1c      	bgt.n	8001bea <hw_led_n_state_set+0x5e>
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d002      	beq.n	8001bba <hw_led_n_state_set+0x2e>
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d008      	beq.n	8001bca <hw_led_n_state_set+0x3e>
 8001bb8:	e017      	b.n	8001bea <hw_led_n_state_set+0x5e>
		case 1:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_state);
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc2:	4810      	ldr	r0, [pc, #64]	; (8001c04 <hw_led_n_state_set+0x78>)
 8001bc4:	f7ff f8f7 	bl	8000db6 <HAL_GPIO_WritePin>
			break;
 8001bc8:	e017      	b.n	8001bfa <hw_led_n_state_set+0x6e>
		case 2:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, led_state);
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <hw_led_n_state_set+0x7c>)
 8001bd4:	f7ff f8ef 	bl	8000db6 <HAL_GPIO_WritePin>
			break;
 8001bd8:	e00f      	b.n	8001bfa <hw_led_n_state_set+0x6e>
		case 3:
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, led_state);
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <hw_led_n_state_set+0x7c>)
 8001be4:	f7ff f8e7 	bl	8000db6 <HAL_GPIO_WritePin>
			break;
 8001be8:	e007      	b.n	8001bfa <hw_led_n_state_set+0x6e>
		default:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_state);
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf2:	4804      	ldr	r0, [pc, #16]	; (8001c04 <hw_led_n_state_set+0x78>)
 8001bf4:	f7ff f8df 	bl	8000db6 <HAL_GPIO_WritePin>
			break;
 8001bf8:	bf00      	nop
	}
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40010800 	.word	0x40010800

08001c0c <hw_led_n_state_get>:

bool hw_led_n_state_get(uint8_t n){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState led_state;
	switch(n){
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d016      	beq.n	8001c4a <hw_led_n_state_get+0x3e>
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	dc1c      	bgt.n	8001c5a <hw_led_n_state_get+0x4e>
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d002      	beq.n	8001c2a <hw_led_n_state_get+0x1e>
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d008      	beq.n	8001c3a <hw_led_n_state_get+0x2e>
 8001c28:	e017      	b.n	8001c5a <hw_led_n_state_get+0x4e>
		case 1:
			led_state =  HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin);
 8001c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c2e:	4814      	ldr	r0, [pc, #80]	; (8001c80 <hw_led_n_state_get+0x74>)
 8001c30:	f7ff f8aa 	bl	8000d88 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
			break;
 8001c38:	e017      	b.n	8001c6a <hw_led_n_state_get+0x5e>
		case 2:
			led_state =  HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin);
 8001c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c3e:	4811      	ldr	r0, [pc, #68]	; (8001c84 <hw_led_n_state_get+0x78>)
 8001c40:	f7ff f8a2 	bl	8000d88 <HAL_GPIO_ReadPin>
 8001c44:	4603      	mov	r3, r0
 8001c46:	73fb      	strb	r3, [r7, #15]
			break;
 8001c48:	e00f      	b.n	8001c6a <hw_led_n_state_get+0x5e>
		case 3:
			led_state =  HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin);
 8001c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <hw_led_n_state_get+0x78>)
 8001c50:	f7ff f89a 	bl	8000d88 <HAL_GPIO_ReadPin>
 8001c54:	4603      	mov	r3, r0
 8001c56:	73fb      	strb	r3, [r7, #15]
			break;
 8001c58:	e007      	b.n	8001c6a <hw_led_n_state_get+0x5e>
		default:
			led_state =  HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin);
 8001c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c5e:	4808      	ldr	r0, [pc, #32]	; (8001c80 <hw_led_n_state_get+0x74>)
 8001c60:	f7ff f892 	bl	8000d88 <HAL_GPIO_ReadPin>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
			break;
 8001c68:	bf00      	nop
	}
	if(led_state == GPIO_PIN_RESET)
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <hw_led_n_state_get+0x68>
		return true;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <hw_led_n_state_get+0x6a>
	else
		return false;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40011000 	.word	0x40011000
 8001c84:	40010800 	.word	0x40010800

08001c88 <hw_tick_ms_get>:

void hw_cpu_sleep(){
	__WFI();
}

uint32_t hw_tick_ms_get(void){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001c8c:	f7fe fd82 	bl	8000794 <HAL_GetTick>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <shell_tick_1ms>:

static bool shell_started = false;
static shell_ctrl_t shell_ctrl = {0};
volatile uint32_t delay;

void shell_tick_1ms(void){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	static uint32_t delay_cnt = 0;

	if(!shell_started)
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <shell_tick_1ms+0x38>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d110      	bne.n	8001ccc <shell_tick_1ms+0x34>
		return;

	delay_cnt++;
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <shell_tick_1ms+0x3c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <shell_tick_1ms+0x3c>)
 8001cb2:	6013      	str	r3, [r2, #0]

	if(delay_cnt >= delay){
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <shell_tick_1ms+0x3c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <shell_tick_1ms+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d306      	bcc.n	8001cce <shell_tick_1ms+0x36>
		delay_cnt = 0;
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <shell_tick_1ms+0x3c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
		hw_led_toggle();
 8001cc6:	f7ff ff55 	bl	8001b74 <hw_led_toggle>
 8001cca:	e000      	b.n	8001cce <shell_tick_1ms+0x36>
		return;
 8001ccc:	bf00      	nop
	}
}
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000178 	.word	0x20000178
 8001cd4:	200001c4 	.word	0x200001c4
 8001cd8:	200001c0 	.word	0x200001c0

08001cdc <shell_uart_tx_byte>:

static void shell_uart_tx_byte(uint8_t c){
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *h = huart1.Instance;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <shell_uart_tx_byte+0x30>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]

	while(!(h->SR & UART_FLAG_TXE)) {}
 8001cec:	bf00      	nop
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f9      	beq.n	8001cee <shell_uart_tx_byte+0x12>
	h->DR = c;
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2000008c 	.word	0x2000008c

08001d10 <shell_uart_tx>:

void shell_uart_tx(uint8_t *buffer, uint32_t size){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
	for(size_t pos=0; pos<size; pos++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e009      	b.n	8001d34 <shell_uart_tx+0x24>
		shell_uart_tx_byte(buffer[pos]);
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ffd7 	bl	8001cdc <shell_uart_tx_byte>
	for(size_t pos=0; pos<size; pos++)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3301      	adds	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d3f1      	bcc.n	8001d20 <shell_uart_tx+0x10>
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <shell_parse_args>:

uint32_t shell_parse_args(uint8_t * const cmdline, uint32_t size, uint32_t *argc, uint8_t *argv[], uint32_t max_args){
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
	uint32_t n, m;

	n = m = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	617b      	str	r3, [r7, #20]
	*argc = 0;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

	while(cmdline[n] != '\0'){
 8001d64:	e04d      	b.n	8001e02 <shell_parse_args+0xba>
		while(isspace(cmdline[n]) && n<size)
			cmdline[n++] = '\0';
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	617a      	str	r2, [r7, #20]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
		while(isspace(cmdline[n]) && n<size)
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <shell_parse_args+0xf8>)
 8001d80:	4413      	add	r3, r2
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <shell_parse_args+0x4c>
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d3e8      	bcc.n	8001d66 <shell_parse_args+0x1e>

		m = n;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]

		while(!isspace(cmdline[n]) && (n<size) && (cmdline[n] != '\0'))
 8001d98:	e002      	b.n	8001da0 <shell_parse_args+0x58>
			n++;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
		while(!isspace(cmdline[n]) && (n<size) && (cmdline[n] != '\0'))
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	4a25      	ldr	r2, [pc, #148]	; (8001e40 <shell_parse_args+0xf8>)
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <shell_parse_args+0x84>
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d205      	bcs.n	8001dcc <shell_parse_args+0x84>
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e6      	bne.n	8001d9a <shell_parse_args+0x52>

		if((n>=size) || (*argc >= max_args) || (m==n))
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d21c      	bcs.n	8001e0e <shell_parse_args+0xc6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6a3a      	ldr	r2, [r7, #32]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d917      	bls.n	8001e0e <shell_parse_args+0xc6>
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d013      	beq.n	8001e0e <shell_parse_args+0xc6>
			break;

		argv[*argc] = cmdline + m;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	440a      	add	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
		*argc += 1;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	601a      	str	r2, [r3, #0]
	while(cmdline[n] != '\0'){
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1b2      	bne.n	8001d74 <shell_parse_args+0x2c>
	}

	for(n = *argc; n<max_args; n++)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e008      	b.n	8001e28 <shell_parse_args+0xe0>
		argv[n] = '\0';
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
	for(n = *argc; n<max_args; n++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d3f2      	bcc.n	8001e16 <shell_parse_args+0xce>

	return *argc;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	080036f0 	.word	0x080036f0

08001e44 <shell_process>:

void shell_process(void){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af02      	add	r7, sp, #8
	uint32_t argc;
	uint8_t *argv[SHELL_MAX_ARGS];
	bool error = true;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(shell_parse_args(shell_ctrl.cmd, shell_ctrl.size, &argc, (uint8_t **)argv, SHELL_MAX_ARGS)){
 8001e50:	4b99      	ldr	r3, [pc, #612]	; (80020b8 <shell_process+0x274>)
 8001e52:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	f107 0220 	add.w	r2, r7, #32
 8001e5c:	2005      	movs	r0, #5
 8001e5e:	9000      	str	r0, [sp, #0]
 8001e60:	4895      	ldr	r0, [pc, #596]	; (80020b8 <shell_process+0x274>)
 8001e62:	f7ff ff71 	bl	8001d48 <shell_parse_args>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8115 	beq.w	8002098 <shell_process+0x254>
		if(argc == 3){
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	f040 808e 	bne.w	8001f92 <shell_process+0x14e>
			if((strncmp("set", (char*)argv[0],3) == 0) && (strncmp("time", (char*)argv[1],4) == 0)){
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	488f      	ldr	r0, [pc, #572]	; (80020bc <shell_process+0x278>)
 8001e7e:	f000 fa5b 	bl	8002338 <strncmp>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d125      	bne.n	8001ed4 <shell_process+0x90>
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	488c      	ldr	r0, [pc, #560]	; (80020c0 <shell_process+0x27c>)
 8001e90:	f000 fa52 	bl	8002338 <strncmp>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d11c      	bne.n	8001ed4 <shell_process+0x90>
				int time_ms = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]

				if(sscanf((char*)argv[2], "%d",&time_ms) == 1){
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f107 0208 	add.w	r2, r7, #8
 8001ea4:	4987      	ldr	r1, [pc, #540]	; (80020c4 <shell_process+0x280>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fa1a 	bl	80022e0 <siscanf>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	f040 80f1 	bne.w	8002096 <shell_process+0x252>
					if(time_ms > 0){
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f340 80ed 	ble.w	8002096 <shell_process+0x252>
						delay = time_ms;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b81      	ldr	r3, [pc, #516]	; (80020c8 <shell_process+0x284>)
 8001ec2:	601a      	str	r2, [r3, #0]
						shell_uart_tx((char*)"ok\n",3);
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	4881      	ldr	r0, [pc, #516]	; (80020cc <shell_process+0x288>)
 8001ec8:	f7ff ff22 	bl	8001d10 <shell_uart_tx>
						error = false;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if((strncmp("set", (char*)argv[0],3) == 0) && (strncmp("time", (char*)argv[1],4) == 0)){
 8001ed2:	e0e0      	b.n	8002096 <shell_process+0x252>
					}
				}
			}
			else if(strncmp("led", (char*)argv[0],3) == 0){
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	4619      	mov	r1, r3
 8001eda:	487d      	ldr	r0, [pc, #500]	; (80020d0 <shell_process+0x28c>)
 8001edc:	f000 fa2c 	bl	8002338 <strncmp>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 80d8 	bne.w	8002098 <shell_process+0x254>
				int n = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	607b      	str	r3, [r7, #4]

				if(sscanf((char*)argv[1], "%d",&n)){
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1d3a      	adds	r2, r7, #4
 8001ef0:	4974      	ldr	r1, [pc, #464]	; (80020c4 <shell_process+0x280>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f9f4 	bl	80022e0 <siscanf>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80cc 	beq.w	8002098 <shell_process+0x254>
					if(strncmp("on", (char*)argv[2],2) == 0){
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2202      	movs	r2, #2
 8001f04:	4619      	mov	r1, r3
 8001f06:	4873      	ldr	r0, [pc, #460]	; (80020d4 <shell_process+0x290>)
 8001f08:	f000 fa16 	bl	8002338 <strncmp>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <shell_process+0xdc>
						hw_led_n_state_set(n,true);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2101      	movs	r1, #1
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fe37 	bl	8001b8c <hw_led_n_state_set>
 8001f1e:	e00e      	b.n	8001f3e <shell_process+0xfa>
					}
					else if(strncmp("off", (char*)argv[2],3) == 0){
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2203      	movs	r2, #3
 8001f24:	4619      	mov	r1, r3
 8001f26:	486c      	ldr	r0, [pc, #432]	; (80020d8 <shell_process+0x294>)
 8001f28:	f000 fa06 	bl	8002338 <strncmp>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <shell_process+0xfa>
						hw_led_n_state_set(n,false);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fe27 	bl	8001b8c <hw_led_n_state_set>
					}
					if((strncmp("on", (char*)argv[2],2)== 0) || (strncmp("off", (char*)argv[2],3)==0)){
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2202      	movs	r2, #2
 8001f42:	4619      	mov	r1, r3
 8001f44:	4863      	ldr	r0, [pc, #396]	; (80020d4 <shell_process+0x290>)
 8001f46:	f000 f9f7 	bl	8002338 <strncmp>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <shell_process+0x120>
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2203      	movs	r2, #3
 8001f54:	4619      	mov	r1, r3
 8001f56:	4860      	ldr	r0, [pc, #384]	; (80020d8 <shell_process+0x294>)
 8001f58:	f000 f9ee 	bl	8002338 <strncmp>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 809a 	bne.w	8002098 <shell_process+0x254>
						shell_ctrl.size = sprintf((char*)shell_ctrl.cmd, "%s %d %s\n", argv[0],n,argv[2]);
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	495b      	ldr	r1, [pc, #364]	; (80020dc <shell_process+0x298>)
 8001f70:	4851      	ldr	r0, [pc, #324]	; (80020b8 <shell_process+0x274>)
 8001f72:	f000 f995 	bl	80022a0 <siprintf>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b4f      	ldr	r3, [pc, #316]	; (80020b8 <shell_process+0x274>)
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
						shell_uart_tx(shell_ctrl.cmd, shell_ctrl.size);
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <shell_process+0x274>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4619      	mov	r1, r3
 8001f84:	484c      	ldr	r0, [pc, #304]	; (80020b8 <shell_process+0x274>)
 8001f86:	f7ff fec3 	bl	8001d10 <shell_uart_tx>
						error = false;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f90:	e082      	b.n	8002098 <shell_process+0x254>
					}
				}
			}
		}else if(argc == 2){
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d16a      	bne.n	800206e <shell_process+0x22a>
			if((strncmp("get", (char*)argv[0],3) == 0) && (strncmp("time", (char*)argv[1],4) == 0)){
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4850      	ldr	r0, [pc, #320]	; (80020e0 <shell_process+0x29c>)
 8001fa0:	f000 f9ca 	bl	8002338 <strncmp>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d11d      	bne.n	8001fe6 <shell_process+0x1a2>
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2204      	movs	r2, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4843      	ldr	r0, [pc, #268]	; (80020c0 <shell_process+0x27c>)
 8001fb2:	f000 f9c1 	bl	8002338 <strncmp>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d114      	bne.n	8001fe6 <shell_process+0x1a2>
				shell_ctrl.size = sprintf((char*)shell_ctrl.cmd, "time %u\n",(unsigned int)delay);
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <shell_process+0x284>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4948      	ldr	r1, [pc, #288]	; (80020e4 <shell_process+0x2a0>)
 8001fc4:	483c      	ldr	r0, [pc, #240]	; (80020b8 <shell_process+0x274>)
 8001fc6:	f000 f96b 	bl	80022a0 <siprintf>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <shell_process+0x274>)
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
				shell_uart_tx(shell_ctrl.cmd, shell_ctrl.size);
 8001fd2:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <shell_process+0x274>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4837      	ldr	r0, [pc, #220]	; (80020b8 <shell_process+0x274>)
 8001fda:	f7ff fe99 	bl	8001d10 <shell_uart_tx>
				error = false;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fe4:	e058      	b.n	8002098 <shell_process+0x254>
			}
			else if(strncmp("bot", (char*)argv[0],3) == 0){
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	4619      	mov	r1, r3
 8001fec:	483e      	ldr	r0, [pc, #248]	; (80020e8 <shell_process+0x2a4>)
 8001fee:	f000 f9a3 	bl	8002338 <strncmp>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d14f      	bne.n	8002098 <shell_process+0x254>
				int n = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	603b      	str	r3, [r7, #0]

				if(sscanf((char*)argv[1], "%d",&n)){
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	463a      	mov	r2, r7
 8002000:	4930      	ldr	r1, [pc, #192]	; (80020c4 <shell_process+0x280>)
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f96c 	bl	80022e0 <siscanf>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d044      	beq.n	8002098 <shell_process+0x254>
					if(hw_button_n_state_get(n)){
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fd7e 	bl	8001b14 <hw_button_n_state_get>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d013      	beq.n	8002046 <shell_process+0x202>
						shell_ctrl.size = sprintf((char*)shell_ctrl.cmd, "%s %d on\n", argv[0],n);
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4932      	ldr	r1, [pc, #200]	; (80020ec <shell_process+0x2a8>)
 8002024:	4824      	ldr	r0, [pc, #144]	; (80020b8 <shell_process+0x274>)
 8002026:	f000 f93b 	bl	80022a0 <siprintf>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <shell_process+0x274>)
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
						shell_uart_tx(shell_ctrl.cmd, shell_ctrl.size);
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <shell_process+0x274>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4619      	mov	r1, r3
 8002038:	481f      	ldr	r0, [pc, #124]	; (80020b8 <shell_process+0x274>)
 800203a:	f7ff fe69 	bl	8001d10 <shell_uart_tx>
						error = false;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002044:	e028      	b.n	8002098 <shell_process+0x254>
					}else {
						shell_ctrl.size = sprintf((char*)shell_ctrl.cmd, "%s %d off\n", argv[0],n);
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	4929      	ldr	r1, [pc, #164]	; (80020f0 <shell_process+0x2ac>)
 800204c:	481a      	ldr	r0, [pc, #104]	; (80020b8 <shell_process+0x274>)
 800204e:	f000 f927 	bl	80022a0 <siprintf>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <shell_process+0x274>)
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
						shell_uart_tx(shell_ctrl.cmd, shell_ctrl.size);
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <shell_process+0x274>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	4619      	mov	r1, r3
 8002060:	4815      	ldr	r0, [pc, #84]	; (80020b8 <shell_process+0x274>)
 8002062:	f7ff fe55 	bl	8001d10 <shell_uart_tx>
						error = false;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800206c:	e014      	b.n	8002098 <shell_process+0x254>
					}
				}
			}
		}
		else if(argc == 1){
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d111      	bne.n	8002098 <shell_process+0x254>
			if(strncmp("help", (char*)argv[0],4) == 0){
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2204      	movs	r2, #4
 8002078:	4619      	mov	r1, r3
 800207a:	481e      	ldr	r0, [pc, #120]	; (80020f4 <shell_process+0x2b0>)
 800207c:	f000 f95c 	bl	8002338 <strncmp>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <shell_process+0x254>
				shell_uart_tx((uint8_t*)"led <n> <on|off>: liga ou desliga um dos leds da placa, n = identificacao do led; bot <n>: Realiza a leitura de um determinado pino de GPIO, n = identificacao do led; help: Lista os comados suportados e maneira de usar.\n",220);
 8002086:	21dc      	movs	r1, #220	; 0xdc
 8002088:	481b      	ldr	r0, [pc, #108]	; (80020f8 <shell_process+0x2b4>)
 800208a:	f7ff fe41 	bl	8001d10 <shell_uart_tx>
				error = false;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002094:	e000      	b.n	8002098 <shell_process+0x254>
			if((strncmp("set", (char*)argv[0],3) == 0) && (strncmp("time", (char*)argv[1],4) == 0)){
 8002096:	bf00      	nop
			}
		}
	}

	if(error){
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <shell_process+0x26a>
		shell_uart_tx((uint8_t*)"error\n",6);
 80020a0:	2106      	movs	r1, #6
 80020a2:	4816      	ldr	r0, [pc, #88]	; (80020fc <shell_process+0x2b8>)
 80020a4:	f7ff fe34 	bl	8001d10 <shell_uart_tx>
		error = false;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
}
 80020ae:	bf00      	nop
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000017c 	.word	0x2000017c
 80020bc:	08003584 	.word	0x08003584
 80020c0:	08003588 	.word	0x08003588
 80020c4:	08003590 	.word	0x08003590
 80020c8:	200001c0 	.word	0x200001c0
 80020cc:	08003594 	.word	0x08003594
 80020d0:	08003598 	.word	0x08003598
 80020d4:	0800359c 	.word	0x0800359c
 80020d8:	080035a0 	.word	0x080035a0
 80020dc:	080035a4 	.word	0x080035a4
 80020e0:	080035b0 	.word	0x080035b0
 80020e4:	080035b4 	.word	0x080035b4
 80020e8:	080035c0 	.word	0x080035c0
 80020ec:	080035c4 	.word	0x080035c4
 80020f0:	080035d0 	.word	0x080035d0
 80020f4:	080035dc 	.word	0x080035dc
 80020f8:	080035e4 	.word	0x080035e4
 80020fc:	080036c4 	.word	0x080036c4

08002100 <shell_add_byte>:

void shell_add_byte(uint8_t c){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
	shell_ctrl.cmd[shell_ctrl.size++] = c;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <shell_add_byte+0x50>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	490f      	ldr	r1, [pc, #60]	; (8002150 <shell_add_byte+0x50>)
 8002112:	640a      	str	r2, [r1, #64]	; 0x40
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <shell_add_byte+0x50>)
 8002116:	79fa      	ldrb	r2, [r7, #7]
 8002118:	54ca      	strb	r2, [r1, r3]

	if(c == '\n'){ // indicar fim do comando após o enter
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b0a      	cmp	r3, #10
 800211e:	d10b      	bne.n	8002138 <shell_add_byte+0x38>
		shell_ctrl.cmd[shell_ctrl.size-1] = '\0';
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <shell_add_byte+0x50>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	3b01      	subs	r3, #1
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <shell_add_byte+0x50>)
 8002128:	2100      	movs	r1, #0
 800212a:	54d1      	strb	r1, [r2, r3]
		shell_process();
 800212c:	f7ff fe8a 	bl	8001e44 <shell_process>
		shell_ctrl.size = 0;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <shell_add_byte+0x50>)
 8002132:	2200      	movs	r2, #0
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
	}else{
		if(shell_ctrl.size >= SHELL_UART_BUFFER_MAX)
			shell_ctrl.size = 0;
	}
}
 8002136:	e006      	b.n	8002146 <shell_add_byte+0x46>
		if(shell_ctrl.size >= SHELL_UART_BUFFER_MAX)
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <shell_add_byte+0x50>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	2b3f      	cmp	r3, #63	; 0x3f
 800213e:	d902      	bls.n	8002146 <shell_add_byte+0x46>
			shell_ctrl.size = 0;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <shell_add_byte+0x50>)
 8002142:	2200      	movs	r2, #0
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000017c 	.word	0x2000017c

08002154 <shell_uart_interrupt>:

void shell_uart_interrupt(void){
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t sr;
	USART_TypeDef *h = huart1.Instance; // para o shell q está na uart1
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <shell_uart_interrupt+0x54>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60bb      	str	r3, [r7, #8]

	sr = h->SR;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 8002166:	e005      	b.n	8002174 <shell_uart_interrupt+0x20>
		sr = h->SR;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
		c = h->DR;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	71fb      	strb	r3, [r7, #7]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f4      	bne.n	8002168 <shell_uart_interrupt+0x14>
	}

	// se sem erros e com dado recebido ... pegar o dado e colocar no buffer
	if(sr & UART_FLAG_RXNE){
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <shell_uart_interrupt+0x4a>
		c = h->DR;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	71fb      	strb	r3, [r7, #7]

		if(shell_started)
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <shell_uart_interrupt+0x58>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <shell_uart_interrupt+0x4a>
			shell_add_byte(c);
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ffb1 	bl	8002100 <shell_add_byte>
	}
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000008c 	.word	0x2000008c
 80021ac:	20000178 	.word	0x20000178

080021b0 <shell_disable_interrupts>:

void shell_disable_interrupts(void){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 80021b4:	2025      	movs	r0, #37	; 0x25
 80021b6:	f7fe fc3a 	bl	8000a2e <HAL_NVIC_DisableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}

080021be <shell_enable_interrupts>:

void shell_enable_interrupts(void){
 80021be:	b580      	push	{r7, lr}
 80021c0:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2103      	movs	r1, #3
 80021c6:	2025      	movs	r0, #37	; 0x25
 80021c8:	f7fe fc07 	bl	80009da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021cc:	2025      	movs	r0, #37	; 0x25
 80021ce:	f7fe fc20 	bl	8000a12 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 80021d2:	2025      	movs	r0, #37	; 0x25
 80021d4:	f7fe fc45 	bl	8000a62 <HAL_NVIC_ClearPendingIRQ>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <shell_uart_init>:

void shell_uart_init(void){
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	shell_disable_interrupts();
 80021e0:	f7ff ffe6 	bl	80021b0 <shell_disable_interrupts>

	huart1.Instance->CR3 |= USART_CR3_EIE;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <shell_uart_init+0x30>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <shell_uart_init+0x30>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	615a      	str	r2, [r3, #20]
	huart1.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <shell_uart_init+0x30>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <shell_uart_init+0x30>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002202:	60da      	str	r2, [r3, #12]

	shell_enable_interrupts();
 8002204:	f7ff ffdb 	bl	80021be <shell_enable_interrupts>
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000008c 	.word	0x2000008c

08002210 <shell_init>:

void shell_init(void){
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	shell_ctrl.size = 0;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <shell_init+0x20>)
 8002216:	2200      	movs	r2, #0
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
	delay = 1000;
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <shell_init+0x24>)
 800221c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002220:	601a      	str	r2, [r3, #0]
	shell_uart_init();
 8002222:	f7ff ffdb 	bl	80021dc <shell_uart_init>

	shell_started = true;
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <shell_init+0x28>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000017c 	.word	0x2000017c
 8002234:	200001c0 	.word	0x200001c0
 8002238:	20000178 	.word	0x20000178

0800223c <__errno>:
 800223c:	4b01      	ldr	r3, [pc, #4]	; (8002244 <__errno+0x8>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	2000000c 	.word	0x2000000c

08002248 <__libc_init_array>:
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	2600      	movs	r6, #0
 800224c:	4d0c      	ldr	r5, [pc, #48]	; (8002280 <__libc_init_array+0x38>)
 800224e:	4c0d      	ldr	r4, [pc, #52]	; (8002284 <__libc_init_array+0x3c>)
 8002250:	1b64      	subs	r4, r4, r5
 8002252:	10a4      	asrs	r4, r4, #2
 8002254:	42a6      	cmp	r6, r4
 8002256:	d109      	bne.n	800226c <__libc_init_array+0x24>
 8002258:	f001 f964 	bl	8003524 <_init>
 800225c:	2600      	movs	r6, #0
 800225e:	4d0a      	ldr	r5, [pc, #40]	; (8002288 <__libc_init_array+0x40>)
 8002260:	4c0a      	ldr	r4, [pc, #40]	; (800228c <__libc_init_array+0x44>)
 8002262:	1b64      	subs	r4, r4, r5
 8002264:	10a4      	asrs	r4, r4, #2
 8002266:	42a6      	cmp	r6, r4
 8002268:	d105      	bne.n	8002276 <__libc_init_array+0x2e>
 800226a:	bd70      	pop	{r4, r5, r6, pc}
 800226c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002270:	4798      	blx	r3
 8002272:	3601      	adds	r6, #1
 8002274:	e7ee      	b.n	8002254 <__libc_init_array+0xc>
 8002276:	f855 3b04 	ldr.w	r3, [r5], #4
 800227a:	4798      	blx	r3
 800227c:	3601      	adds	r6, #1
 800227e:	e7f2      	b.n	8002266 <__libc_init_array+0x1e>
 8002280:	080038a0 	.word	0x080038a0
 8002284:	080038a0 	.word	0x080038a0
 8002288:	080038a0 	.word	0x080038a0
 800228c:	080038a4 	.word	0x080038a4

08002290 <memset>:
 8002290:	4603      	mov	r3, r0
 8002292:	4402      	add	r2, r0
 8002294:	4293      	cmp	r3, r2
 8002296:	d100      	bne.n	800229a <memset+0xa>
 8002298:	4770      	bx	lr
 800229a:	f803 1b01 	strb.w	r1, [r3], #1
 800229e:	e7f9      	b.n	8002294 <memset+0x4>

080022a0 <siprintf>:
 80022a0:	b40e      	push	{r1, r2, r3}
 80022a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022a6:	b500      	push	{lr}
 80022a8:	b09c      	sub	sp, #112	; 0x70
 80022aa:	ab1d      	add	r3, sp, #116	; 0x74
 80022ac:	9002      	str	r0, [sp, #8]
 80022ae:	9006      	str	r0, [sp, #24]
 80022b0:	9107      	str	r1, [sp, #28]
 80022b2:	9104      	str	r1, [sp, #16]
 80022b4:	4808      	ldr	r0, [pc, #32]	; (80022d8 <siprintf+0x38>)
 80022b6:	4909      	ldr	r1, [pc, #36]	; (80022dc <siprintf+0x3c>)
 80022b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80022bc:	9105      	str	r1, [sp, #20]
 80022be:	6800      	ldr	r0, [r0, #0]
 80022c0:	a902      	add	r1, sp, #8
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	f000 f8a8 	bl	8002418 <_svfiprintf_r>
 80022c8:	2200      	movs	r2, #0
 80022ca:	9b02      	ldr	r3, [sp, #8]
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	b01c      	add	sp, #112	; 0x70
 80022d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80022d4:	b003      	add	sp, #12
 80022d6:	4770      	bx	lr
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	ffff0208 	.word	0xffff0208

080022e0 <siscanf>:
 80022e0:	b40e      	push	{r1, r2, r3}
 80022e2:	f44f 7201 	mov.w	r2, #516	; 0x204
 80022e6:	b530      	push	{r4, r5, lr}
 80022e8:	b09c      	sub	sp, #112	; 0x70
 80022ea:	ac1f      	add	r4, sp, #124	; 0x7c
 80022ec:	f854 5b04 	ldr.w	r5, [r4], #4
 80022f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80022f4:	9002      	str	r0, [sp, #8]
 80022f6:	9006      	str	r0, [sp, #24]
 80022f8:	f7fd ff28 	bl	800014c <strlen>
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <siscanf+0x4c>)
 80022fe:	9003      	str	r0, [sp, #12]
 8002300:	930b      	str	r3, [sp, #44]	; 0x2c
 8002302:	2300      	movs	r3, #0
 8002304:	930f      	str	r3, [sp, #60]	; 0x3c
 8002306:	9314      	str	r3, [sp, #80]	; 0x50
 8002308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800230c:	9007      	str	r0, [sp, #28]
 800230e:	4808      	ldr	r0, [pc, #32]	; (8002330 <siscanf+0x50>)
 8002310:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002314:	462a      	mov	r2, r5
 8002316:	4623      	mov	r3, r4
 8002318:	a902      	add	r1, sp, #8
 800231a:	6800      	ldr	r0, [r0, #0]
 800231c:	9401      	str	r4, [sp, #4]
 800231e:	f000 f9d5 	bl	80026cc <__ssvfiscanf_r>
 8002322:	b01c      	add	sp, #112	; 0x70
 8002324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002328:	b003      	add	sp, #12
 800232a:	4770      	bx	lr
 800232c:	08002335 	.word	0x08002335
 8002330:	2000000c 	.word	0x2000000c

08002334 <__seofread>:
 8002334:	2000      	movs	r0, #0
 8002336:	4770      	bx	lr

08002338 <strncmp>:
 8002338:	4603      	mov	r3, r0
 800233a:	b510      	push	{r4, lr}
 800233c:	b172      	cbz	r2, 800235c <strncmp+0x24>
 800233e:	3901      	subs	r1, #1
 8002340:	1884      	adds	r4, r0, r2
 8002342:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002346:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800234a:	4290      	cmp	r0, r2
 800234c:	d101      	bne.n	8002352 <strncmp+0x1a>
 800234e:	42a3      	cmp	r3, r4
 8002350:	d101      	bne.n	8002356 <strncmp+0x1e>
 8002352:	1a80      	subs	r0, r0, r2
 8002354:	bd10      	pop	{r4, pc}
 8002356:	2800      	cmp	r0, #0
 8002358:	d1f3      	bne.n	8002342 <strncmp+0xa>
 800235a:	e7fa      	b.n	8002352 <strncmp+0x1a>
 800235c:	4610      	mov	r0, r2
 800235e:	e7f9      	b.n	8002354 <strncmp+0x1c>

08002360 <__ssputs_r>:
 8002360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002364:	688e      	ldr	r6, [r1, #8]
 8002366:	4682      	mov	sl, r0
 8002368:	429e      	cmp	r6, r3
 800236a:	460c      	mov	r4, r1
 800236c:	4690      	mov	r8, r2
 800236e:	461f      	mov	r7, r3
 8002370:	d838      	bhi.n	80023e4 <__ssputs_r+0x84>
 8002372:	898a      	ldrh	r2, [r1, #12]
 8002374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002378:	d032      	beq.n	80023e0 <__ssputs_r+0x80>
 800237a:	6825      	ldr	r5, [r4, #0]
 800237c:	6909      	ldr	r1, [r1, #16]
 800237e:	3301      	adds	r3, #1
 8002380:	eba5 0901 	sub.w	r9, r5, r1
 8002384:	6965      	ldr	r5, [r4, #20]
 8002386:	444b      	add	r3, r9
 8002388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800238c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002390:	106d      	asrs	r5, r5, #1
 8002392:	429d      	cmp	r5, r3
 8002394:	bf38      	it	cc
 8002396:	461d      	movcc	r5, r3
 8002398:	0553      	lsls	r3, r2, #21
 800239a:	d531      	bpl.n	8002400 <__ssputs_r+0xa0>
 800239c:	4629      	mov	r1, r5
 800239e:	f000 fff9 	bl	8003394 <_malloc_r>
 80023a2:	4606      	mov	r6, r0
 80023a4:	b950      	cbnz	r0, 80023bc <__ssputs_r+0x5c>
 80023a6:	230c      	movs	r3, #12
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f8ca 3000 	str.w	r3, [sl]
 80023b0:	89a3      	ldrh	r3, [r4, #12]
 80023b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b6:	81a3      	strh	r3, [r4, #12]
 80023b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023bc:	464a      	mov	r2, r9
 80023be:	6921      	ldr	r1, [r4, #16]
 80023c0:	f000 ff58 	bl	8003274 <memcpy>
 80023c4:	89a3      	ldrh	r3, [r4, #12]
 80023c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ce:	81a3      	strh	r3, [r4, #12]
 80023d0:	6126      	str	r6, [r4, #16]
 80023d2:	444e      	add	r6, r9
 80023d4:	6026      	str	r6, [r4, #0]
 80023d6:	463e      	mov	r6, r7
 80023d8:	6165      	str	r5, [r4, #20]
 80023da:	eba5 0509 	sub.w	r5, r5, r9
 80023de:	60a5      	str	r5, [r4, #8]
 80023e0:	42be      	cmp	r6, r7
 80023e2:	d900      	bls.n	80023e6 <__ssputs_r+0x86>
 80023e4:	463e      	mov	r6, r7
 80023e6:	4632      	mov	r2, r6
 80023e8:	4641      	mov	r1, r8
 80023ea:	6820      	ldr	r0, [r4, #0]
 80023ec:	f000 ff50 	bl	8003290 <memmove>
 80023f0:	68a3      	ldr	r3, [r4, #8]
 80023f2:	2000      	movs	r0, #0
 80023f4:	1b9b      	subs	r3, r3, r6
 80023f6:	60a3      	str	r3, [r4, #8]
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	4433      	add	r3, r6
 80023fc:	6023      	str	r3, [r4, #0]
 80023fe:	e7db      	b.n	80023b8 <__ssputs_r+0x58>
 8002400:	462a      	mov	r2, r5
 8002402:	f001 f83b 	bl	800347c <_realloc_r>
 8002406:	4606      	mov	r6, r0
 8002408:	2800      	cmp	r0, #0
 800240a:	d1e1      	bne.n	80023d0 <__ssputs_r+0x70>
 800240c:	4650      	mov	r0, sl
 800240e:	6921      	ldr	r1, [r4, #16]
 8002410:	f000 ff58 	bl	80032c4 <_free_r>
 8002414:	e7c7      	b.n	80023a6 <__ssputs_r+0x46>
	...

08002418 <_svfiprintf_r>:
 8002418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241c:	4698      	mov	r8, r3
 800241e:	898b      	ldrh	r3, [r1, #12]
 8002420:	4607      	mov	r7, r0
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	460d      	mov	r5, r1
 8002426:	4614      	mov	r4, r2
 8002428:	b09d      	sub	sp, #116	; 0x74
 800242a:	d50e      	bpl.n	800244a <_svfiprintf_r+0x32>
 800242c:	690b      	ldr	r3, [r1, #16]
 800242e:	b963      	cbnz	r3, 800244a <_svfiprintf_r+0x32>
 8002430:	2140      	movs	r1, #64	; 0x40
 8002432:	f000 ffaf 	bl	8003394 <_malloc_r>
 8002436:	6028      	str	r0, [r5, #0]
 8002438:	6128      	str	r0, [r5, #16]
 800243a:	b920      	cbnz	r0, 8002446 <_svfiprintf_r+0x2e>
 800243c:	230c      	movs	r3, #12
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	e0d1      	b.n	80025ea <_svfiprintf_r+0x1d2>
 8002446:	2340      	movs	r3, #64	; 0x40
 8002448:	616b      	str	r3, [r5, #20]
 800244a:	2300      	movs	r3, #0
 800244c:	9309      	str	r3, [sp, #36]	; 0x24
 800244e:	2320      	movs	r3, #32
 8002450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002454:	2330      	movs	r3, #48	; 0x30
 8002456:	f04f 0901 	mov.w	r9, #1
 800245a:	f8cd 800c 	str.w	r8, [sp, #12]
 800245e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002604 <_svfiprintf_r+0x1ec>
 8002462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002466:	4623      	mov	r3, r4
 8002468:	469a      	mov	sl, r3
 800246a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800246e:	b10a      	cbz	r2, 8002474 <_svfiprintf_r+0x5c>
 8002470:	2a25      	cmp	r2, #37	; 0x25
 8002472:	d1f9      	bne.n	8002468 <_svfiprintf_r+0x50>
 8002474:	ebba 0b04 	subs.w	fp, sl, r4
 8002478:	d00b      	beq.n	8002492 <_svfiprintf_r+0x7a>
 800247a:	465b      	mov	r3, fp
 800247c:	4622      	mov	r2, r4
 800247e:	4629      	mov	r1, r5
 8002480:	4638      	mov	r0, r7
 8002482:	f7ff ff6d 	bl	8002360 <__ssputs_r>
 8002486:	3001      	adds	r0, #1
 8002488:	f000 80aa 	beq.w	80025e0 <_svfiprintf_r+0x1c8>
 800248c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800248e:	445a      	add	r2, fp
 8002490:	9209      	str	r2, [sp, #36]	; 0x24
 8002492:	f89a 3000 	ldrb.w	r3, [sl]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80a2 	beq.w	80025e0 <_svfiprintf_r+0x1c8>
 800249c:	2300      	movs	r3, #0
 800249e:	f04f 32ff 	mov.w	r2, #4294967295
 80024a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024a6:	f10a 0a01 	add.w	sl, sl, #1
 80024aa:	9304      	str	r3, [sp, #16]
 80024ac:	9307      	str	r3, [sp, #28]
 80024ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024b2:	931a      	str	r3, [sp, #104]	; 0x68
 80024b4:	4654      	mov	r4, sl
 80024b6:	2205      	movs	r2, #5
 80024b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024bc:	4851      	ldr	r0, [pc, #324]	; (8002604 <_svfiprintf_r+0x1ec>)
 80024be:	f000 fecb 	bl	8003258 <memchr>
 80024c2:	9a04      	ldr	r2, [sp, #16]
 80024c4:	b9d8      	cbnz	r0, 80024fe <_svfiprintf_r+0xe6>
 80024c6:	06d0      	lsls	r0, r2, #27
 80024c8:	bf44      	itt	mi
 80024ca:	2320      	movmi	r3, #32
 80024cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024d0:	0711      	lsls	r1, r2, #28
 80024d2:	bf44      	itt	mi
 80024d4:	232b      	movmi	r3, #43	; 0x2b
 80024d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024da:	f89a 3000 	ldrb.w	r3, [sl]
 80024de:	2b2a      	cmp	r3, #42	; 0x2a
 80024e0:	d015      	beq.n	800250e <_svfiprintf_r+0xf6>
 80024e2:	4654      	mov	r4, sl
 80024e4:	2000      	movs	r0, #0
 80024e6:	f04f 0c0a 	mov.w	ip, #10
 80024ea:	9a07      	ldr	r2, [sp, #28]
 80024ec:	4621      	mov	r1, r4
 80024ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024f2:	3b30      	subs	r3, #48	; 0x30
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d94e      	bls.n	8002596 <_svfiprintf_r+0x17e>
 80024f8:	b1b0      	cbz	r0, 8002528 <_svfiprintf_r+0x110>
 80024fa:	9207      	str	r2, [sp, #28]
 80024fc:	e014      	b.n	8002528 <_svfiprintf_r+0x110>
 80024fe:	eba0 0308 	sub.w	r3, r0, r8
 8002502:	fa09 f303 	lsl.w	r3, r9, r3
 8002506:	4313      	orrs	r3, r2
 8002508:	46a2      	mov	sl, r4
 800250a:	9304      	str	r3, [sp, #16]
 800250c:	e7d2      	b.n	80024b4 <_svfiprintf_r+0x9c>
 800250e:	9b03      	ldr	r3, [sp, #12]
 8002510:	1d19      	adds	r1, r3, #4
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	9103      	str	r1, [sp, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	bfbb      	ittet	lt
 800251a:	425b      	neglt	r3, r3
 800251c:	f042 0202 	orrlt.w	r2, r2, #2
 8002520:	9307      	strge	r3, [sp, #28]
 8002522:	9307      	strlt	r3, [sp, #28]
 8002524:	bfb8      	it	lt
 8002526:	9204      	strlt	r2, [sp, #16]
 8002528:	7823      	ldrb	r3, [r4, #0]
 800252a:	2b2e      	cmp	r3, #46	; 0x2e
 800252c:	d10c      	bne.n	8002548 <_svfiprintf_r+0x130>
 800252e:	7863      	ldrb	r3, [r4, #1]
 8002530:	2b2a      	cmp	r3, #42	; 0x2a
 8002532:	d135      	bne.n	80025a0 <_svfiprintf_r+0x188>
 8002534:	9b03      	ldr	r3, [sp, #12]
 8002536:	3402      	adds	r4, #2
 8002538:	1d1a      	adds	r2, r3, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	9203      	str	r2, [sp, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	bfb8      	it	lt
 8002542:	f04f 33ff 	movlt.w	r3, #4294967295
 8002546:	9305      	str	r3, [sp, #20]
 8002548:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002608 <_svfiprintf_r+0x1f0>
 800254c:	2203      	movs	r2, #3
 800254e:	4650      	mov	r0, sl
 8002550:	7821      	ldrb	r1, [r4, #0]
 8002552:	f000 fe81 	bl	8003258 <memchr>
 8002556:	b140      	cbz	r0, 800256a <_svfiprintf_r+0x152>
 8002558:	2340      	movs	r3, #64	; 0x40
 800255a:	eba0 000a 	sub.w	r0, r0, sl
 800255e:	fa03 f000 	lsl.w	r0, r3, r0
 8002562:	9b04      	ldr	r3, [sp, #16]
 8002564:	3401      	adds	r4, #1
 8002566:	4303      	orrs	r3, r0
 8002568:	9304      	str	r3, [sp, #16]
 800256a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800256e:	2206      	movs	r2, #6
 8002570:	4826      	ldr	r0, [pc, #152]	; (800260c <_svfiprintf_r+0x1f4>)
 8002572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002576:	f000 fe6f 	bl	8003258 <memchr>
 800257a:	2800      	cmp	r0, #0
 800257c:	d038      	beq.n	80025f0 <_svfiprintf_r+0x1d8>
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <_svfiprintf_r+0x1f8>)
 8002580:	bb1b      	cbnz	r3, 80025ca <_svfiprintf_r+0x1b2>
 8002582:	9b03      	ldr	r3, [sp, #12]
 8002584:	3307      	adds	r3, #7
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	3308      	adds	r3, #8
 800258c:	9303      	str	r3, [sp, #12]
 800258e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002590:	4433      	add	r3, r6
 8002592:	9309      	str	r3, [sp, #36]	; 0x24
 8002594:	e767      	b.n	8002466 <_svfiprintf_r+0x4e>
 8002596:	460c      	mov	r4, r1
 8002598:	2001      	movs	r0, #1
 800259a:	fb0c 3202 	mla	r2, ip, r2, r3
 800259e:	e7a5      	b.n	80024ec <_svfiprintf_r+0xd4>
 80025a0:	2300      	movs	r3, #0
 80025a2:	f04f 0c0a 	mov.w	ip, #10
 80025a6:	4619      	mov	r1, r3
 80025a8:	3401      	adds	r4, #1
 80025aa:	9305      	str	r3, [sp, #20]
 80025ac:	4620      	mov	r0, r4
 80025ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025b2:	3a30      	subs	r2, #48	; 0x30
 80025b4:	2a09      	cmp	r2, #9
 80025b6:	d903      	bls.n	80025c0 <_svfiprintf_r+0x1a8>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0c5      	beq.n	8002548 <_svfiprintf_r+0x130>
 80025bc:	9105      	str	r1, [sp, #20]
 80025be:	e7c3      	b.n	8002548 <_svfiprintf_r+0x130>
 80025c0:	4604      	mov	r4, r0
 80025c2:	2301      	movs	r3, #1
 80025c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80025c8:	e7f0      	b.n	80025ac <_svfiprintf_r+0x194>
 80025ca:	ab03      	add	r3, sp, #12
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	462a      	mov	r2, r5
 80025d0:	4638      	mov	r0, r7
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <_svfiprintf_r+0x1fc>)
 80025d4:	a904      	add	r1, sp, #16
 80025d6:	f3af 8000 	nop.w
 80025da:	1c42      	adds	r2, r0, #1
 80025dc:	4606      	mov	r6, r0
 80025de:	d1d6      	bne.n	800258e <_svfiprintf_r+0x176>
 80025e0:	89ab      	ldrh	r3, [r5, #12]
 80025e2:	065b      	lsls	r3, r3, #25
 80025e4:	f53f af2c 	bmi.w	8002440 <_svfiprintf_r+0x28>
 80025e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025ea:	b01d      	add	sp, #116	; 0x74
 80025ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f0:	ab03      	add	r3, sp, #12
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	462a      	mov	r2, r5
 80025f6:	4638      	mov	r0, r7
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <_svfiprintf_r+0x1fc>)
 80025fa:	a904      	add	r1, sp, #16
 80025fc:	f000 fa50 	bl	8002aa0 <_printf_i>
 8002600:	e7eb      	b.n	80025da <_svfiprintf_r+0x1c2>
 8002602:	bf00      	nop
 8002604:	080037f1 	.word	0x080037f1
 8002608:	080037f7 	.word	0x080037f7
 800260c:	080037fb 	.word	0x080037fb
 8002610:	00000000 	.word	0x00000000
 8002614:	08002361 	.word	0x08002361

08002618 <_sungetc_r>:
 8002618:	b538      	push	{r3, r4, r5, lr}
 800261a:	1c4b      	adds	r3, r1, #1
 800261c:	4614      	mov	r4, r2
 800261e:	d103      	bne.n	8002628 <_sungetc_r+0x10>
 8002620:	f04f 35ff 	mov.w	r5, #4294967295
 8002624:	4628      	mov	r0, r5
 8002626:	bd38      	pop	{r3, r4, r5, pc}
 8002628:	8993      	ldrh	r3, [r2, #12]
 800262a:	b2cd      	uxtb	r5, r1
 800262c:	f023 0320 	bic.w	r3, r3, #32
 8002630:	8193      	strh	r3, [r2, #12]
 8002632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002634:	6852      	ldr	r2, [r2, #4]
 8002636:	b18b      	cbz	r3, 800265c <_sungetc_r+0x44>
 8002638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800263a:	4293      	cmp	r3, r2
 800263c:	dd08      	ble.n	8002650 <_sungetc_r+0x38>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	1e5a      	subs	r2, r3, #1
 8002642:	6022      	str	r2, [r4, #0]
 8002644:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	3301      	adds	r3, #1
 800264c:	6063      	str	r3, [r4, #4]
 800264e:	e7e9      	b.n	8002624 <_sungetc_r+0xc>
 8002650:	4621      	mov	r1, r4
 8002652:	f000 fdc7 	bl	80031e4 <__submore>
 8002656:	2800      	cmp	r0, #0
 8002658:	d0f1      	beq.n	800263e <_sungetc_r+0x26>
 800265a:	e7e1      	b.n	8002620 <_sungetc_r+0x8>
 800265c:	6921      	ldr	r1, [r4, #16]
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	b151      	cbz	r1, 8002678 <_sungetc_r+0x60>
 8002662:	4299      	cmp	r1, r3
 8002664:	d208      	bcs.n	8002678 <_sungetc_r+0x60>
 8002666:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800266a:	42a9      	cmp	r1, r5
 800266c:	d104      	bne.n	8002678 <_sungetc_r+0x60>
 800266e:	3b01      	subs	r3, #1
 8002670:	3201      	adds	r2, #1
 8002672:	6023      	str	r3, [r4, #0]
 8002674:	6062      	str	r2, [r4, #4]
 8002676:	e7d5      	b.n	8002624 <_sungetc_r+0xc>
 8002678:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800267c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002680:	6363      	str	r3, [r4, #52]	; 0x34
 8002682:	2303      	movs	r3, #3
 8002684:	63a3      	str	r3, [r4, #56]	; 0x38
 8002686:	4623      	mov	r3, r4
 8002688:	f803 5f46 	strb.w	r5, [r3, #70]!
 800268c:	6023      	str	r3, [r4, #0]
 800268e:	2301      	movs	r3, #1
 8002690:	e7dc      	b.n	800264c <_sungetc_r+0x34>

08002692 <__ssrefill_r>:
 8002692:	b510      	push	{r4, lr}
 8002694:	460c      	mov	r4, r1
 8002696:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002698:	b169      	cbz	r1, 80026b6 <__ssrefill_r+0x24>
 800269a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800269e:	4299      	cmp	r1, r3
 80026a0:	d001      	beq.n	80026a6 <__ssrefill_r+0x14>
 80026a2:	f000 fe0f 	bl	80032c4 <_free_r>
 80026a6:	2000      	movs	r0, #0
 80026a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026aa:	6360      	str	r0, [r4, #52]	; 0x34
 80026ac:	6063      	str	r3, [r4, #4]
 80026ae:	b113      	cbz	r3, 80026b6 <__ssrefill_r+0x24>
 80026b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026b2:	6023      	str	r3, [r4, #0]
 80026b4:	bd10      	pop	{r4, pc}
 80026b6:	6923      	ldr	r3, [r4, #16]
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	6023      	str	r3, [r4, #0]
 80026be:	2300      	movs	r3, #0
 80026c0:	6063      	str	r3, [r4, #4]
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	f043 0320 	orr.w	r3, r3, #32
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	e7f3      	b.n	80026b4 <__ssrefill_r+0x22>

080026cc <__ssvfiscanf_r>:
 80026cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d0:	460c      	mov	r4, r1
 80026d2:	2100      	movs	r1, #0
 80026d4:	4606      	mov	r6, r0
 80026d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80026da:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80026de:	49a7      	ldr	r1, [pc, #668]	; (800297c <__ssvfiscanf_r+0x2b0>)
 80026e0:	f10d 0804 	add.w	r8, sp, #4
 80026e4:	91a0      	str	r1, [sp, #640]	; 0x280
 80026e6:	49a6      	ldr	r1, [pc, #664]	; (8002980 <__ssvfiscanf_r+0x2b4>)
 80026e8:	4fa6      	ldr	r7, [pc, #664]	; (8002984 <__ssvfiscanf_r+0x2b8>)
 80026ea:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8002988 <__ssvfiscanf_r+0x2bc>
 80026ee:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80026f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	7813      	ldrb	r3, [r2, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 815c 	beq.w	80029b6 <__ssvfiscanf_r+0x2ea>
 80026fe:	5dd9      	ldrb	r1, [r3, r7]
 8002700:	1c55      	adds	r5, r2, #1
 8002702:	f011 0108 	ands.w	r1, r1, #8
 8002706:	d019      	beq.n	800273c <__ssvfiscanf_r+0x70>
 8002708:	6863      	ldr	r3, [r4, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	dd0f      	ble.n	800272e <__ssvfiscanf_r+0x62>
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	5cba      	ldrb	r2, [r7, r2]
 8002714:	0712      	lsls	r2, r2, #28
 8002716:	d401      	bmi.n	800271c <__ssvfiscanf_r+0x50>
 8002718:	462a      	mov	r2, r5
 800271a:	e7ec      	b.n	80026f6 <__ssvfiscanf_r+0x2a>
 800271c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800271e:	3301      	adds	r3, #1
 8002720:	3201      	adds	r2, #1
 8002722:	9245      	str	r2, [sp, #276]	; 0x114
 8002724:	6862      	ldr	r2, [r4, #4]
 8002726:	6023      	str	r3, [r4, #0]
 8002728:	3a01      	subs	r2, #1
 800272a:	6062      	str	r2, [r4, #4]
 800272c:	e7ec      	b.n	8002708 <__ssvfiscanf_r+0x3c>
 800272e:	4621      	mov	r1, r4
 8002730:	4630      	mov	r0, r6
 8002732:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002734:	4798      	blx	r3
 8002736:	2800      	cmp	r0, #0
 8002738:	d0e9      	beq.n	800270e <__ssvfiscanf_r+0x42>
 800273a:	e7ed      	b.n	8002718 <__ssvfiscanf_r+0x4c>
 800273c:	2b25      	cmp	r3, #37	; 0x25
 800273e:	d012      	beq.n	8002766 <__ssvfiscanf_r+0x9a>
 8002740:	469a      	mov	sl, r3
 8002742:	6863      	ldr	r3, [r4, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	f340 8094 	ble.w	8002872 <__ssvfiscanf_r+0x1a6>
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	7813      	ldrb	r3, [r2, #0]
 800274e:	4553      	cmp	r3, sl
 8002750:	f040 8131 	bne.w	80029b6 <__ssvfiscanf_r+0x2ea>
 8002754:	6863      	ldr	r3, [r4, #4]
 8002756:	3201      	adds	r2, #1
 8002758:	3b01      	subs	r3, #1
 800275a:	6063      	str	r3, [r4, #4]
 800275c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800275e:	6022      	str	r2, [r4, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	9345      	str	r3, [sp, #276]	; 0x114
 8002764:	e7d8      	b.n	8002718 <__ssvfiscanf_r+0x4c>
 8002766:	9141      	str	r1, [sp, #260]	; 0x104
 8002768:	9143      	str	r1, [sp, #268]	; 0x10c
 800276a:	7853      	ldrb	r3, [r2, #1]
 800276c:	2b2a      	cmp	r3, #42	; 0x2a
 800276e:	bf04      	itt	eq
 8002770:	2310      	moveq	r3, #16
 8002772:	1c95      	addeq	r5, r2, #2
 8002774:	f04f 020a 	mov.w	r2, #10
 8002778:	bf08      	it	eq
 800277a:	9341      	streq	r3, [sp, #260]	; 0x104
 800277c:	46aa      	mov	sl, r5
 800277e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8002782:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002786:	2b09      	cmp	r3, #9
 8002788:	d91d      	bls.n	80027c6 <__ssvfiscanf_r+0xfa>
 800278a:	2203      	movs	r2, #3
 800278c:	487e      	ldr	r0, [pc, #504]	; (8002988 <__ssvfiscanf_r+0x2bc>)
 800278e:	f000 fd63 	bl	8003258 <memchr>
 8002792:	b140      	cbz	r0, 80027a6 <__ssvfiscanf_r+0xda>
 8002794:	2301      	movs	r3, #1
 8002796:	4655      	mov	r5, sl
 8002798:	eba0 0009 	sub.w	r0, r0, r9
 800279c:	fa03 f000 	lsl.w	r0, r3, r0
 80027a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80027a2:	4318      	orrs	r0, r3
 80027a4:	9041      	str	r0, [sp, #260]	; 0x104
 80027a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027aa:	2b78      	cmp	r3, #120	; 0x78
 80027ac:	d806      	bhi.n	80027bc <__ssvfiscanf_r+0xf0>
 80027ae:	2b57      	cmp	r3, #87	; 0x57
 80027b0:	d810      	bhi.n	80027d4 <__ssvfiscanf_r+0x108>
 80027b2:	2b25      	cmp	r3, #37	; 0x25
 80027b4:	d0c4      	beq.n	8002740 <__ssvfiscanf_r+0x74>
 80027b6:	d857      	bhi.n	8002868 <__ssvfiscanf_r+0x19c>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d065      	beq.n	8002888 <__ssvfiscanf_r+0x1bc>
 80027bc:	2303      	movs	r3, #3
 80027be:	9347      	str	r3, [sp, #284]	; 0x11c
 80027c0:	230a      	movs	r3, #10
 80027c2:	9342      	str	r3, [sp, #264]	; 0x108
 80027c4:	e072      	b.n	80028ac <__ssvfiscanf_r+0x1e0>
 80027c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80027c8:	4655      	mov	r5, sl
 80027ca:	fb02 1103 	mla	r1, r2, r3, r1
 80027ce:	3930      	subs	r1, #48	; 0x30
 80027d0:	9143      	str	r1, [sp, #268]	; 0x10c
 80027d2:	e7d3      	b.n	800277c <__ssvfiscanf_r+0xb0>
 80027d4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80027d8:	2a20      	cmp	r2, #32
 80027da:	d8ef      	bhi.n	80027bc <__ssvfiscanf_r+0xf0>
 80027dc:	a101      	add	r1, pc, #4	; (adr r1, 80027e4 <__ssvfiscanf_r+0x118>)
 80027de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80027e2:	bf00      	nop
 80027e4:	08002897 	.word	0x08002897
 80027e8:	080027bd 	.word	0x080027bd
 80027ec:	080027bd 	.word	0x080027bd
 80027f0:	080028f5 	.word	0x080028f5
 80027f4:	080027bd 	.word	0x080027bd
 80027f8:	080027bd 	.word	0x080027bd
 80027fc:	080027bd 	.word	0x080027bd
 8002800:	080027bd 	.word	0x080027bd
 8002804:	080027bd 	.word	0x080027bd
 8002808:	080027bd 	.word	0x080027bd
 800280c:	080027bd 	.word	0x080027bd
 8002810:	0800290b 	.word	0x0800290b
 8002814:	080028e1 	.word	0x080028e1
 8002818:	0800286f 	.word	0x0800286f
 800281c:	0800286f 	.word	0x0800286f
 8002820:	0800286f 	.word	0x0800286f
 8002824:	080027bd 	.word	0x080027bd
 8002828:	080028e5 	.word	0x080028e5
 800282c:	080027bd 	.word	0x080027bd
 8002830:	080027bd 	.word	0x080027bd
 8002834:	080027bd 	.word	0x080027bd
 8002838:	080027bd 	.word	0x080027bd
 800283c:	0800291b 	.word	0x0800291b
 8002840:	080028ed 	.word	0x080028ed
 8002844:	0800288f 	.word	0x0800288f
 8002848:	080027bd 	.word	0x080027bd
 800284c:	080027bd 	.word	0x080027bd
 8002850:	08002917 	.word	0x08002917
 8002854:	080027bd 	.word	0x080027bd
 8002858:	080028e1 	.word	0x080028e1
 800285c:	080027bd 	.word	0x080027bd
 8002860:	080027bd 	.word	0x080027bd
 8002864:	08002897 	.word	0x08002897
 8002868:	3b45      	subs	r3, #69	; 0x45
 800286a:	2b02      	cmp	r3, #2
 800286c:	d8a6      	bhi.n	80027bc <__ssvfiscanf_r+0xf0>
 800286e:	2305      	movs	r3, #5
 8002870:	e01b      	b.n	80028aa <__ssvfiscanf_r+0x1de>
 8002872:	4621      	mov	r1, r4
 8002874:	4630      	mov	r0, r6
 8002876:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002878:	4798      	blx	r3
 800287a:	2800      	cmp	r0, #0
 800287c:	f43f af65 	beq.w	800274a <__ssvfiscanf_r+0x7e>
 8002880:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002882:	2800      	cmp	r0, #0
 8002884:	f040 808d 	bne.w	80029a2 <__ssvfiscanf_r+0x2d6>
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	e08f      	b.n	80029ae <__ssvfiscanf_r+0x2e2>
 800288e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002890:	f042 0220 	orr.w	r2, r2, #32
 8002894:	9241      	str	r2, [sp, #260]	; 0x104
 8002896:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289c:	9241      	str	r2, [sp, #260]	; 0x104
 800289e:	2210      	movs	r2, #16
 80028a0:	2b6f      	cmp	r3, #111	; 0x6f
 80028a2:	bf34      	ite	cc
 80028a4:	2303      	movcc	r3, #3
 80028a6:	2304      	movcs	r3, #4
 80028a8:	9242      	str	r2, [sp, #264]	; 0x108
 80028aa:	9347      	str	r3, [sp, #284]	; 0x11c
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	dd42      	ble.n	8002938 <__ssvfiscanf_r+0x26c>
 80028b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80028b4:	0659      	lsls	r1, r3, #25
 80028b6:	d404      	bmi.n	80028c2 <__ssvfiscanf_r+0x1f6>
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	5cba      	ldrb	r2, [r7, r2]
 80028be:	0712      	lsls	r2, r2, #28
 80028c0:	d441      	bmi.n	8002946 <__ssvfiscanf_r+0x27a>
 80028c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	dc50      	bgt.n	800296a <__ssvfiscanf_r+0x29e>
 80028c8:	466b      	mov	r3, sp
 80028ca:	4622      	mov	r2, r4
 80028cc:	4630      	mov	r0, r6
 80028ce:	a941      	add	r1, sp, #260	; 0x104
 80028d0:	f000 fa0c 	bl	8002cec <_scanf_chars>
 80028d4:	2801      	cmp	r0, #1
 80028d6:	d06e      	beq.n	80029b6 <__ssvfiscanf_r+0x2ea>
 80028d8:	2802      	cmp	r0, #2
 80028da:	f47f af1d 	bne.w	8002718 <__ssvfiscanf_r+0x4c>
 80028de:	e7cf      	b.n	8002880 <__ssvfiscanf_r+0x1b4>
 80028e0:	220a      	movs	r2, #10
 80028e2:	e7dd      	b.n	80028a0 <__ssvfiscanf_r+0x1d4>
 80028e4:	2300      	movs	r3, #0
 80028e6:	9342      	str	r3, [sp, #264]	; 0x108
 80028e8:	2303      	movs	r3, #3
 80028ea:	e7de      	b.n	80028aa <__ssvfiscanf_r+0x1de>
 80028ec:	2308      	movs	r3, #8
 80028ee:	9342      	str	r3, [sp, #264]	; 0x108
 80028f0:	2304      	movs	r3, #4
 80028f2:	e7da      	b.n	80028aa <__ssvfiscanf_r+0x1de>
 80028f4:	4629      	mov	r1, r5
 80028f6:	4640      	mov	r0, r8
 80028f8:	f000 fb4a 	bl	8002f90 <__sccl>
 80028fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80028fe:	4605      	mov	r5, r0
 8002900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002904:	9341      	str	r3, [sp, #260]	; 0x104
 8002906:	2301      	movs	r3, #1
 8002908:	e7cf      	b.n	80028aa <__ssvfiscanf_r+0x1de>
 800290a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800290c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002910:	9341      	str	r3, [sp, #260]	; 0x104
 8002912:	2300      	movs	r3, #0
 8002914:	e7c9      	b.n	80028aa <__ssvfiscanf_r+0x1de>
 8002916:	2302      	movs	r3, #2
 8002918:	e7c7      	b.n	80028aa <__ssvfiscanf_r+0x1de>
 800291a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800291c:	06c3      	lsls	r3, r0, #27
 800291e:	f53f aefb 	bmi.w	8002718 <__ssvfiscanf_r+0x4c>
 8002922:	9b00      	ldr	r3, [sp, #0]
 8002924:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002926:	1d19      	adds	r1, r3, #4
 8002928:	9100      	str	r1, [sp, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f010 0f01 	tst.w	r0, #1
 8002930:	bf14      	ite	ne
 8002932:	801a      	strhne	r2, [r3, #0]
 8002934:	601a      	streq	r2, [r3, #0]
 8002936:	e6ef      	b.n	8002718 <__ssvfiscanf_r+0x4c>
 8002938:	4621      	mov	r1, r4
 800293a:	4630      	mov	r0, r6
 800293c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800293e:	4798      	blx	r3
 8002940:	2800      	cmp	r0, #0
 8002942:	d0b6      	beq.n	80028b2 <__ssvfiscanf_r+0x1e6>
 8002944:	e79c      	b.n	8002880 <__ssvfiscanf_r+0x1b4>
 8002946:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002948:	3201      	adds	r2, #1
 800294a:	9245      	str	r2, [sp, #276]	; 0x114
 800294c:	6862      	ldr	r2, [r4, #4]
 800294e:	3a01      	subs	r2, #1
 8002950:	2a00      	cmp	r2, #0
 8002952:	6062      	str	r2, [r4, #4]
 8002954:	dd02      	ble.n	800295c <__ssvfiscanf_r+0x290>
 8002956:	3301      	adds	r3, #1
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	e7ad      	b.n	80028b8 <__ssvfiscanf_r+0x1ec>
 800295c:	4621      	mov	r1, r4
 800295e:	4630      	mov	r0, r6
 8002960:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002962:	4798      	blx	r3
 8002964:	2800      	cmp	r0, #0
 8002966:	d0a7      	beq.n	80028b8 <__ssvfiscanf_r+0x1ec>
 8002968:	e78a      	b.n	8002880 <__ssvfiscanf_r+0x1b4>
 800296a:	2b04      	cmp	r3, #4
 800296c:	dc0e      	bgt.n	800298c <__ssvfiscanf_r+0x2c0>
 800296e:	466b      	mov	r3, sp
 8002970:	4622      	mov	r2, r4
 8002972:	4630      	mov	r0, r6
 8002974:	a941      	add	r1, sp, #260	; 0x104
 8002976:	f000 fa13 	bl	8002da0 <_scanf_i>
 800297a:	e7ab      	b.n	80028d4 <__ssvfiscanf_r+0x208>
 800297c:	08002619 	.word	0x08002619
 8002980:	08002693 	.word	0x08002693
 8002984:	080036f1 	.word	0x080036f1
 8002988:	080037f7 	.word	0x080037f7
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <__ssvfiscanf_r+0x2f0>)
 800298e:	2b00      	cmp	r3, #0
 8002990:	f43f aec2 	beq.w	8002718 <__ssvfiscanf_r+0x4c>
 8002994:	466b      	mov	r3, sp
 8002996:	4622      	mov	r2, r4
 8002998:	4630      	mov	r0, r6
 800299a:	a941      	add	r1, sp, #260	; 0x104
 800299c:	f3af 8000 	nop.w
 80029a0:	e798      	b.n	80028d4 <__ssvfiscanf_r+0x208>
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029a8:	bf18      	it	ne
 80029aa:	f04f 30ff 	movne.w	r0, #4294967295
 80029ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80029b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80029b8:	e7f9      	b.n	80029ae <__ssvfiscanf_r+0x2e2>
 80029ba:	bf00      	nop
 80029bc:	00000000 	.word	0x00000000

080029c0 <_printf_common>:
 80029c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c4:	4616      	mov	r6, r2
 80029c6:	4699      	mov	r9, r3
 80029c8:	688a      	ldr	r2, [r1, #8]
 80029ca:	690b      	ldr	r3, [r1, #16]
 80029cc:	4607      	mov	r7, r0
 80029ce:	4293      	cmp	r3, r2
 80029d0:	bfb8      	it	lt
 80029d2:	4613      	movlt	r3, r2
 80029d4:	6033      	str	r3, [r6, #0]
 80029d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029da:	460c      	mov	r4, r1
 80029dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029e0:	b10a      	cbz	r2, 80029e6 <_printf_common+0x26>
 80029e2:	3301      	adds	r3, #1
 80029e4:	6033      	str	r3, [r6, #0]
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	0699      	lsls	r1, r3, #26
 80029ea:	bf42      	ittt	mi
 80029ec:	6833      	ldrmi	r3, [r6, #0]
 80029ee:	3302      	addmi	r3, #2
 80029f0:	6033      	strmi	r3, [r6, #0]
 80029f2:	6825      	ldr	r5, [r4, #0]
 80029f4:	f015 0506 	ands.w	r5, r5, #6
 80029f8:	d106      	bne.n	8002a08 <_printf_common+0x48>
 80029fa:	f104 0a19 	add.w	sl, r4, #25
 80029fe:	68e3      	ldr	r3, [r4, #12]
 8002a00:	6832      	ldr	r2, [r6, #0]
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	42ab      	cmp	r3, r5
 8002a06:	dc28      	bgt.n	8002a5a <_printf_common+0x9a>
 8002a08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a0c:	1e13      	subs	r3, r2, #0
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	bf18      	it	ne
 8002a12:	2301      	movne	r3, #1
 8002a14:	0692      	lsls	r2, r2, #26
 8002a16:	d42d      	bmi.n	8002a74 <_printf_common+0xb4>
 8002a18:	4649      	mov	r1, r9
 8002a1a:	4638      	mov	r0, r7
 8002a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a20:	47c0      	blx	r8
 8002a22:	3001      	adds	r0, #1
 8002a24:	d020      	beq.n	8002a68 <_printf_common+0xa8>
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	68e5      	ldr	r5, [r4, #12]
 8002a2a:	f003 0306 	and.w	r3, r3, #6
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	bf18      	it	ne
 8002a32:	2500      	movne	r5, #0
 8002a34:	6832      	ldr	r2, [r6, #0]
 8002a36:	f04f 0600 	mov.w	r6, #0
 8002a3a:	68a3      	ldr	r3, [r4, #8]
 8002a3c:	bf08      	it	eq
 8002a3e:	1aad      	subeq	r5, r5, r2
 8002a40:	6922      	ldr	r2, [r4, #16]
 8002a42:	bf08      	it	eq
 8002a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	bfc4      	itt	gt
 8002a4c:	1a9b      	subgt	r3, r3, r2
 8002a4e:	18ed      	addgt	r5, r5, r3
 8002a50:	341a      	adds	r4, #26
 8002a52:	42b5      	cmp	r5, r6
 8002a54:	d11a      	bne.n	8002a8c <_printf_common+0xcc>
 8002a56:	2000      	movs	r0, #0
 8002a58:	e008      	b.n	8002a6c <_printf_common+0xac>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	4652      	mov	r2, sl
 8002a5e:	4649      	mov	r1, r9
 8002a60:	4638      	mov	r0, r7
 8002a62:	47c0      	blx	r8
 8002a64:	3001      	adds	r0, #1
 8002a66:	d103      	bne.n	8002a70 <_printf_common+0xb0>
 8002a68:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a70:	3501      	adds	r5, #1
 8002a72:	e7c4      	b.n	80029fe <_printf_common+0x3e>
 8002a74:	2030      	movs	r0, #48	; 0x30
 8002a76:	18e1      	adds	r1, r4, r3
 8002a78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a82:	4422      	add	r2, r4
 8002a84:	3302      	adds	r3, #2
 8002a86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a8a:	e7c5      	b.n	8002a18 <_printf_common+0x58>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	4622      	mov	r2, r4
 8002a90:	4649      	mov	r1, r9
 8002a92:	4638      	mov	r0, r7
 8002a94:	47c0      	blx	r8
 8002a96:	3001      	adds	r0, #1
 8002a98:	d0e6      	beq.n	8002a68 <_printf_common+0xa8>
 8002a9a:	3601      	adds	r6, #1
 8002a9c:	e7d9      	b.n	8002a52 <_printf_common+0x92>
	...

08002aa0 <_printf_i>:
 8002aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa4:	7e0f      	ldrb	r7, [r1, #24]
 8002aa6:	4691      	mov	r9, r2
 8002aa8:	2f78      	cmp	r7, #120	; 0x78
 8002aaa:	4680      	mov	r8, r0
 8002aac:	460c      	mov	r4, r1
 8002aae:	469a      	mov	sl, r3
 8002ab0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ab6:	d807      	bhi.n	8002ac8 <_printf_i+0x28>
 8002ab8:	2f62      	cmp	r7, #98	; 0x62
 8002aba:	d80a      	bhi.n	8002ad2 <_printf_i+0x32>
 8002abc:	2f00      	cmp	r7, #0
 8002abe:	f000 80d9 	beq.w	8002c74 <_printf_i+0x1d4>
 8002ac2:	2f58      	cmp	r7, #88	; 0x58
 8002ac4:	f000 80a4 	beq.w	8002c10 <_printf_i+0x170>
 8002ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ad0:	e03a      	b.n	8002b48 <_printf_i+0xa8>
 8002ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ad6:	2b15      	cmp	r3, #21
 8002ad8:	d8f6      	bhi.n	8002ac8 <_printf_i+0x28>
 8002ada:	a101      	add	r1, pc, #4	; (adr r1, 8002ae0 <_printf_i+0x40>)
 8002adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ae0:	08002b39 	.word	0x08002b39
 8002ae4:	08002b4d 	.word	0x08002b4d
 8002ae8:	08002ac9 	.word	0x08002ac9
 8002aec:	08002ac9 	.word	0x08002ac9
 8002af0:	08002ac9 	.word	0x08002ac9
 8002af4:	08002ac9 	.word	0x08002ac9
 8002af8:	08002b4d 	.word	0x08002b4d
 8002afc:	08002ac9 	.word	0x08002ac9
 8002b00:	08002ac9 	.word	0x08002ac9
 8002b04:	08002ac9 	.word	0x08002ac9
 8002b08:	08002ac9 	.word	0x08002ac9
 8002b0c:	08002c5b 	.word	0x08002c5b
 8002b10:	08002b7d 	.word	0x08002b7d
 8002b14:	08002c3d 	.word	0x08002c3d
 8002b18:	08002ac9 	.word	0x08002ac9
 8002b1c:	08002ac9 	.word	0x08002ac9
 8002b20:	08002c7d 	.word	0x08002c7d
 8002b24:	08002ac9 	.word	0x08002ac9
 8002b28:	08002b7d 	.word	0x08002b7d
 8002b2c:	08002ac9 	.word	0x08002ac9
 8002b30:	08002ac9 	.word	0x08002ac9
 8002b34:	08002c45 	.word	0x08002c45
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	1d1a      	adds	r2, r3, #4
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	602a      	str	r2, [r5, #0]
 8002b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0a4      	b.n	8002c96 <_printf_i+0x1f6>
 8002b4c:	6820      	ldr	r0, [r4, #0]
 8002b4e:	6829      	ldr	r1, [r5, #0]
 8002b50:	0606      	lsls	r6, r0, #24
 8002b52:	f101 0304 	add.w	r3, r1, #4
 8002b56:	d50a      	bpl.n	8002b6e <_printf_i+0xce>
 8002b58:	680e      	ldr	r6, [r1, #0]
 8002b5a:	602b      	str	r3, [r5, #0]
 8002b5c:	2e00      	cmp	r6, #0
 8002b5e:	da03      	bge.n	8002b68 <_printf_i+0xc8>
 8002b60:	232d      	movs	r3, #45	; 0x2d
 8002b62:	4276      	negs	r6, r6
 8002b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b68:	230a      	movs	r3, #10
 8002b6a:	485e      	ldr	r0, [pc, #376]	; (8002ce4 <_printf_i+0x244>)
 8002b6c:	e019      	b.n	8002ba2 <_printf_i+0x102>
 8002b6e:	680e      	ldr	r6, [r1, #0]
 8002b70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b74:	602b      	str	r3, [r5, #0]
 8002b76:	bf18      	it	ne
 8002b78:	b236      	sxthne	r6, r6
 8002b7a:	e7ef      	b.n	8002b5c <_printf_i+0xbc>
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	6820      	ldr	r0, [r4, #0]
 8002b80:	1d19      	adds	r1, r3, #4
 8002b82:	6029      	str	r1, [r5, #0]
 8002b84:	0601      	lsls	r1, r0, #24
 8002b86:	d501      	bpl.n	8002b8c <_printf_i+0xec>
 8002b88:	681e      	ldr	r6, [r3, #0]
 8002b8a:	e002      	b.n	8002b92 <_printf_i+0xf2>
 8002b8c:	0646      	lsls	r6, r0, #25
 8002b8e:	d5fb      	bpl.n	8002b88 <_printf_i+0xe8>
 8002b90:	881e      	ldrh	r6, [r3, #0]
 8002b92:	2f6f      	cmp	r7, #111	; 0x6f
 8002b94:	bf0c      	ite	eq
 8002b96:	2308      	moveq	r3, #8
 8002b98:	230a      	movne	r3, #10
 8002b9a:	4852      	ldr	r0, [pc, #328]	; (8002ce4 <_printf_i+0x244>)
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ba2:	6865      	ldr	r5, [r4, #4]
 8002ba4:	2d00      	cmp	r5, #0
 8002ba6:	bfa8      	it	ge
 8002ba8:	6821      	ldrge	r1, [r4, #0]
 8002baa:	60a5      	str	r5, [r4, #8]
 8002bac:	bfa4      	itt	ge
 8002bae:	f021 0104 	bicge.w	r1, r1, #4
 8002bb2:	6021      	strge	r1, [r4, #0]
 8002bb4:	b90e      	cbnz	r6, 8002bba <_printf_i+0x11a>
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	d04d      	beq.n	8002c56 <_printf_i+0x1b6>
 8002bba:	4615      	mov	r5, r2
 8002bbc:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bc0:	fb03 6711 	mls	r7, r3, r1, r6
 8002bc4:	5dc7      	ldrb	r7, [r0, r7]
 8002bc6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bca:	4637      	mov	r7, r6
 8002bcc:	42bb      	cmp	r3, r7
 8002bce:	460e      	mov	r6, r1
 8002bd0:	d9f4      	bls.n	8002bbc <_printf_i+0x11c>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d10b      	bne.n	8002bee <_printf_i+0x14e>
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	07de      	lsls	r6, r3, #31
 8002bda:	d508      	bpl.n	8002bee <_printf_i+0x14e>
 8002bdc:	6923      	ldr	r3, [r4, #16]
 8002bde:	6861      	ldr	r1, [r4, #4]
 8002be0:	4299      	cmp	r1, r3
 8002be2:	bfde      	ittt	le
 8002be4:	2330      	movle	r3, #48	; 0x30
 8002be6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002bee:	1b52      	subs	r2, r2, r5
 8002bf0:	6122      	str	r2, [r4, #16]
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	f8cd a000 	str.w	sl, [sp]
 8002bfc:	aa03      	add	r2, sp, #12
 8002bfe:	f7ff fedf 	bl	80029c0 <_printf_common>
 8002c02:	3001      	adds	r0, #1
 8002c04:	d14c      	bne.n	8002ca0 <_printf_i+0x200>
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0a:	b004      	add	sp, #16
 8002c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c10:	4834      	ldr	r0, [pc, #208]	; (8002ce4 <_printf_i+0x244>)
 8002c12:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c16:	6829      	ldr	r1, [r5, #0]
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c1e:	6029      	str	r1, [r5, #0]
 8002c20:	061d      	lsls	r5, r3, #24
 8002c22:	d514      	bpl.n	8002c4e <_printf_i+0x1ae>
 8002c24:	07df      	lsls	r7, r3, #31
 8002c26:	bf44      	itt	mi
 8002c28:	f043 0320 	orrmi.w	r3, r3, #32
 8002c2c:	6023      	strmi	r3, [r4, #0]
 8002c2e:	b91e      	cbnz	r6, 8002c38 <_printf_i+0x198>
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	f023 0320 	bic.w	r3, r3, #32
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	2310      	movs	r3, #16
 8002c3a:	e7af      	b.n	8002b9c <_printf_i+0xfc>
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	2378      	movs	r3, #120	; 0x78
 8002c46:	4828      	ldr	r0, [pc, #160]	; (8002ce8 <_printf_i+0x248>)
 8002c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c4c:	e7e3      	b.n	8002c16 <_printf_i+0x176>
 8002c4e:	0659      	lsls	r1, r3, #25
 8002c50:	bf48      	it	mi
 8002c52:	b2b6      	uxthmi	r6, r6
 8002c54:	e7e6      	b.n	8002c24 <_printf_i+0x184>
 8002c56:	4615      	mov	r5, r2
 8002c58:	e7bb      	b.n	8002bd2 <_printf_i+0x132>
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	6826      	ldr	r6, [r4, #0]
 8002c5e:	1d18      	adds	r0, r3, #4
 8002c60:	6961      	ldr	r1, [r4, #20]
 8002c62:	6028      	str	r0, [r5, #0]
 8002c64:	0635      	lsls	r5, r6, #24
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	d501      	bpl.n	8002c6e <_printf_i+0x1ce>
 8002c6a:	6019      	str	r1, [r3, #0]
 8002c6c:	e002      	b.n	8002c74 <_printf_i+0x1d4>
 8002c6e:	0670      	lsls	r0, r6, #25
 8002c70:	d5fb      	bpl.n	8002c6a <_printf_i+0x1ca>
 8002c72:	8019      	strh	r1, [r3, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	4615      	mov	r5, r2
 8002c78:	6123      	str	r3, [r4, #16]
 8002c7a:	e7ba      	b.n	8002bf2 <_printf_i+0x152>
 8002c7c:	682b      	ldr	r3, [r5, #0]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	1d1a      	adds	r2, r3, #4
 8002c82:	602a      	str	r2, [r5, #0]
 8002c84:	681d      	ldr	r5, [r3, #0]
 8002c86:	6862      	ldr	r2, [r4, #4]
 8002c88:	4628      	mov	r0, r5
 8002c8a:	f000 fae5 	bl	8003258 <memchr>
 8002c8e:	b108      	cbz	r0, 8002c94 <_printf_i+0x1f4>
 8002c90:	1b40      	subs	r0, r0, r5
 8002c92:	6060      	str	r0, [r4, #4]
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	6123      	str	r3, [r4, #16]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c9e:	e7a8      	b.n	8002bf2 <_printf_i+0x152>
 8002ca0:	462a      	mov	r2, r5
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	4640      	mov	r0, r8
 8002ca6:	6923      	ldr	r3, [r4, #16]
 8002ca8:	47d0      	blx	sl
 8002caa:	3001      	adds	r0, #1
 8002cac:	d0ab      	beq.n	8002c06 <_printf_i+0x166>
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	079b      	lsls	r3, r3, #30
 8002cb2:	d413      	bmi.n	8002cdc <_printf_i+0x23c>
 8002cb4:	68e0      	ldr	r0, [r4, #12]
 8002cb6:	9b03      	ldr	r3, [sp, #12]
 8002cb8:	4298      	cmp	r0, r3
 8002cba:	bfb8      	it	lt
 8002cbc:	4618      	movlt	r0, r3
 8002cbe:	e7a4      	b.n	8002c0a <_printf_i+0x16a>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4632      	mov	r2, r6
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	47d0      	blx	sl
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d09b      	beq.n	8002c06 <_printf_i+0x166>
 8002cce:	3501      	adds	r5, #1
 8002cd0:	68e3      	ldr	r3, [r4, #12]
 8002cd2:	9903      	ldr	r1, [sp, #12]
 8002cd4:	1a5b      	subs	r3, r3, r1
 8002cd6:	42ab      	cmp	r3, r5
 8002cd8:	dcf2      	bgt.n	8002cc0 <_printf_i+0x220>
 8002cda:	e7eb      	b.n	8002cb4 <_printf_i+0x214>
 8002cdc:	2500      	movs	r5, #0
 8002cde:	f104 0619 	add.w	r6, r4, #25
 8002ce2:	e7f5      	b.n	8002cd0 <_printf_i+0x230>
 8002ce4:	08003802 	.word	0x08003802
 8002ce8:	08003813 	.word	0x08003813

08002cec <_scanf_chars>:
 8002cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cf0:	4615      	mov	r5, r2
 8002cf2:	688a      	ldr	r2, [r1, #8]
 8002cf4:	4680      	mov	r8, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	b932      	cbnz	r2, 8002d08 <_scanf_chars+0x1c>
 8002cfa:	698a      	ldr	r2, [r1, #24]
 8002cfc:	2a00      	cmp	r2, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2201      	moveq	r2, #1
 8002d02:	f04f 32ff 	movne.w	r2, #4294967295
 8002d06:	608a      	str	r2, [r1, #8]
 8002d08:	2700      	movs	r7, #0
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002d9c <_scanf_chars+0xb0>
 8002d10:	06d1      	lsls	r1, r2, #27
 8002d12:	bf5f      	itttt	pl
 8002d14:	681a      	ldrpl	r2, [r3, #0]
 8002d16:	1d11      	addpl	r1, r2, #4
 8002d18:	6019      	strpl	r1, [r3, #0]
 8002d1a:	6816      	ldrpl	r6, [r2, #0]
 8002d1c:	69a0      	ldr	r0, [r4, #24]
 8002d1e:	b188      	cbz	r0, 8002d44 <_scanf_chars+0x58>
 8002d20:	2801      	cmp	r0, #1
 8002d22:	d107      	bne.n	8002d34 <_scanf_chars+0x48>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	6963      	ldr	r3, [r4, #20]
 8002d2a:	5c9b      	ldrb	r3, [r3, r2]
 8002d2c:	b953      	cbnz	r3, 8002d44 <_scanf_chars+0x58>
 8002d2e:	2f00      	cmp	r7, #0
 8002d30:	d031      	beq.n	8002d96 <_scanf_chars+0xaa>
 8002d32:	e022      	b.n	8002d7a <_scanf_chars+0x8e>
 8002d34:	2802      	cmp	r0, #2
 8002d36:	d120      	bne.n	8002d7a <_scanf_chars+0x8e>
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002d40:	071b      	lsls	r3, r3, #28
 8002d42:	d41a      	bmi.n	8002d7a <_scanf_chars+0x8e>
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	3701      	adds	r7, #1
 8002d48:	06da      	lsls	r2, r3, #27
 8002d4a:	bf5e      	ittt	pl
 8002d4c:	682b      	ldrpl	r3, [r5, #0]
 8002d4e:	781b      	ldrbpl	r3, [r3, #0]
 8002d50:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002d54:	682a      	ldr	r2, [r5, #0]
 8002d56:	686b      	ldr	r3, [r5, #4]
 8002d58:	3201      	adds	r2, #1
 8002d5a:	602a      	str	r2, [r5, #0]
 8002d5c:	68a2      	ldr	r2, [r4, #8]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	3a01      	subs	r2, #1
 8002d62:	606b      	str	r3, [r5, #4]
 8002d64:	60a2      	str	r2, [r4, #8]
 8002d66:	b142      	cbz	r2, 8002d7a <_scanf_chars+0x8e>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	dcd7      	bgt.n	8002d1c <_scanf_chars+0x30>
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	4640      	mov	r0, r8
 8002d70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002d74:	4798      	blx	r3
 8002d76:	2800      	cmp	r0, #0
 8002d78:	d0d0      	beq.n	8002d1c <_scanf_chars+0x30>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	f013 0310 	ands.w	r3, r3, #16
 8002d80:	d105      	bne.n	8002d8e <_scanf_chars+0xa2>
 8002d82:	68e2      	ldr	r2, [r4, #12]
 8002d84:	3201      	adds	r2, #1
 8002d86:	60e2      	str	r2, [r4, #12]
 8002d88:	69a2      	ldr	r2, [r4, #24]
 8002d8a:	b102      	cbz	r2, 8002d8e <_scanf_chars+0xa2>
 8002d8c:	7033      	strb	r3, [r6, #0]
 8002d8e:	2000      	movs	r0, #0
 8002d90:	6923      	ldr	r3, [r4, #16]
 8002d92:	443b      	add	r3, r7
 8002d94:	6123      	str	r3, [r4, #16]
 8002d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d9a:	bf00      	nop
 8002d9c:	080036f1 	.word	0x080036f1

08002da0 <_scanf_i>:
 8002da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da4:	460c      	mov	r4, r1
 8002da6:	4698      	mov	r8, r3
 8002da8:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <_scanf_i+0x1e0>)
 8002daa:	b087      	sub	sp, #28
 8002dac:	4682      	mov	sl, r0
 8002dae:	4616      	mov	r6, r2
 8002db0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002db4:	ab03      	add	r3, sp, #12
 8002db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002dba:	4b72      	ldr	r3, [pc, #456]	; (8002f84 <_scanf_i+0x1e4>)
 8002dbc:	69a1      	ldr	r1, [r4, #24]
 8002dbe:	4a72      	ldr	r2, [pc, #456]	; (8002f88 <_scanf_i+0x1e8>)
 8002dc0:	4627      	mov	r7, r4
 8002dc2:	2903      	cmp	r1, #3
 8002dc4:	bf18      	it	ne
 8002dc6:	461a      	movne	r2, r3
 8002dc8:	68a3      	ldr	r3, [r4, #8]
 8002dca:	9201      	str	r2, [sp, #4]
 8002dcc:	1e5a      	subs	r2, r3, #1
 8002dce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002dd2:	bf81      	itttt	hi
 8002dd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002dd8:	eb03 0905 	addhi.w	r9, r3, r5
 8002ddc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002de0:	60a3      	strhi	r3, [r4, #8]
 8002de2:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002de6:	bf98      	it	ls
 8002de8:	f04f 0900 	movls.w	r9, #0
 8002dec:	463d      	mov	r5, r7
 8002dee:	f04f 0b00 	mov.w	fp, #0
 8002df2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002df6:	6023      	str	r3, [r4, #0]
 8002df8:	6831      	ldr	r1, [r6, #0]
 8002dfa:	ab03      	add	r3, sp, #12
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	7809      	ldrb	r1, [r1, #0]
 8002e00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002e04:	f000 fa28 	bl	8003258 <memchr>
 8002e08:	b328      	cbz	r0, 8002e56 <_scanf_i+0xb6>
 8002e0a:	f1bb 0f01 	cmp.w	fp, #1
 8002e0e:	d159      	bne.n	8002ec4 <_scanf_i+0x124>
 8002e10:	6862      	ldr	r2, [r4, #4]
 8002e12:	b92a      	cbnz	r2, 8002e20 <_scanf_i+0x80>
 8002e14:	2308      	movs	r3, #8
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	6063      	str	r3, [r4, #4]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	6022      	str	r2, [r4, #0]
 8002e20:	6822      	ldr	r2, [r4, #0]
 8002e22:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8002e26:	6022      	str	r2, [r4, #0]
 8002e28:	68a2      	ldr	r2, [r4, #8]
 8002e2a:	1e51      	subs	r1, r2, #1
 8002e2c:	60a1      	str	r1, [r4, #8]
 8002e2e:	b192      	cbz	r2, 8002e56 <_scanf_i+0xb6>
 8002e30:	6832      	ldr	r2, [r6, #0]
 8002e32:	1c51      	adds	r1, r2, #1
 8002e34:	6031      	str	r1, [r6, #0]
 8002e36:	7812      	ldrb	r2, [r2, #0]
 8002e38:	f805 2b01 	strb.w	r2, [r5], #1
 8002e3c:	6872      	ldr	r2, [r6, #4]
 8002e3e:	3a01      	subs	r2, #1
 8002e40:	2a00      	cmp	r2, #0
 8002e42:	6072      	str	r2, [r6, #4]
 8002e44:	dc07      	bgt.n	8002e56 <_scanf_i+0xb6>
 8002e46:	4631      	mov	r1, r6
 8002e48:	4650      	mov	r0, sl
 8002e4a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8002e4e:	4790      	blx	r2
 8002e50:	2800      	cmp	r0, #0
 8002e52:	f040 8085 	bne.w	8002f60 <_scanf_i+0x1c0>
 8002e56:	f10b 0b01 	add.w	fp, fp, #1
 8002e5a:	f1bb 0f03 	cmp.w	fp, #3
 8002e5e:	d1cb      	bne.n	8002df8 <_scanf_i+0x58>
 8002e60:	6863      	ldr	r3, [r4, #4]
 8002e62:	b90b      	cbnz	r3, 8002e68 <_scanf_i+0xc8>
 8002e64:	230a      	movs	r3, #10
 8002e66:	6063      	str	r3, [r4, #4]
 8002e68:	6863      	ldr	r3, [r4, #4]
 8002e6a:	4948      	ldr	r1, [pc, #288]	; (8002f8c <_scanf_i+0x1ec>)
 8002e6c:	6960      	ldr	r0, [r4, #20]
 8002e6e:	1ac9      	subs	r1, r1, r3
 8002e70:	f000 f88e 	bl	8002f90 <__sccl>
 8002e74:	f04f 0b00 	mov.w	fp, #0
 8002e78:	68a3      	ldr	r3, [r4, #8]
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d03d      	beq.n	8002efc <_scanf_i+0x15c>
 8002e80:	6831      	ldr	r1, [r6, #0]
 8002e82:	6960      	ldr	r0, [r4, #20]
 8002e84:	f891 c000 	ldrb.w	ip, [r1]
 8002e88:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	d035      	beq.n	8002efc <_scanf_i+0x15c>
 8002e90:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8002e94:	d124      	bne.n	8002ee0 <_scanf_i+0x140>
 8002e96:	0510      	lsls	r0, r2, #20
 8002e98:	d522      	bpl.n	8002ee0 <_scanf_i+0x140>
 8002e9a:	f10b 0b01 	add.w	fp, fp, #1
 8002e9e:	f1b9 0f00 	cmp.w	r9, #0
 8002ea2:	d003      	beq.n	8002eac <_scanf_i+0x10c>
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f109 39ff 	add.w	r9, r9, #4294967295
 8002eaa:	60a3      	str	r3, [r4, #8]
 8002eac:	6873      	ldr	r3, [r6, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	6073      	str	r3, [r6, #4]
 8002eb4:	dd1b      	ble.n	8002eee <_scanf_i+0x14e>
 8002eb6:	6833      	ldr	r3, [r6, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	6033      	str	r3, [r6, #0]
 8002ebc:	68a3      	ldr	r3, [r4, #8]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	60a3      	str	r3, [r4, #8]
 8002ec2:	e7d9      	b.n	8002e78 <_scanf_i+0xd8>
 8002ec4:	f1bb 0f02 	cmp.w	fp, #2
 8002ec8:	d1ae      	bne.n	8002e28 <_scanf_i+0x88>
 8002eca:	6822      	ldr	r2, [r4, #0]
 8002ecc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8002ed0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002ed4:	d1bf      	bne.n	8002e56 <_scanf_i+0xb6>
 8002ed6:	2310      	movs	r3, #16
 8002ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002edc:	6063      	str	r3, [r4, #4]
 8002ede:	e7a2      	b.n	8002e26 <_scanf_i+0x86>
 8002ee0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8002ee4:	6022      	str	r2, [r4, #0]
 8002ee6:	780b      	ldrb	r3, [r1, #0]
 8002ee8:	f805 3b01 	strb.w	r3, [r5], #1
 8002eec:	e7de      	b.n	8002eac <_scanf_i+0x10c>
 8002eee:	4631      	mov	r1, r6
 8002ef0:	4650      	mov	r0, sl
 8002ef2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002ef6:	4798      	blx	r3
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	d0df      	beq.n	8002ebc <_scanf_i+0x11c>
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	05db      	lsls	r3, r3, #23
 8002f00:	d50d      	bpl.n	8002f1e <_scanf_i+0x17e>
 8002f02:	42bd      	cmp	r5, r7
 8002f04:	d909      	bls.n	8002f1a <_scanf_i+0x17a>
 8002f06:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002f0a:	4632      	mov	r2, r6
 8002f0c:	4650      	mov	r0, sl
 8002f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002f12:	f105 39ff 	add.w	r9, r5, #4294967295
 8002f16:	4798      	blx	r3
 8002f18:	464d      	mov	r5, r9
 8002f1a:	42bd      	cmp	r5, r7
 8002f1c:	d02d      	beq.n	8002f7a <_scanf_i+0x1da>
 8002f1e:	6822      	ldr	r2, [r4, #0]
 8002f20:	f012 0210 	ands.w	r2, r2, #16
 8002f24:	d113      	bne.n	8002f4e <_scanf_i+0x1ae>
 8002f26:	702a      	strb	r2, [r5, #0]
 8002f28:	4639      	mov	r1, r7
 8002f2a:	6863      	ldr	r3, [r4, #4]
 8002f2c:	4650      	mov	r0, sl
 8002f2e:	9e01      	ldr	r6, [sp, #4]
 8002f30:	47b0      	blx	r6
 8002f32:	6821      	ldr	r1, [r4, #0]
 8002f34:	f8d8 3000 	ldr.w	r3, [r8]
 8002f38:	f011 0f20 	tst.w	r1, #32
 8002f3c:	d013      	beq.n	8002f66 <_scanf_i+0x1c6>
 8002f3e:	1d1a      	adds	r2, r3, #4
 8002f40:	f8c8 2000 	str.w	r2, [r8]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6018      	str	r0, [r3, #0]
 8002f48:	68e3      	ldr	r3, [r4, #12]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60e3      	str	r3, [r4, #12]
 8002f4e:	2000      	movs	r0, #0
 8002f50:	1bed      	subs	r5, r5, r7
 8002f52:	44ab      	add	fp, r5
 8002f54:	6925      	ldr	r5, [r4, #16]
 8002f56:	445d      	add	r5, fp
 8002f58:	6125      	str	r5, [r4, #16]
 8002f5a:	b007      	add	sp, #28
 8002f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f60:	f04f 0b00 	mov.w	fp, #0
 8002f64:	e7ca      	b.n	8002efc <_scanf_i+0x15c>
 8002f66:	1d1a      	adds	r2, r3, #4
 8002f68:	f8c8 2000 	str.w	r2, [r8]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f011 0f01 	tst.w	r1, #1
 8002f72:	bf14      	ite	ne
 8002f74:	8018      	strhne	r0, [r3, #0]
 8002f76:	6018      	streq	r0, [r3, #0]
 8002f78:	e7e6      	b.n	8002f48 <_scanf_i+0x1a8>
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	e7ed      	b.n	8002f5a <_scanf_i+0x1ba>
 8002f7e:	bf00      	nop
 8002f80:	080036cc 	.word	0x080036cc
 8002f84:	080031e1 	.word	0x080031e1
 8002f88:	080030f9 	.word	0x080030f9
 8002f8c:	0800383d 	.word	0x0800383d

08002f90 <__sccl>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	780b      	ldrb	r3, [r1, #0]
 8002f94:	4604      	mov	r4, r0
 8002f96:	2b5e      	cmp	r3, #94	; 0x5e
 8002f98:	bf13      	iteet	ne
 8002f9a:	2200      	movne	r2, #0
 8002f9c:	2201      	moveq	r2, #1
 8002f9e:	784b      	ldrbeq	r3, [r1, #1]
 8002fa0:	1c48      	addne	r0, r1, #1
 8002fa2:	bf08      	it	eq
 8002fa4:	1c88      	addeq	r0, r1, #2
 8002fa6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8002faa:	1e61      	subs	r1, r4, #1
 8002fac:	f801 2f01 	strb.w	r2, [r1, #1]!
 8002fb0:	42a9      	cmp	r1, r5
 8002fb2:	d1fb      	bne.n	8002fac <__sccl+0x1c>
 8002fb4:	b90b      	cbnz	r3, 8002fba <__sccl+0x2a>
 8002fb6:	3801      	subs	r0, #1
 8002fb8:	bd70      	pop	{r4, r5, r6, pc}
 8002fba:	f082 0201 	eor.w	r2, r2, #1
 8002fbe:	4605      	mov	r5, r0
 8002fc0:	54e2      	strb	r2, [r4, r3]
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8002fc8:	292d      	cmp	r1, #45	; 0x2d
 8002fca:	d006      	beq.n	8002fda <__sccl+0x4a>
 8002fcc:	295d      	cmp	r1, #93	; 0x5d
 8002fce:	d0f3      	beq.n	8002fb8 <__sccl+0x28>
 8002fd0:	b909      	cbnz	r1, 8002fd6 <__sccl+0x46>
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	e7f0      	b.n	8002fb8 <__sccl+0x28>
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	e7f1      	b.n	8002fbe <__sccl+0x2e>
 8002fda:	786e      	ldrb	r6, [r5, #1]
 8002fdc:	2e5d      	cmp	r6, #93	; 0x5d
 8002fde:	d0fa      	beq.n	8002fd6 <__sccl+0x46>
 8002fe0:	42b3      	cmp	r3, r6
 8002fe2:	dcf8      	bgt.n	8002fd6 <__sccl+0x46>
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	3502      	adds	r5, #2
 8002fe8:	3101      	adds	r1, #1
 8002fea:	428e      	cmp	r6, r1
 8002fec:	5462      	strb	r2, [r4, r1]
 8002fee:	dcfb      	bgt.n	8002fe8 <__sccl+0x58>
 8002ff0:	1af1      	subs	r1, r6, r3
 8002ff2:	3901      	subs	r1, #1
 8002ff4:	42b3      	cmp	r3, r6
 8002ff6:	bfa8      	it	ge
 8002ff8:	2100      	movge	r1, #0
 8002ffa:	1c58      	adds	r0, r3, #1
 8002ffc:	1843      	adds	r3, r0, r1
 8002ffe:	e7e0      	b.n	8002fc2 <__sccl+0x32>

08003000 <_strtol_l.constprop.0>:
 8003000:	2b01      	cmp	r3, #1
 8003002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003006:	4680      	mov	r8, r0
 8003008:	d001      	beq.n	800300e <_strtol_l.constprop.0+0xe>
 800300a:	2b24      	cmp	r3, #36	; 0x24
 800300c:	d906      	bls.n	800301c <_strtol_l.constprop.0+0x1c>
 800300e:	f7ff f915 	bl	800223c <__errno>
 8003012:	2316      	movs	r3, #22
 8003014:	6003      	str	r3, [r0, #0]
 8003016:	2000      	movs	r0, #0
 8003018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800301c:	460d      	mov	r5, r1
 800301e:	4f35      	ldr	r7, [pc, #212]	; (80030f4 <_strtol_l.constprop.0+0xf4>)
 8003020:	4628      	mov	r0, r5
 8003022:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003026:	5de6      	ldrb	r6, [r4, r7]
 8003028:	f016 0608 	ands.w	r6, r6, #8
 800302c:	d1f8      	bne.n	8003020 <_strtol_l.constprop.0+0x20>
 800302e:	2c2d      	cmp	r4, #45	; 0x2d
 8003030:	d12f      	bne.n	8003092 <_strtol_l.constprop.0+0x92>
 8003032:	2601      	movs	r6, #1
 8003034:	782c      	ldrb	r4, [r5, #0]
 8003036:	1c85      	adds	r5, r0, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d057      	beq.n	80030ec <_strtol_l.constprop.0+0xec>
 800303c:	2b10      	cmp	r3, #16
 800303e:	d109      	bne.n	8003054 <_strtol_l.constprop.0+0x54>
 8003040:	2c30      	cmp	r4, #48	; 0x30
 8003042:	d107      	bne.n	8003054 <_strtol_l.constprop.0+0x54>
 8003044:	7828      	ldrb	r0, [r5, #0]
 8003046:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800304a:	2858      	cmp	r0, #88	; 0x58
 800304c:	d149      	bne.n	80030e2 <_strtol_l.constprop.0+0xe2>
 800304e:	2310      	movs	r3, #16
 8003050:	786c      	ldrb	r4, [r5, #1]
 8003052:	3502      	adds	r5, #2
 8003054:	2700      	movs	r7, #0
 8003056:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800305a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800305e:	fbbe f9f3 	udiv	r9, lr, r3
 8003062:	4638      	mov	r0, r7
 8003064:	fb03 ea19 	mls	sl, r3, r9, lr
 8003068:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800306c:	f1bc 0f09 	cmp.w	ip, #9
 8003070:	d814      	bhi.n	800309c <_strtol_l.constprop.0+0x9c>
 8003072:	4664      	mov	r4, ip
 8003074:	42a3      	cmp	r3, r4
 8003076:	dd22      	ble.n	80030be <_strtol_l.constprop.0+0xbe>
 8003078:	2f00      	cmp	r7, #0
 800307a:	db1d      	blt.n	80030b8 <_strtol_l.constprop.0+0xb8>
 800307c:	4581      	cmp	r9, r0
 800307e:	d31b      	bcc.n	80030b8 <_strtol_l.constprop.0+0xb8>
 8003080:	d101      	bne.n	8003086 <_strtol_l.constprop.0+0x86>
 8003082:	45a2      	cmp	sl, r4
 8003084:	db18      	blt.n	80030b8 <_strtol_l.constprop.0+0xb8>
 8003086:	2701      	movs	r7, #1
 8003088:	fb00 4003 	mla	r0, r0, r3, r4
 800308c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003090:	e7ea      	b.n	8003068 <_strtol_l.constprop.0+0x68>
 8003092:	2c2b      	cmp	r4, #43	; 0x2b
 8003094:	bf04      	itt	eq
 8003096:	782c      	ldrbeq	r4, [r5, #0]
 8003098:	1c85      	addeq	r5, r0, #2
 800309a:	e7cd      	b.n	8003038 <_strtol_l.constprop.0+0x38>
 800309c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80030a0:	f1bc 0f19 	cmp.w	ip, #25
 80030a4:	d801      	bhi.n	80030aa <_strtol_l.constprop.0+0xaa>
 80030a6:	3c37      	subs	r4, #55	; 0x37
 80030a8:	e7e4      	b.n	8003074 <_strtol_l.constprop.0+0x74>
 80030aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80030ae:	f1bc 0f19 	cmp.w	ip, #25
 80030b2:	d804      	bhi.n	80030be <_strtol_l.constprop.0+0xbe>
 80030b4:	3c57      	subs	r4, #87	; 0x57
 80030b6:	e7dd      	b.n	8003074 <_strtol_l.constprop.0+0x74>
 80030b8:	f04f 37ff 	mov.w	r7, #4294967295
 80030bc:	e7e6      	b.n	800308c <_strtol_l.constprop.0+0x8c>
 80030be:	2f00      	cmp	r7, #0
 80030c0:	da07      	bge.n	80030d2 <_strtol_l.constprop.0+0xd2>
 80030c2:	2322      	movs	r3, #34	; 0x22
 80030c4:	4670      	mov	r0, lr
 80030c6:	f8c8 3000 	str.w	r3, [r8]
 80030ca:	2a00      	cmp	r2, #0
 80030cc:	d0a4      	beq.n	8003018 <_strtol_l.constprop.0+0x18>
 80030ce:	1e69      	subs	r1, r5, #1
 80030d0:	e005      	b.n	80030de <_strtol_l.constprop.0+0xde>
 80030d2:	b106      	cbz	r6, 80030d6 <_strtol_l.constprop.0+0xd6>
 80030d4:	4240      	negs	r0, r0
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d09e      	beq.n	8003018 <_strtol_l.constprop.0+0x18>
 80030da:	2f00      	cmp	r7, #0
 80030dc:	d1f7      	bne.n	80030ce <_strtol_l.constprop.0+0xce>
 80030de:	6011      	str	r1, [r2, #0]
 80030e0:	e79a      	b.n	8003018 <_strtol_l.constprop.0+0x18>
 80030e2:	2430      	movs	r4, #48	; 0x30
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1b5      	bne.n	8003054 <_strtol_l.constprop.0+0x54>
 80030e8:	2308      	movs	r3, #8
 80030ea:	e7b3      	b.n	8003054 <_strtol_l.constprop.0+0x54>
 80030ec:	2c30      	cmp	r4, #48	; 0x30
 80030ee:	d0a9      	beq.n	8003044 <_strtol_l.constprop.0+0x44>
 80030f0:	230a      	movs	r3, #10
 80030f2:	e7af      	b.n	8003054 <_strtol_l.constprop.0+0x54>
 80030f4:	080036f1 	.word	0x080036f1

080030f8 <_strtol_r>:
 80030f8:	f7ff bf82 	b.w	8003000 <_strtol_l.constprop.0>

080030fc <_strtoul_l.constprop.0>:
 80030fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003100:	4686      	mov	lr, r0
 8003102:	460d      	mov	r5, r1
 8003104:	4f35      	ldr	r7, [pc, #212]	; (80031dc <_strtoul_l.constprop.0+0xe0>)
 8003106:	4628      	mov	r0, r5
 8003108:	f815 4b01 	ldrb.w	r4, [r5], #1
 800310c:	5de6      	ldrb	r6, [r4, r7]
 800310e:	f016 0608 	ands.w	r6, r6, #8
 8003112:	d1f8      	bne.n	8003106 <_strtoul_l.constprop.0+0xa>
 8003114:	2c2d      	cmp	r4, #45	; 0x2d
 8003116:	d12f      	bne.n	8003178 <_strtoul_l.constprop.0+0x7c>
 8003118:	2601      	movs	r6, #1
 800311a:	782c      	ldrb	r4, [r5, #0]
 800311c:	1c85      	adds	r5, r0, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d057      	beq.n	80031d2 <_strtoul_l.constprop.0+0xd6>
 8003122:	2b10      	cmp	r3, #16
 8003124:	d109      	bne.n	800313a <_strtoul_l.constprop.0+0x3e>
 8003126:	2c30      	cmp	r4, #48	; 0x30
 8003128:	d107      	bne.n	800313a <_strtoul_l.constprop.0+0x3e>
 800312a:	7828      	ldrb	r0, [r5, #0]
 800312c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003130:	2858      	cmp	r0, #88	; 0x58
 8003132:	d149      	bne.n	80031c8 <_strtoul_l.constprop.0+0xcc>
 8003134:	2310      	movs	r3, #16
 8003136:	786c      	ldrb	r4, [r5, #1]
 8003138:	3502      	adds	r5, #2
 800313a:	f04f 38ff 	mov.w	r8, #4294967295
 800313e:	fbb8 f8f3 	udiv	r8, r8, r3
 8003142:	2700      	movs	r7, #0
 8003144:	fb03 f908 	mul.w	r9, r3, r8
 8003148:	4638      	mov	r0, r7
 800314a:	ea6f 0909 	mvn.w	r9, r9
 800314e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003152:	f1bc 0f09 	cmp.w	ip, #9
 8003156:	d814      	bhi.n	8003182 <_strtoul_l.constprop.0+0x86>
 8003158:	4664      	mov	r4, ip
 800315a:	42a3      	cmp	r3, r4
 800315c:	dd22      	ble.n	80031a4 <_strtoul_l.constprop.0+0xa8>
 800315e:	2f00      	cmp	r7, #0
 8003160:	db1d      	blt.n	800319e <_strtoul_l.constprop.0+0xa2>
 8003162:	4580      	cmp	r8, r0
 8003164:	d31b      	bcc.n	800319e <_strtoul_l.constprop.0+0xa2>
 8003166:	d101      	bne.n	800316c <_strtoul_l.constprop.0+0x70>
 8003168:	45a1      	cmp	r9, r4
 800316a:	db18      	blt.n	800319e <_strtoul_l.constprop.0+0xa2>
 800316c:	2701      	movs	r7, #1
 800316e:	fb00 4003 	mla	r0, r0, r3, r4
 8003172:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003176:	e7ea      	b.n	800314e <_strtoul_l.constprop.0+0x52>
 8003178:	2c2b      	cmp	r4, #43	; 0x2b
 800317a:	bf04      	itt	eq
 800317c:	782c      	ldrbeq	r4, [r5, #0]
 800317e:	1c85      	addeq	r5, r0, #2
 8003180:	e7cd      	b.n	800311e <_strtoul_l.constprop.0+0x22>
 8003182:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003186:	f1bc 0f19 	cmp.w	ip, #25
 800318a:	d801      	bhi.n	8003190 <_strtoul_l.constprop.0+0x94>
 800318c:	3c37      	subs	r4, #55	; 0x37
 800318e:	e7e4      	b.n	800315a <_strtoul_l.constprop.0+0x5e>
 8003190:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003194:	f1bc 0f19 	cmp.w	ip, #25
 8003198:	d804      	bhi.n	80031a4 <_strtoul_l.constprop.0+0xa8>
 800319a:	3c57      	subs	r4, #87	; 0x57
 800319c:	e7dd      	b.n	800315a <_strtoul_l.constprop.0+0x5e>
 800319e:	f04f 37ff 	mov.w	r7, #4294967295
 80031a2:	e7e6      	b.n	8003172 <_strtoul_l.constprop.0+0x76>
 80031a4:	2f00      	cmp	r7, #0
 80031a6:	da07      	bge.n	80031b8 <_strtoul_l.constprop.0+0xbc>
 80031a8:	2322      	movs	r3, #34	; 0x22
 80031aa:	f04f 30ff 	mov.w	r0, #4294967295
 80031ae:	f8ce 3000 	str.w	r3, [lr]
 80031b2:	b932      	cbnz	r2, 80031c2 <_strtoul_l.constprop.0+0xc6>
 80031b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031b8:	b106      	cbz	r6, 80031bc <_strtoul_l.constprop.0+0xc0>
 80031ba:	4240      	negs	r0, r0
 80031bc:	2a00      	cmp	r2, #0
 80031be:	d0f9      	beq.n	80031b4 <_strtoul_l.constprop.0+0xb8>
 80031c0:	b107      	cbz	r7, 80031c4 <_strtoul_l.constprop.0+0xc8>
 80031c2:	1e69      	subs	r1, r5, #1
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	e7f5      	b.n	80031b4 <_strtoul_l.constprop.0+0xb8>
 80031c8:	2430      	movs	r4, #48	; 0x30
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1b5      	bne.n	800313a <_strtoul_l.constprop.0+0x3e>
 80031ce:	2308      	movs	r3, #8
 80031d0:	e7b3      	b.n	800313a <_strtoul_l.constprop.0+0x3e>
 80031d2:	2c30      	cmp	r4, #48	; 0x30
 80031d4:	d0a9      	beq.n	800312a <_strtoul_l.constprop.0+0x2e>
 80031d6:	230a      	movs	r3, #10
 80031d8:	e7af      	b.n	800313a <_strtoul_l.constprop.0+0x3e>
 80031da:	bf00      	nop
 80031dc:	080036f1 	.word	0x080036f1

080031e0 <_strtoul_r>:
 80031e0:	f7ff bf8c 	b.w	80030fc <_strtoul_l.constprop.0>

080031e4 <__submore>:
 80031e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e8:	460c      	mov	r4, r1
 80031ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80031ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031f0:	4299      	cmp	r1, r3
 80031f2:	d11b      	bne.n	800322c <__submore+0x48>
 80031f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031f8:	f000 f8cc 	bl	8003394 <_malloc_r>
 80031fc:	b918      	cbnz	r0, 8003206 <__submore+0x22>
 80031fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320a:	63a3      	str	r3, [r4, #56]	; 0x38
 800320c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003210:	6360      	str	r0, [r4, #52]	; 0x34
 8003212:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003216:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800321a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800321e:	7043      	strb	r3, [r0, #1]
 8003220:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003224:	7003      	strb	r3, [r0, #0]
 8003226:	6020      	str	r0, [r4, #0]
 8003228:	2000      	movs	r0, #0
 800322a:	e7ea      	b.n	8003202 <__submore+0x1e>
 800322c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800322e:	0077      	lsls	r7, r6, #1
 8003230:	463a      	mov	r2, r7
 8003232:	f000 f923 	bl	800347c <_realloc_r>
 8003236:	4605      	mov	r5, r0
 8003238:	2800      	cmp	r0, #0
 800323a:	d0e0      	beq.n	80031fe <__submore+0x1a>
 800323c:	eb00 0806 	add.w	r8, r0, r6
 8003240:	4601      	mov	r1, r0
 8003242:	4632      	mov	r2, r6
 8003244:	4640      	mov	r0, r8
 8003246:	f000 f815 	bl	8003274 <memcpy>
 800324a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800324e:	f8c4 8000 	str.w	r8, [r4]
 8003252:	e7e9      	b.n	8003228 <__submore+0x44>

08003254 <__retarget_lock_acquire_recursive>:
 8003254:	4770      	bx	lr

08003256 <__retarget_lock_release_recursive>:
 8003256:	4770      	bx	lr

08003258 <memchr>:
 8003258:	4603      	mov	r3, r0
 800325a:	b510      	push	{r4, lr}
 800325c:	b2c9      	uxtb	r1, r1
 800325e:	4402      	add	r2, r0
 8003260:	4293      	cmp	r3, r2
 8003262:	4618      	mov	r0, r3
 8003264:	d101      	bne.n	800326a <memchr+0x12>
 8003266:	2000      	movs	r0, #0
 8003268:	e003      	b.n	8003272 <memchr+0x1a>
 800326a:	7804      	ldrb	r4, [r0, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	428c      	cmp	r4, r1
 8003270:	d1f6      	bne.n	8003260 <memchr+0x8>
 8003272:	bd10      	pop	{r4, pc}

08003274 <memcpy>:
 8003274:	440a      	add	r2, r1
 8003276:	4291      	cmp	r1, r2
 8003278:	f100 33ff 	add.w	r3, r0, #4294967295
 800327c:	d100      	bne.n	8003280 <memcpy+0xc>
 800327e:	4770      	bx	lr
 8003280:	b510      	push	{r4, lr}
 8003282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003286:	4291      	cmp	r1, r2
 8003288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800328c:	d1f9      	bne.n	8003282 <memcpy+0xe>
 800328e:	bd10      	pop	{r4, pc}

08003290 <memmove>:
 8003290:	4288      	cmp	r0, r1
 8003292:	b510      	push	{r4, lr}
 8003294:	eb01 0402 	add.w	r4, r1, r2
 8003298:	d902      	bls.n	80032a0 <memmove+0x10>
 800329a:	4284      	cmp	r4, r0
 800329c:	4623      	mov	r3, r4
 800329e:	d807      	bhi.n	80032b0 <memmove+0x20>
 80032a0:	1e43      	subs	r3, r0, #1
 80032a2:	42a1      	cmp	r1, r4
 80032a4:	d008      	beq.n	80032b8 <memmove+0x28>
 80032a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032ae:	e7f8      	b.n	80032a2 <memmove+0x12>
 80032b0:	4601      	mov	r1, r0
 80032b2:	4402      	add	r2, r0
 80032b4:	428a      	cmp	r2, r1
 80032b6:	d100      	bne.n	80032ba <memmove+0x2a>
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032c2:	e7f7      	b.n	80032b4 <memmove+0x24>

080032c4 <_free_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	4605      	mov	r5, r0
 80032c8:	2900      	cmp	r1, #0
 80032ca:	d040      	beq.n	800334e <_free_r+0x8a>
 80032cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032d0:	1f0c      	subs	r4, r1, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bfb8      	it	lt
 80032d6:	18e4      	addlt	r4, r4, r3
 80032d8:	f000 f910 	bl	80034fc <__malloc_lock>
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <_free_r+0x8c>)
 80032de:	6813      	ldr	r3, [r2, #0]
 80032e0:	b933      	cbnz	r3, 80032f0 <_free_r+0x2c>
 80032e2:	6063      	str	r3, [r4, #4]
 80032e4:	6014      	str	r4, [r2, #0]
 80032e6:	4628      	mov	r0, r5
 80032e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ec:	f000 b90c 	b.w	8003508 <__malloc_unlock>
 80032f0:	42a3      	cmp	r3, r4
 80032f2:	d908      	bls.n	8003306 <_free_r+0x42>
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	1821      	adds	r1, r4, r0
 80032f8:	428b      	cmp	r3, r1
 80032fa:	bf01      	itttt	eq
 80032fc:	6819      	ldreq	r1, [r3, #0]
 80032fe:	685b      	ldreq	r3, [r3, #4]
 8003300:	1809      	addeq	r1, r1, r0
 8003302:	6021      	streq	r1, [r4, #0]
 8003304:	e7ed      	b.n	80032e2 <_free_r+0x1e>
 8003306:	461a      	mov	r2, r3
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	b10b      	cbz	r3, 8003310 <_free_r+0x4c>
 800330c:	42a3      	cmp	r3, r4
 800330e:	d9fa      	bls.n	8003306 <_free_r+0x42>
 8003310:	6811      	ldr	r1, [r2, #0]
 8003312:	1850      	adds	r0, r2, r1
 8003314:	42a0      	cmp	r0, r4
 8003316:	d10b      	bne.n	8003330 <_free_r+0x6c>
 8003318:	6820      	ldr	r0, [r4, #0]
 800331a:	4401      	add	r1, r0
 800331c:	1850      	adds	r0, r2, r1
 800331e:	4283      	cmp	r3, r0
 8003320:	6011      	str	r1, [r2, #0]
 8003322:	d1e0      	bne.n	80032e6 <_free_r+0x22>
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4401      	add	r1, r0
 800332a:	6011      	str	r1, [r2, #0]
 800332c:	6053      	str	r3, [r2, #4]
 800332e:	e7da      	b.n	80032e6 <_free_r+0x22>
 8003330:	d902      	bls.n	8003338 <_free_r+0x74>
 8003332:	230c      	movs	r3, #12
 8003334:	602b      	str	r3, [r5, #0]
 8003336:	e7d6      	b.n	80032e6 <_free_r+0x22>
 8003338:	6820      	ldr	r0, [r4, #0]
 800333a:	1821      	adds	r1, r4, r0
 800333c:	428b      	cmp	r3, r1
 800333e:	bf01      	itttt	eq
 8003340:	6819      	ldreq	r1, [r3, #0]
 8003342:	685b      	ldreq	r3, [r3, #4]
 8003344:	1809      	addeq	r1, r1, r0
 8003346:	6021      	streq	r1, [r4, #0]
 8003348:	6063      	str	r3, [r4, #4]
 800334a:	6054      	str	r4, [r2, #4]
 800334c:	e7cb      	b.n	80032e6 <_free_r+0x22>
 800334e:	bd38      	pop	{r3, r4, r5, pc}
 8003350:	200001d0 	.word	0x200001d0

08003354 <sbrk_aligned>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	4e0e      	ldr	r6, [pc, #56]	; (8003390 <sbrk_aligned+0x3c>)
 8003358:	460c      	mov	r4, r1
 800335a:	6831      	ldr	r1, [r6, #0]
 800335c:	4605      	mov	r5, r0
 800335e:	b911      	cbnz	r1, 8003366 <sbrk_aligned+0x12>
 8003360:	f000 f8bc 	bl	80034dc <_sbrk_r>
 8003364:	6030      	str	r0, [r6, #0]
 8003366:	4621      	mov	r1, r4
 8003368:	4628      	mov	r0, r5
 800336a:	f000 f8b7 	bl	80034dc <_sbrk_r>
 800336e:	1c43      	adds	r3, r0, #1
 8003370:	d00a      	beq.n	8003388 <sbrk_aligned+0x34>
 8003372:	1cc4      	adds	r4, r0, #3
 8003374:	f024 0403 	bic.w	r4, r4, #3
 8003378:	42a0      	cmp	r0, r4
 800337a:	d007      	beq.n	800338c <sbrk_aligned+0x38>
 800337c:	1a21      	subs	r1, r4, r0
 800337e:	4628      	mov	r0, r5
 8003380:	f000 f8ac 	bl	80034dc <_sbrk_r>
 8003384:	3001      	adds	r0, #1
 8003386:	d101      	bne.n	800338c <sbrk_aligned+0x38>
 8003388:	f04f 34ff 	mov.w	r4, #4294967295
 800338c:	4620      	mov	r0, r4
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	200001d4 	.word	0x200001d4

08003394 <_malloc_r>:
 8003394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003398:	1ccd      	adds	r5, r1, #3
 800339a:	f025 0503 	bic.w	r5, r5, #3
 800339e:	3508      	adds	r5, #8
 80033a0:	2d0c      	cmp	r5, #12
 80033a2:	bf38      	it	cc
 80033a4:	250c      	movcc	r5, #12
 80033a6:	2d00      	cmp	r5, #0
 80033a8:	4607      	mov	r7, r0
 80033aa:	db01      	blt.n	80033b0 <_malloc_r+0x1c>
 80033ac:	42a9      	cmp	r1, r5
 80033ae:	d905      	bls.n	80033bc <_malloc_r+0x28>
 80033b0:	230c      	movs	r3, #12
 80033b2:	2600      	movs	r6, #0
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	4630      	mov	r0, r6
 80033b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033bc:	4e2e      	ldr	r6, [pc, #184]	; (8003478 <_malloc_r+0xe4>)
 80033be:	f000 f89d 	bl	80034fc <__malloc_lock>
 80033c2:	6833      	ldr	r3, [r6, #0]
 80033c4:	461c      	mov	r4, r3
 80033c6:	bb34      	cbnz	r4, 8003416 <_malloc_r+0x82>
 80033c8:	4629      	mov	r1, r5
 80033ca:	4638      	mov	r0, r7
 80033cc:	f7ff ffc2 	bl	8003354 <sbrk_aligned>
 80033d0:	1c43      	adds	r3, r0, #1
 80033d2:	4604      	mov	r4, r0
 80033d4:	d14d      	bne.n	8003472 <_malloc_r+0xde>
 80033d6:	6834      	ldr	r4, [r6, #0]
 80033d8:	4626      	mov	r6, r4
 80033da:	2e00      	cmp	r6, #0
 80033dc:	d140      	bne.n	8003460 <_malloc_r+0xcc>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	4631      	mov	r1, r6
 80033e2:	4638      	mov	r0, r7
 80033e4:	eb04 0803 	add.w	r8, r4, r3
 80033e8:	f000 f878 	bl	80034dc <_sbrk_r>
 80033ec:	4580      	cmp	r8, r0
 80033ee:	d13a      	bne.n	8003466 <_malloc_r+0xd2>
 80033f0:	6821      	ldr	r1, [r4, #0]
 80033f2:	3503      	adds	r5, #3
 80033f4:	1a6d      	subs	r5, r5, r1
 80033f6:	f025 0503 	bic.w	r5, r5, #3
 80033fa:	3508      	adds	r5, #8
 80033fc:	2d0c      	cmp	r5, #12
 80033fe:	bf38      	it	cc
 8003400:	250c      	movcc	r5, #12
 8003402:	4638      	mov	r0, r7
 8003404:	4629      	mov	r1, r5
 8003406:	f7ff ffa5 	bl	8003354 <sbrk_aligned>
 800340a:	3001      	adds	r0, #1
 800340c:	d02b      	beq.n	8003466 <_malloc_r+0xd2>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	442b      	add	r3, r5
 8003412:	6023      	str	r3, [r4, #0]
 8003414:	e00e      	b.n	8003434 <_malloc_r+0xa0>
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	1b52      	subs	r2, r2, r5
 800341a:	d41e      	bmi.n	800345a <_malloc_r+0xc6>
 800341c:	2a0b      	cmp	r2, #11
 800341e:	d916      	bls.n	800344e <_malloc_r+0xba>
 8003420:	1961      	adds	r1, r4, r5
 8003422:	42a3      	cmp	r3, r4
 8003424:	6025      	str	r5, [r4, #0]
 8003426:	bf18      	it	ne
 8003428:	6059      	strne	r1, [r3, #4]
 800342a:	6863      	ldr	r3, [r4, #4]
 800342c:	bf08      	it	eq
 800342e:	6031      	streq	r1, [r6, #0]
 8003430:	5162      	str	r2, [r4, r5]
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	4638      	mov	r0, r7
 8003436:	f104 060b 	add.w	r6, r4, #11
 800343a:	f000 f865 	bl	8003508 <__malloc_unlock>
 800343e:	f026 0607 	bic.w	r6, r6, #7
 8003442:	1d23      	adds	r3, r4, #4
 8003444:	1af2      	subs	r2, r6, r3
 8003446:	d0b6      	beq.n	80033b6 <_malloc_r+0x22>
 8003448:	1b9b      	subs	r3, r3, r6
 800344a:	50a3      	str	r3, [r4, r2]
 800344c:	e7b3      	b.n	80033b6 <_malloc_r+0x22>
 800344e:	6862      	ldr	r2, [r4, #4]
 8003450:	42a3      	cmp	r3, r4
 8003452:	bf0c      	ite	eq
 8003454:	6032      	streq	r2, [r6, #0]
 8003456:	605a      	strne	r2, [r3, #4]
 8003458:	e7ec      	b.n	8003434 <_malloc_r+0xa0>
 800345a:	4623      	mov	r3, r4
 800345c:	6864      	ldr	r4, [r4, #4]
 800345e:	e7b2      	b.n	80033c6 <_malloc_r+0x32>
 8003460:	4634      	mov	r4, r6
 8003462:	6876      	ldr	r6, [r6, #4]
 8003464:	e7b9      	b.n	80033da <_malloc_r+0x46>
 8003466:	230c      	movs	r3, #12
 8003468:	4638      	mov	r0, r7
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	f000 f84c 	bl	8003508 <__malloc_unlock>
 8003470:	e7a1      	b.n	80033b6 <_malloc_r+0x22>
 8003472:	6025      	str	r5, [r4, #0]
 8003474:	e7de      	b.n	8003434 <_malloc_r+0xa0>
 8003476:	bf00      	nop
 8003478:	200001d0 	.word	0x200001d0

0800347c <_realloc_r>:
 800347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003480:	4680      	mov	r8, r0
 8003482:	4614      	mov	r4, r2
 8003484:	460e      	mov	r6, r1
 8003486:	b921      	cbnz	r1, 8003492 <_realloc_r+0x16>
 8003488:	4611      	mov	r1, r2
 800348a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800348e:	f7ff bf81 	b.w	8003394 <_malloc_r>
 8003492:	b92a      	cbnz	r2, 80034a0 <_realloc_r+0x24>
 8003494:	f7ff ff16 	bl	80032c4 <_free_r>
 8003498:	4625      	mov	r5, r4
 800349a:	4628      	mov	r0, r5
 800349c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034a0:	f000 f838 	bl	8003514 <_malloc_usable_size_r>
 80034a4:	4284      	cmp	r4, r0
 80034a6:	4607      	mov	r7, r0
 80034a8:	d802      	bhi.n	80034b0 <_realloc_r+0x34>
 80034aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034ae:	d812      	bhi.n	80034d6 <_realloc_r+0x5a>
 80034b0:	4621      	mov	r1, r4
 80034b2:	4640      	mov	r0, r8
 80034b4:	f7ff ff6e 	bl	8003394 <_malloc_r>
 80034b8:	4605      	mov	r5, r0
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d0ed      	beq.n	800349a <_realloc_r+0x1e>
 80034be:	42bc      	cmp	r4, r7
 80034c0:	4622      	mov	r2, r4
 80034c2:	4631      	mov	r1, r6
 80034c4:	bf28      	it	cs
 80034c6:	463a      	movcs	r2, r7
 80034c8:	f7ff fed4 	bl	8003274 <memcpy>
 80034cc:	4631      	mov	r1, r6
 80034ce:	4640      	mov	r0, r8
 80034d0:	f7ff fef8 	bl	80032c4 <_free_r>
 80034d4:	e7e1      	b.n	800349a <_realloc_r+0x1e>
 80034d6:	4635      	mov	r5, r6
 80034d8:	e7df      	b.n	800349a <_realloc_r+0x1e>
	...

080034dc <_sbrk_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	2300      	movs	r3, #0
 80034e0:	4d05      	ldr	r5, [pc, #20]	; (80034f8 <_sbrk_r+0x1c>)
 80034e2:	4604      	mov	r4, r0
 80034e4:	4608      	mov	r0, r1
 80034e6:	602b      	str	r3, [r5, #0]
 80034e8:	f7fd f89a 	bl	8000620 <_sbrk>
 80034ec:	1c43      	adds	r3, r0, #1
 80034ee:	d102      	bne.n	80034f6 <_sbrk_r+0x1a>
 80034f0:	682b      	ldr	r3, [r5, #0]
 80034f2:	b103      	cbz	r3, 80034f6 <_sbrk_r+0x1a>
 80034f4:	6023      	str	r3, [r4, #0]
 80034f6:	bd38      	pop	{r3, r4, r5, pc}
 80034f8:	200001c8 	.word	0x200001c8

080034fc <__malloc_lock>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__malloc_lock+0x8>)
 80034fe:	f7ff bea9 	b.w	8003254 <__retarget_lock_acquire_recursive>
 8003502:	bf00      	nop
 8003504:	200001cc 	.word	0x200001cc

08003508 <__malloc_unlock>:
 8003508:	4801      	ldr	r0, [pc, #4]	; (8003510 <__malloc_unlock+0x8>)
 800350a:	f7ff bea4 	b.w	8003256 <__retarget_lock_release_recursive>
 800350e:	bf00      	nop
 8003510:	200001cc 	.word	0x200001cc

08003514 <_malloc_usable_size_r>:
 8003514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003518:	1f18      	subs	r0, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	bfbc      	itt	lt
 800351e:	580b      	ldrlt	r3, [r1, r0]
 8003520:	18c0      	addlt	r0, r0, r3
 8003522:	4770      	bx	lr

08003524 <_init>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr

08003530 <_fini>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr
