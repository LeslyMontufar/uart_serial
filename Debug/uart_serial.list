
uart_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003438  08003438  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003438  08003438  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003438  08003438  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  080034b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080034b0  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ab2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019bf  00000000  00000000  00026b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00028510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  00028ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c07  00000000  00000000  00029378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083ff  00000000  00000000  0003ff7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082e80  00000000  00000000  0004837e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb1fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f0  00000000  00000000  000cb250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080031cc 	.word	0x080031cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080031cc 	.word	0x080031cc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000174:	f000 fa76 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000178:	f000 f80b 	bl	8000192 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017c:	f000 f8a2 	bl	80002c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000180:	f000 f876 	bl	8000270 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000184:	f000 f84a 	bl	800021c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000188:	f001 fb52 	bl	8001830 <app_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_loop();
 800018c:	f001 fb5c 	bl	8001848 <app_loop>
 8000190:	e7fc      	b.n	800018c <main+0x1c>

08000192 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000192:	b580      	push	{r7, lr}
 8000194:	b090      	sub	sp, #64	; 0x40
 8000196:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000198:	f107 0318 	add.w	r3, r7, #24
 800019c:	2228      	movs	r2, #40	; 0x28
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 fec9 	bl	8001f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]
 80001b2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b4:	2301      	movs	r3, #1
 80001b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001be:	2300      	movs	r3, #0
 80001c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c2:	2301      	movs	r3, #1
 80001c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c6:	2302      	movs	r3, #2
 80001c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 fdf4 	bl	8000dc8 <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e6:	f000 f8d1 	bl	800038c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ee:	2302      	movs	r3, #2
 80001f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2102      	movs	r1, #2
 8000204:	4618      	mov	r0, r3
 8000206:	f001 f861 	bl	80012cc <HAL_RCC_ClockConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000210:	f000 f8bc 	bl	800038c <Error_Handler>
  }
}
 8000214:	bf00      	nop
 8000216:	3740      	adds	r7, #64	; 0x40
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000222:	4a12      	ldr	r2, [pc, #72]	; (800026c <MX_USART1_UART_Init+0x50>)
 8000224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800022c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000242:	220c      	movs	r2, #12
 8000244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <MX_USART1_UART_Init+0x4c>)
 8000254:	f001 f9d2 	bl	80015fc <HAL_UART_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800025e:	f000 f895 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	2000008c 	.word	0x2000008c
 800026c:	40013800 	.word	0x40013800

08000270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <MX_USART2_UART_Init+0x4c>)
 8000276:	4a12      	ldr	r2, [pc, #72]	; (80002c0 <MX_USART2_UART_Init+0x50>)
 8000278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <MX_USART2_UART_Init+0x4c>)
 800027c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <MX_USART2_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <MX_USART2_UART_Init+0x4c>)
 800028a:	2200      	movs	r2, #0
 800028c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <MX_USART2_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <MX_USART2_UART_Init+0x4c>)
 8000296:	220c      	movs	r2, #12
 8000298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <MX_USART2_UART_Init+0x4c>)
 800029c:	2200      	movs	r2, #0
 800029e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <MX_USART2_UART_Init+0x4c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002a6:	4805      	ldr	r0, [pc, #20]	; (80002bc <MX_USART2_UART_Init+0x4c>)
 80002a8:	f001 f9a8 	bl	80015fc <HAL_UART_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002b2:	f000 f86b 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000d0 	.word	0x200000d0
 80002c0:	40004400 	.word	0x40004400

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <MX_GPIO_Init+0xb8>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <MX_GPIO_Init+0xb8>)
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <MX_GPIO_Init+0xb8>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0310 	and.w	r3, r3, #16
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <MX_GPIO_Init+0xb8>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <MX_GPIO_Init+0xb8>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <MX_GPIO_Init+0xb8>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	60bb      	str	r3, [r7, #8]
 8000306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <MX_GPIO_Init+0xb8>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <MX_GPIO_Init+0xb8>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <MX_GPIO_Init+0xb8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	4816      	ldr	r0, [pc, #88]	; (8000380 <MX_GPIO_Init+0xbc>)
 8000328:	f000 fd05 	bl	8000d36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800032c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2302      	movs	r3, #2
 800033c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4619      	mov	r1, r3
 8000344:	480e      	ldr	r0, [pc, #56]	; (8000380 <MX_GPIO_Init+0xbc>)
 8000346:	f000 fb5b 	bl	8000a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800034a:	2301      	movs	r3, #1
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <MX_GPIO_Init+0xc0>)
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000352:	2301      	movs	r3, #1
 8000354:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	4619      	mov	r1, r3
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <MX_GPIO_Init+0xc4>)
 800035e:	f000 fb4f 	bl	8000a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2105      	movs	r1, #5
 8000366:	2006      	movs	r0, #6
 8000368:	f000 faf7 	bl	800095a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800036c:	2006      	movs	r0, #6
 800036e:	f000 fb10 	bl	8000992 <HAL_NVIC_EnableIRQ>

}
 8000372:	bf00      	nop
 8000374:	3720      	adds	r7, #32
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	40011000 	.word	0x40011000
 8000384:	10110000 	.word	0x10110000
 8000388:	40010800 	.word	0x40010800

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	e7fe      	b.n	8000394 <Error_Handler+0x8>
	...

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <HAL_MspInit+0x5c>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <HAL_MspInit+0x5c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <HAL_MspInit+0x5c>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	61d3      	str	r3, [r2, #28]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_MspInit+0x5c>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <HAL_MspInit+0x60>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <HAL_MspInit+0x60>)
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010000 	.word	0x40010000

080003fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08a      	sub	sp, #40	; 0x28
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000404:	f107 0318 	add.w	r3, r7, #24
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a3f      	ldr	r2, [pc, #252]	; (8000514 <HAL_UART_MspInit+0x118>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d13a      	bne.n	8000492 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800041c:	4b3e      	ldr	r3, [pc, #248]	; (8000518 <HAL_UART_MspInit+0x11c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a3d      	ldr	r2, [pc, #244]	; (8000518 <HAL_UART_MspInit+0x11c>)
 8000422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b3b      	ldr	r3, [pc, #236]	; (8000518 <HAL_UART_MspInit+0x11c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000430:	617b      	str	r3, [r7, #20]
 8000432:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b38      	ldr	r3, [pc, #224]	; (8000518 <HAL_UART_MspInit+0x11c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a37      	ldr	r2, [pc, #220]	; (8000518 <HAL_UART_MspInit+0x11c>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b35      	ldr	r3, [pc, #212]	; (8000518 <HAL_UART_MspInit+0x11c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800044c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000452:	2302      	movs	r3, #2
 8000454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000456:	2303      	movs	r3, #3
 8000458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	4619      	mov	r1, r3
 8000460:	482e      	ldr	r0, [pc, #184]	; (800051c <HAL_UART_MspInit+0x120>)
 8000462:	f000 facd 	bl	8000a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800046a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 0318 	add.w	r3, r7, #24
 8000478:	4619      	mov	r1, r3
 800047a:	4828      	ldr	r0, [pc, #160]	; (800051c <HAL_UART_MspInit+0x120>)
 800047c:	f000 fac0 	bl	8000a00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000480:	2200      	movs	r2, #0
 8000482:	2103      	movs	r1, #3
 8000484:	2025      	movs	r0, #37	; 0x25
 8000486:	f000 fa68 	bl	800095a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800048a:	2025      	movs	r0, #37	; 0x25
 800048c:	f000 fa81 	bl	8000992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000490:	e03c      	b.n	800050c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a22      	ldr	r2, [pc, #136]	; (8000520 <HAL_UART_MspInit+0x124>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d137      	bne.n	800050c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800049c:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <HAL_UART_MspInit+0x11c>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	4a1d      	ldr	r2, [pc, #116]	; (8000518 <HAL_UART_MspInit+0x11c>)
 80004a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a6:	61d3      	str	r3, [r2, #28]
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <HAL_UART_MspInit+0x11c>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b18      	ldr	r3, [pc, #96]	; (8000518 <HAL_UART_MspInit+0x11c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a17      	ldr	r2, [pc, #92]	; (8000518 <HAL_UART_MspInit+0x11c>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <HAL_UART_MspInit+0x11c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004cc:	2304      	movs	r3, #4
 80004ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0318 	add.w	r3, r7, #24
 80004dc:	4619      	mov	r1, r3
 80004de:	480f      	ldr	r0, [pc, #60]	; (800051c <HAL_UART_MspInit+0x120>)
 80004e0:	f000 fa8e 	bl	8000a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004e4:	2308      	movs	r3, #8
 80004e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0318 	add.w	r3, r7, #24
 80004f4:	4619      	mov	r1, r3
 80004f6:	4809      	ldr	r0, [pc, #36]	; (800051c <HAL_UART_MspInit+0x120>)
 80004f8:	f000 fa82 	bl	8000a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2102      	movs	r1, #2
 8000500:	2026      	movs	r0, #38	; 0x26
 8000502:	f000 fa2a 	bl	800095a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000506:	2026      	movs	r0, #38	; 0x26
 8000508:	f000 fa43 	bl	8000992 <HAL_NVIC_EnableIRQ>
}
 800050c:	bf00      	nop
 800050e:	3728      	adds	r7, #40	; 0x28
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40013800 	.word	0x40013800
 8000518:	40021000 	.word	0x40021000
 800051c:	40010800 	.word	0x40010800
 8000520:	40004400 	.word	0x40004400

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <NMI_Handler+0x4>

0800052a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <MemManage_Handler+0x4>

08000536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <BusFault_Handler+0x4>

0800053c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler+0x4>

08000542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056a:	f000 f8c1 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_tick_1ms();
 800056e:	f001 f951 	bl	8001814 <app_tick_1ms>
  shell_tick_1ms();
 8000572:	f001 fa3d 	bl	80019f0 <shell_tick_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}

0800057a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fc0a 	bl	8000d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
#if 1
	extern void shell_uart_interrupt(void);
	shell_uart_interrupt();
 800058c:	f001 fc36 	bl	8001dfc <shell_uart_interrupt>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
#if 1
	extern void hw_uart2_interrupt(void);
	hw_uart2_interrupt();
 8000598:	f001 f98c 	bl	80018b4 <hw_uart2_interrupt>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f001 fc88 	bl	8001ee4 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20005000 	.word	0x20005000
 8000600:	00000400 	.word	0x00000400
 8000604:	20000114 	.word	0x20000114
 8000608:	20000188 	.word	0x20000188

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000630:	4c0a      	ldr	r4, [pc, #40]	; (800065c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800063e:	f7ff ffe5 	bl	800060c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000642:	f001 fc55 	bl	8001ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fd93 	bl	8000170 <main>
  bx lr
 800064a:	4770      	bx	lr
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000654:	08003440 	.word	0x08003440
  ldr r2, =_sbss
 8000658:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800065c:	20000188 	.word	0x20000188

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f965 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	200f      	movs	r0, #15
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff fe8a 	bl	8000398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f98b 	bl	80009ca <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 f945 	bl	800095a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a03      	ldr	r2, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000008 	.word	0x20000008
 8000710:	20000118 	.word	0x20000118

08000714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000118 	.word	0x20000118

08000728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	db0b      	blt.n	80007b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 021f 	and.w	r2, r3, #31
 80007a4:	4906      	ldr	r1, [pc, #24]	; (80007c0 <__NVIC_EnableIRQ+0x34>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	095b      	lsrs	r3, r3, #5
 80007ac:	2001      	movs	r0, #1
 80007ae:	fa00 f202 	lsl.w	r2, r0, r2
 80007b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db12      	blt.n	80007fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f003 021f 	and.w	r2, r3, #31
 80007dc:	490a      	ldr	r1, [pc, #40]	; (8000808 <__NVIC_DisableIRQ+0x44>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	2001      	movs	r0, #1
 80007e6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ea:	3320      	adds	r3, #32
 80007ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007f0:	f3bf 8f4f 	dsb	sy
}
 80007f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f6:	f3bf 8f6f 	isb	sy
}
 80007fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000e100 	.word	0xe000e100

0800080c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0c      	blt.n	8000838 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <__NVIC_ClearPendingIRQ+0x38>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	3360      	adds	r3, #96	; 0x60
 8000834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000910:	d301      	bcc.n	8000916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000912:	2301      	movs	r3, #1
 8000914:	e00f      	b.n	8000936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <SysTick_Config+0x40>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091e:	210f      	movs	r1, #15
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f7ff ff90 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Config+0x40>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff feeb 	bl	8000728 <__NVIC_SetPriorityGrouping>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096c:	f7ff ff00 	bl	8000770 <__NVIC_GetPriorityGrouping>
 8000970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f7ff ff90 	bl	800089c <NVIC_EncodePriority>
 800097c:	4602      	mov	r2, r0
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff5f 	bl	8000848 <__NVIC_SetPriority>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fef3 	bl	800078c <__NVIC_EnableIRQ>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff01 	bl	80007c4 <__NVIC_DisableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff94 	bl	8000900 <SysTick_Config>
 80009d8:	4603      	mov	r3, r0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff0b 	bl	800080c <__NVIC_ClearPendingIRQ>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b08b      	sub	sp, #44	; 0x2c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a12:	e169      	b.n	8000ce8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a14:	2201      	movs	r2, #1
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	4013      	ands	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	f040 8158 	bne.w	8000ce2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	4a9a      	ldr	r2, [pc, #616]	; (8000ca0 <HAL_GPIO_Init+0x2a0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d05e      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a3c:	4a98      	ldr	r2, [pc, #608]	; (8000ca0 <HAL_GPIO_Init+0x2a0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d875      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a42:	4a98      	ldr	r2, [pc, #608]	; (8000ca4 <HAL_GPIO_Init+0x2a4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d058      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a48:	4a96      	ldr	r2, [pc, #600]	; (8000ca4 <HAL_GPIO_Init+0x2a4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d86f      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a4e:	4a96      	ldr	r2, [pc, #600]	; (8000ca8 <HAL_GPIO_Init+0x2a8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d052      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a54:	4a94      	ldr	r2, [pc, #592]	; (8000ca8 <HAL_GPIO_Init+0x2a8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d869      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a5a:	4a94      	ldr	r2, [pc, #592]	; (8000cac <HAL_GPIO_Init+0x2ac>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d04c      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a60:	4a92      	ldr	r2, [pc, #584]	; (8000cac <HAL_GPIO_Init+0x2ac>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d863      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a66:	4a92      	ldr	r2, [pc, #584]	; (8000cb0 <HAL_GPIO_Init+0x2b0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d046      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a6c:	4a90      	ldr	r2, [pc, #576]	; (8000cb0 <HAL_GPIO_Init+0x2b0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d85d      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a72:	2b12      	cmp	r3, #18
 8000a74:	d82a      	bhi.n	8000acc <HAL_GPIO_Init+0xcc>
 8000a76:	2b12      	cmp	r3, #18
 8000a78:	d859      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <HAL_GPIO_Init+0x80>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000ad5 	.word	0x08000ad5
 8000a88:	08000ae7 	.word	0x08000ae7
 8000a8c:	08000b29 	.word	0x08000b29
 8000a90:	08000b2f 	.word	0x08000b2f
 8000a94:	08000b2f 	.word	0x08000b2f
 8000a98:	08000b2f 	.word	0x08000b2f
 8000a9c:	08000b2f 	.word	0x08000b2f
 8000aa0:	08000b2f 	.word	0x08000b2f
 8000aa4:	08000b2f 	.word	0x08000b2f
 8000aa8:	08000b2f 	.word	0x08000b2f
 8000aac:	08000b2f 	.word	0x08000b2f
 8000ab0:	08000b2f 	.word	0x08000b2f
 8000ab4:	08000b2f 	.word	0x08000b2f
 8000ab8:	08000b2f 	.word	0x08000b2f
 8000abc:	08000b2f 	.word	0x08000b2f
 8000ac0:	08000b2f 	.word	0x08000b2f
 8000ac4:	08000add 	.word	0x08000add
 8000ac8:	08000af1 	.word	0x08000af1
 8000acc:	4a79      	ldr	r2, [pc, #484]	; (8000cb4 <HAL_GPIO_Init+0x2b4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d013      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ad2:	e02c      	b.n	8000b2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	623b      	str	r3, [r7, #32]
          break;
 8000ada:	e029      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e024      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	3308      	adds	r3, #8
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e01f      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	330c      	adds	r3, #12
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e01a      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b02:	2304      	movs	r3, #4
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e013      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d105      	bne.n	8000b1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b10:	2308      	movs	r3, #8
 8000b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	611a      	str	r2, [r3, #16]
          break;
 8000b1a:	e009      	b.n	8000b30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	615a      	str	r2, [r3, #20]
          break;
 8000b26:	e003      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e000      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          break;
 8000b2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	2bff      	cmp	r3, #255	; 0xff
 8000b34:	d801      	bhi.n	8000b3a <HAL_GPIO_Init+0x13a>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	e001      	b.n	8000b3e <HAL_GPIO_Init+0x13e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	2bff      	cmp	r3, #255	; 0xff
 8000b44:	d802      	bhi.n	8000b4c <HAL_GPIO_Init+0x14c>
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	e002      	b.n	8000b52 <HAL_GPIO_Init+0x152>
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	3b08      	subs	r3, #8
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	210f      	movs	r1, #15
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	401a      	ands	r2, r3
 8000b64:	6a39      	ldr	r1, [r7, #32]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 80b1 	beq.w	8000ce2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b80:	4b4d      	ldr	r3, [pc, #308]	; (8000cb8 <HAL_GPIO_Init+0x2b8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a4c      	ldr	r2, [pc, #304]	; (8000cb8 <HAL_GPIO_Init+0x2b8>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b4a      	ldr	r3, [pc, #296]	; (8000cb8 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b98:	4a48      	ldr	r2, [pc, #288]	; (8000cbc <HAL_GPIO_Init+0x2bc>)
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	220f      	movs	r2, #15
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a40      	ldr	r2, [pc, #256]	; (8000cc0 <HAL_GPIO_Init+0x2c0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d013      	beq.n	8000bec <HAL_GPIO_Init+0x1ec>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a3f      	ldr	r2, [pc, #252]	; (8000cc4 <HAL_GPIO_Init+0x2c4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d00d      	beq.n	8000be8 <HAL_GPIO_Init+0x1e8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3e      	ldr	r2, [pc, #248]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d007      	beq.n	8000be4 <HAL_GPIO_Init+0x1e4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a3d      	ldr	r2, [pc, #244]	; (8000ccc <HAL_GPIO_Init+0x2cc>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d101      	bne.n	8000be0 <HAL_GPIO_Init+0x1e0>
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e006      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be0:	2304      	movs	r3, #4
 8000be2:	e004      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000bec:	2300      	movs	r3, #0
 8000bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf0:	f002 0203 	and.w	r2, r2, #3
 8000bf4:	0092      	lsls	r2, r2, #2
 8000bf6:	4093      	lsls	r3, r2
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bfe:	492f      	ldr	r1, [pc, #188]	; (8000cbc <HAL_GPIO_Init+0x2bc>)
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3302      	adds	r3, #2
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	492c      	ldr	r1, [pc, #176]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]
 8000c24:	e006      	b.n	8000c34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4928      	ldr	r1, [pc, #160]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	4922      	ldr	r1, [pc, #136]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]
 8000c4c:	e006      	b.n	8000c5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	491e      	ldr	r1, [pc, #120]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	4918      	ldr	r1, [pc, #96]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	608b      	str	r3, [r1, #8]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4914      	ldr	r1, [pc, #80]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d021      	beq.n	8000cd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60cb      	str	r3, [r1, #12]
 8000c9c:	e021      	b.n	8000ce2 <HAL_GPIO_Init+0x2e2>
 8000c9e:	bf00      	nop
 8000ca0:	10320000 	.word	0x10320000
 8000ca4:	10310000 	.word	0x10310000
 8000ca8:	10220000 	.word	0x10220000
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	10120000 	.word	0x10120000
 8000cb4:	10110000 	.word	0x10110000
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010000 	.word	0x40010000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40011400 	.word	0x40011400
 8000cd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_GPIO_Init+0x304>)
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	4909      	ldr	r1, [pc, #36]	; (8000d04 <HAL_GPIO_Init+0x304>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f47f ae8e 	bne.w	8000a14 <HAL_GPIO_Init+0x14>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	372c      	adds	r7, #44	; 0x2c
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e001      	b.n	8000d2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	807b      	strh	r3, [r7, #2]
 8000d42:	4613      	mov	r3, r2
 8000d44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d46:	787b      	ldrb	r3, [r7, #1]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d4c:	887a      	ldrh	r2, [r7, #2]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d52:	e003      	b.n	8000d5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	041a      	lsls	r2, r3, #16
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	611a      	str	r2, [r3, #16]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d78:	887a      	ldrh	r2, [r7, #2]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	041a      	lsls	r2, r3, #16
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	400b      	ands	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	611a      	str	r2, [r3, #16]
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	4013      	ands	r3, r2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fde1 	bl	800197e <HAL_GPIO_EXTI_Callback>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40010400 	.word	0x40010400

08000dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e272      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8087 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de8:	4b92      	ldr	r3, [pc, #584]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d00c      	beq.n	8000e0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000df4:	4b8f      	ldr	r3, [pc, #572]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d112      	bne.n	8000e26 <HAL_RCC_OscConfig+0x5e>
 8000e00:	4b8c      	ldr	r3, [pc, #560]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0c:	d10b      	bne.n	8000e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0e:	4b89      	ldr	r3, [pc, #548]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d06c      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x12c>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d168      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e24c      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x76>
 8000e30:	4b80      	ldr	r3, [pc, #512]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a7f      	ldr	r2, [pc, #508]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e02e      	b.n	8000e9c <HAL_RCC_OscConfig+0xd4>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x98>
 8000e46:	4b7b      	ldr	r3, [pc, #492]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a7a      	ldr	r2, [pc, #488]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	4b78      	ldr	r3, [pc, #480]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a77      	ldr	r2, [pc, #476]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	e01d      	b.n	8000e9c <HAL_RCC_OscConfig+0xd4>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e68:	d10c      	bne.n	8000e84 <HAL_RCC_OscConfig+0xbc>
 8000e6a:	4b72      	ldr	r3, [pc, #456]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a71      	ldr	r2, [pc, #452]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	4b6f      	ldr	r3, [pc, #444]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a6e      	ldr	r2, [pc, #440]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e00b      	b.n	8000e9c <HAL_RCC_OscConfig+0xd4>
 8000e84:	4b6b      	ldr	r3, [pc, #428]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a6a      	ldr	r2, [pc, #424]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b68      	ldr	r3, [pc, #416]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a67      	ldr	r2, [pc, #412]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d013      	beq.n	8000ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fc36 	bl	8000714 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eac:	f7ff fc32 	bl	8000714 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b64      	cmp	r3, #100	; 0x64
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e200      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebe:	4b5d      	ldr	r3, [pc, #372]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f0      	beq.n	8000eac <HAL_RCC_OscConfig+0xe4>
 8000eca:	e014      	b.n	8000ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fc22 	bl	8000714 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fc1e 	bl	8000714 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b64      	cmp	r3, #100	; 0x64
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e1ec      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee6:	4b53      	ldr	r3, [pc, #332]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x10c>
 8000ef2:	e000      	b.n	8000ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d063      	beq.n	8000fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f02:	4b4c      	ldr	r3, [pc, #304]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00b      	beq.n	8000f26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f0e:	4b49      	ldr	r3, [pc, #292]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d11c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x18c>
 8000f1a:	4b46      	ldr	r3, [pc, #280]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d116      	bne.n	8000f54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	4b43      	ldr	r3, [pc, #268]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <HAL_RCC_OscConfig+0x176>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d001      	beq.n	8000f3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e1c0      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4939      	ldr	r1, [pc, #228]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f52:	e03a      	b.n	8000fca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d020      	beq.n	8000f9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fbd7 	bl	8000714 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fbd3 	bl	8000714 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e1a1      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	4927      	ldr	r1, [pc, #156]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	600b      	str	r3, [r1, #0]
 8000f9c:	e015      	b.n	8000fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fbb6 	bl	8000714 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fac:	f7ff fbb2 	bl	8000714 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e180      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d03a      	beq.n	800104c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d019      	beq.n	8001012 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_RCC_OscConfig+0x274>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fb96 	bl	8000714 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fb92 	bl	8000714 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e160      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_RCC_OscConfig+0x26c>)
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f000 fad8 	bl	80015c0 <RCC_Delay>
 8001010:	e01c      	b.n	800104c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_RCC_OscConfig+0x274>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001018:	f7ff fb7c 	bl	8000714 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800101e:	e00f      	b.n	8001040 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001020:	f7ff fb78 	bl	8000714 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d908      	bls.n	8001040 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e146      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000
 8001038:	42420000 	.word	0x42420000
 800103c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	4b92      	ldr	r3, [pc, #584]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e9      	bne.n	8001020 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80a6 	beq.w	80011a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800105e:	4b8b      	ldr	r3, [pc, #556]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10d      	bne.n	8001086 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b88      	ldr	r3, [pc, #544]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a87      	ldr	r2, [pc, #540]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b85      	ldr	r3, [pc, #532]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001082:	2301      	movs	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001086:	4b82      	ldr	r3, [pc, #520]	; (8001290 <HAL_RCC_OscConfig+0x4c8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	2b00      	cmp	r3, #0
 8001090:	d118      	bne.n	80010c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001092:	4b7f      	ldr	r3, [pc, #508]	; (8001290 <HAL_RCC_OscConfig+0x4c8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7e      	ldr	r2, [pc, #504]	; (8001290 <HAL_RCC_OscConfig+0x4c8>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800109e:	f7ff fb39 	bl	8000714 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a6:	f7ff fb35 	bl	8000714 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e103      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b8:	4b75      	ldr	r3, [pc, #468]	; (8001290 <HAL_RCC_OscConfig+0x4c8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x312>
 80010cc:	4b6f      	ldr	r3, [pc, #444]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a6e      	ldr	r2, [pc, #440]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6213      	str	r3, [r2, #32]
 80010d8:	e02d      	b.n	8001136 <HAL_RCC_OscConfig+0x36e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x334>
 80010e2:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a69      	ldr	r2, [pc, #420]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a66      	ldr	r2, [pc, #408]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	f023 0304 	bic.w	r3, r3, #4
 80010f8:	6213      	str	r3, [r2, #32]
 80010fa:	e01c      	b.n	8001136 <HAL_RCC_OscConfig+0x36e>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b05      	cmp	r3, #5
 8001102:	d10c      	bne.n	800111e <HAL_RCC_OscConfig+0x356>
 8001104:	4b61      	ldr	r3, [pc, #388]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a60      	ldr	r2, [pc, #384]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	4b5e      	ldr	r3, [pc, #376]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4a5d      	ldr	r2, [pc, #372]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6213      	str	r3, [r2, #32]
 800111c:	e00b      	b.n	8001136 <HAL_RCC_OscConfig+0x36e>
 800111e:	4b5b      	ldr	r3, [pc, #364]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a5a      	ldr	r2, [pc, #360]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	6213      	str	r3, [r2, #32]
 800112a:	4b58      	ldr	r3, [pc, #352]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a57      	ldr	r2, [pc, #348]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d015      	beq.n	800116a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff fae9 	bl	8000714 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff fae5 	bl	8000714 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e0b1      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	4b4b      	ldr	r3, [pc, #300]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0ee      	beq.n	8001146 <HAL_RCC_OscConfig+0x37e>
 8001168:	e014      	b.n	8001194 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116a:	f7ff fad3 	bl	8000714 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001170:	e00a      	b.n	8001188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001172:	f7ff facf 	bl	8000714 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001180:	4293      	cmp	r3, r2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e09b      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1ee      	bne.n	8001172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d105      	bne.n	80011a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800119a:	4b3c      	ldr	r3, [pc, #240]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a3b      	ldr	r2, [pc, #236]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8087 	beq.w	80012be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d061      	beq.n	8001280 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d146      	bne.n	8001252 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <HAL_RCC_OscConfig+0x4cc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff faa3 	bl	8000714 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff fa9f 	bl	8000714 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e06d      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f0      	bne.n	80011d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d108      	bne.n	800120c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	4921      	ldr	r1, [pc, #132]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a19      	ldr	r1, [r3, #32]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	430b      	orrs	r3, r1
 800121e:	491b      	ldr	r1, [pc, #108]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_RCC_OscConfig+0x4cc>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fa73 	bl	8000714 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001232:	f7ff fa6f 	bl	8000714 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e03d      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x46a>
 8001250:	e035      	b.n	80012be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_RCC_OscConfig+0x4cc>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fa5c 	bl	8000714 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001260:	f7ff fa58 	bl	8000714 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e026      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_RCC_OscConfig+0x4c4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x498>
 800127e:	e01e      	b.n	80012be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d107      	bne.n	8001298 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e019      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
 800128c:	40021000 	.word	0x40021000
 8001290:	40007000 	.word	0x40007000
 8001294:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_OscConfig+0x500>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d001      	beq.n	80012be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e0d0      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d910      	bls.n	8001310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 0207 	bic.w	r2, r3, #7
 80012f6:	4965      	ldr	r1, [pc, #404]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0b8      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001328:	4b59      	ldr	r3, [pc, #356]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001340:	4b53      	ldr	r3, [pc, #332]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800134a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134c:	4b50      	ldr	r3, [pc, #320]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	494d      	ldr	r1, [pc, #308]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d040      	beq.n	80013ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d115      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e07f      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d107      	bne.n	800139a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e073      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e06b      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013aa:	4b39      	ldr	r3, [pc, #228]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f023 0203 	bic.w	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4936      	ldr	r1, [pc, #216]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013bc:	f7ff f9aa 	bl	8000714 <HAL_GetTick>
 80013c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c2:	e00a      	b.n	80013da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c4:	f7ff f9a6 	bl	8000714 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e053      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 020c 	and.w	r2, r3, #12
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1eb      	bne.n	80013c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d210      	bcs.n	800141c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 0207 	bic.w	r2, r3, #7
 8001402:	4922      	ldr	r1, [pc, #136]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e032      	b.n	8001482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4916      	ldr	r1, [pc, #88]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	490e      	ldr	r1, [pc, #56]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800145a:	f000 f821 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 800145e:	4602      	mov	r2, r0
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	490a      	ldr	r1, [pc, #40]	; (8001494 <HAL_RCC_ClockConfig+0x1c8>)
 800146c:	5ccb      	ldrb	r3, [r1, r3]
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_RCC_ClockConfig+0x1cc>)
 8001474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_ClockConfig+0x1d0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f908 	bl	8000690 <HAL_InitTick>

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40022000 	.word	0x40022000
 8001490:	40021000 	.word	0x40021000
 8001494:	08003270 	.word	0x08003270
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a0:	b490      	push	{r4, r7}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <HAL_RCC_GetSysClockFreq+0xac>)
 80014a8:	1d3c      	adds	r4, r7, #4
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014b0:	f240 2301 	movw	r3, #513	; 0x201
 80014b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d002      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x40>
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d003      	beq.n	80014e6 <HAL_RCC_GetSysClockFreq+0x46>
 80014de:	e02b      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014e2:	623b      	str	r3, [r7, #32]
      break;
 80014e4:	e02b      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	0c9b      	lsrs	r3, r3, #18
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3328      	adds	r3, #40	; 0x28
 80014f0:	443b      	add	r3, r7
 80014f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d012      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0c5b      	lsrs	r3, r3, #17
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	3328      	adds	r3, #40	; 0x28
 800150e:	443b      	add	r3, r7
 8001510:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001514:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_RCC_GetSysClockFreq+0xb4>)
 800151a:	fb03 f202 	mul.w	r2, r3, r2
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	fbb2 f3f3 	udiv	r3, r2, r3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
 8001526:	e004      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	623b      	str	r3, [r7, #32]
      break;
 8001536:	e002      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_RCC_GetSysClockFreq+0xb4>)
 800153a:	623b      	str	r3, [r7, #32]
      break;
 800153c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800153e:	6a3b      	ldr	r3, [r7, #32]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bc90      	pop	{r4, r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	080031e4 	.word	0x080031e4
 8001550:	40021000 	.word	0x40021000
 8001554:	007a1200 	.word	0x007a1200
 8001558:	003d0900 	.word	0x003d0900

0800155c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <HAL_RCC_GetHCLKFreq+0x10>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000000 	.word	0x20000000

08001570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001574:	f7ff fff2 	bl	800155c <HAL_RCC_GetHCLKFreq>
 8001578:	4602      	mov	r2, r0
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	4903      	ldr	r1, [pc, #12]	; (8001594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	08003280 	.word	0x08003280

08001598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800159c:	f7ff ffde 	bl	800155c <HAL_RCC_GetHCLKFreq>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	0adb      	lsrs	r3, r3, #11
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	4903      	ldr	r1, [pc, #12]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ae:	5ccb      	ldrb	r3, [r1, r3]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08003280 	.word	0x08003280

080015c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <RCC_Delay+0x34>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <RCC_Delay+0x38>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015dc:	bf00      	nop
  }
  while (Delay --);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f9      	bne.n	80015dc <RCC_Delay+0x1c>
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000000 	.word	0x20000000
 80015f8:	10624dd3 	.word	0x10624dd3

080015fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e03f      	b.n	800168e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe feea 	bl	80003fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2224      	movs	r2, #36	; 0x24
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800163e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f829 	bl	8001698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2220      	movs	r2, #32
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2220      	movs	r2, #32
 8001688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016d2:	f023 030c 	bic.w	r3, r3, #12
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	430b      	orrs	r3, r1
 80016de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699a      	ldr	r2, [r3, #24]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <UART_SetConfig+0x114>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d103      	bne.n	8001708 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001700:	f7ff ff4a 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	e002      	b.n	800170e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001708:	f7ff ff32 	bl	8001570 <HAL_RCC_GetPCLK1Freq>
 800170c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009a      	lsls	r2, r3, #2
 8001718:	441a      	add	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <UART_SetConfig+0x118>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	0119      	lsls	r1, r3, #4
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009a      	lsls	r2, r3, #2
 8001738:	441a      	add	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	fbb2 f2f3 	udiv	r2, r2, r3
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <UART_SetConfig+0x118>)
 8001746:	fba3 0302 	umull	r0, r3, r3, r2
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2064      	movs	r0, #100	; 0x64
 800174e:	fb00 f303 	mul.w	r3, r0, r3
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	3332      	adds	r3, #50	; 0x32
 8001758:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <UART_SetConfig+0x118>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001764:	4419      	add	r1, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009a      	lsls	r2, r3, #2
 8001770:	441a      	add	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fbb2 f2f3 	udiv	r2, r2, r3
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <UART_SetConfig+0x118>)
 800177e:	fba3 0302 	umull	r0, r3, r3, r2
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	fb00 f303 	mul.w	r3, r0, r3
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	3332      	adds	r3, #50	; 0x32
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <UART_SetConfig+0x118>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	f003 020f 	and.w	r2, r3, #15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	440a      	add	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40013800 	.word	0x40013800
 80017b0:	51eb851f 	.word	0x51eb851f

080017b4 <app_button_interrupt>:
#define APP_UART_BUFFER_MAX 	64

static bool app_started = false;
extern uint32_t delay;

void app_button_interrupt(void){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

	static uint32_t debouncing_time_ms = 0;
	if(!app_started)
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <app_button_interrupt+0x50>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f083 0301 	eor.w	r3, r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d11b      	bne.n	80017fe <app_button_interrupt+0x4a>
		return;

	if((hw_tick_ms_get() - debouncing_time_ms) >= APP_DEBOUNCING_TIME_MS){
 80017c6:	f000 f90b 	bl	80019e0 <hw_tick_ms_get>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <app_button_interrupt+0x54>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b31      	cmp	r3, #49	; 0x31
 80017d4:	d914      	bls.n	8001800 <app_button_interrupt+0x4c>
//		delay = (delay == 1000)? 100 : 1000;
		if(delay == 1000){
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <app_button_interrupt+0x58>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017de:	d104      	bne.n	80017ea <app_button_interrupt+0x36>
//			hw_uart_tx((uint8_t*)"led 1 on\n",9);
			hw_uart_tx((uint8_t*)"set timer 50\n",13);
 80017e0:	210d      	movs	r1, #13
 80017e2:	480b      	ldr	r0, [pc, #44]	; (8001810 <app_button_interrupt+0x5c>)
 80017e4:	f000 f8b0 	bl	8001948 <hw_uart_tx>
 80017e8:	e003      	b.n	80017f2 <app_button_interrupt+0x3e>
		}
		else{
			delay = 1000;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <app_button_interrupt+0x58>)
 80017ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017f0:	601a      	str	r2, [r3, #0]
//			hw_uart_tx((uint8_t*)"led 1 off\n",10);
		}
		debouncing_time_ms = hw_tick_ms_get();
 80017f2:	f000 f8f5 	bl	80019e0 <hw_tick_ms_get>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a03      	ldr	r2, [pc, #12]	; (8001808 <app_button_interrupt+0x54>)
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e000      	b.n	8001800 <app_button_interrupt+0x4c>
		return;
 80017fe:	bf00      	nop
	}
}
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000011c 	.word	0x2000011c
 8001808:	20000120 	.word	0x20000120
 800180c:	20000170 	.word	0x20000170
 8001810:	080031f4 	.word	0x080031f4

08001814 <app_tick_1ms>:
void app_tick_1ms(void){
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	if(!app_started)
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <app_tick_1ms+0x18>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f083 0301 	eor.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
		return;
}
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000011c 	.word	0x2000011c

08001830 <app_init>:

void app_init(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	shell_init();
 8001834:	f000 fb40 	bl	8001eb8 <shell_init>
	app_started = true;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <app_init+0x14>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000011c 	.word	0x2000011c

08001848 <app_loop>:

void app_loop(void){
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <cbf_put>:
	cb->cons = CBF_INC(cb->cons, cb->size); // vê se será pos+1 ou volta para a pos==0 no buffer circular

	return CBF_OK;
}

cbf_status_t cbf_put(cbf_t *cb, uint8_t c){
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
	uint16_t next_prod = CBF_INC(cb->prod, cb->size);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	3301      	adds	r3, #1
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	8892      	ldrh	r2, [r2, #4]
 800186c:	4293      	cmp	r3, r2
 800186e:	da05      	bge.n	800187c <cbf_put+0x28>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	e000      	b.n	800187e <cbf_put+0x2a>
 800187c:	2300      	movs	r3, #0
 800187e:	81fb      	strh	r3, [r7, #14]

	if(next_prod == cb->cons) // evitar de um dado sobreescrever um dado já existente no buffer circular, overrun
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	885b      	ldrh	r3, [r3, #2]
 8001884:	b29b      	uxth	r3, r3
 8001886:	89fa      	ldrh	r2, [r7, #14]
 8001888:	429a      	cmp	r2, r3
 800188a:	d101      	bne.n	8001890 <cbf_put+0x3c>
		return CBF_FULL;
 800188c:	2301      	movs	r3, #1
 800188e:	e00b      	b.n	80018a8 <cbf_put+0x54>

	cb->buffer[cb->prod] = c; // Na posição do produtor atual, colocar o dado c.
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	8812      	ldrh	r2, [r2, #0]
 8001898:	b292      	uxth	r2, r2
 800189a:	4413      	add	r3, r2
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	701a      	strb	r2, [r3, #0]
	cb->prod = next_prod;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	89fa      	ldrh	r2, [r7, #14]
 80018a4:	801a      	strh	r2, [r3, #0]

	return CBF_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
	...

080018b4 <hw_uart2_interrupt>:
	hw_uart_cbf = cbf;
	hw_uart_enable_interrupts();
}

// INTERRUPÇÃO - recepção
void hw_uart2_interrupt(void){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t sr;
	USART_TypeDef *h = huart2.Instance;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <hw_uart2_interrupt+0x58>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	60bb      	str	r3, [r7, #8]

	sr = h->SR;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 80018c6:	e005      	b.n	80018d4 <hw_uart2_interrupt+0x20>
		sr = h->SR;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
		c = h->DR;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	71fb      	strb	r3, [r7, #7]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f4      	bne.n	80018c8 <hw_uart2_interrupt+0x14>
	}

	// se sem erros e com dado recebido ... pegar o dado e colocar no buffer
	if(sr & UART_FLAG_RXNE){
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <hw_uart2_interrupt+0x50>
		c = h->DR;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	71fb      	strb	r3, [r7, #7]

		if(hw_uart_cbf)
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <hw_uart2_interrupt+0x5c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <hw_uart2_interrupt+0x50>
			cbf_put(hw_uart_cbf,c);
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <hw_uart2_interrupt+0x5c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ffa8 	bl	8001854 <cbf_put>
	}
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200000d0 	.word	0x200000d0
 8001910:	20000124 	.word	0x20000124

08001914 <hw_uart_tx_byte>:

// POOLING - transmissão
static void hw_uart_tx_byte(uint8_t c){
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *h = huart2.Instance; // USART_PORT
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <hw_uart_tx_byte+0x30>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60fb      	str	r3, [r7, #12]

	// garante que o shift register esteja vazio
	while(!(h->SR & UART_FLAG_TXE)){}
 8001924:	bf00      	nop
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f9      	beq.n	8001926 <hw_uart_tx_byte+0x12>
	h->DR = c;
 8001932:	79fa      	ldrb	r2, [r7, #7]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200000d0 	.word	0x200000d0

08001948 <hw_uart_tx>:

void hw_uart_tx(uint8_t *buffer, uint32_t size){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	for(size_t pos = 0; pos < size; pos++)
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e009      	b.n	800196c <hw_uart_tx+0x24>
		hw_uart_tx_byte(buffer[pos]);
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4413      	add	r3, r2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ffd7 	bl	8001914 <hw_uart_tx_byte>
	for(size_t pos = 0; pos < size; pos++)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d3f1      	bcc.n	8001958 <hw_uart_tx+0x10>
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_GPIO_EXTI_Callback>:

// ---------------------------------------------------- //

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_EXTI_Callback+0x14>
		app_button_interrupt();
 800198e:	f7ff ff11 	bl	80017b4 <app_button_interrupt>
	}
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <hw_button_state_get>:

bool hw_button_state_get(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
	GPIO_PinState button_state = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80019a2:	2101      	movs	r1, #1
 80019a4:	4807      	ldr	r0, [pc, #28]	; (80019c4 <hw_button_state_get+0x28>)
 80019a6:	f7ff f9af 	bl	8000d08 <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]

	if(button_state == GPIO_PIN_RESET)
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <hw_button_state_get+0x1c>
		return true;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <hw_button_state_get+0x1e>
	else
		return false;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40010800 	.word	0x40010800

080019c8 <hw_led_toggle>:

void hw_led_toggle(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80019cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <hw_led_toggle+0x14>)
 80019d2:	f7ff f9c8 	bl	8000d66 <HAL_GPIO_TogglePin>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40011000 	.word	0x40011000

080019e0 <hw_tick_ms_get>:

void hw_cpu_sleep(){
	__WFI();
}

uint32_t hw_tick_ms_get(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80019e4:	f7fe fe96 	bl	8000714 <HAL_GetTick>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <shell_tick_1ms>:

static bool shell_started = false;
static shell_ctrl_t shell_ctrl = {0};
volatile uint32_t delay;

void shell_tick_1ms(void){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	static uint32_t delay_cnt = 0;

	if(!shell_started)
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <shell_tick_1ms+0x38>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	f083 0301 	eor.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d110      	bne.n	8001a24 <shell_tick_1ms+0x34>
		return;

	delay_cnt++;
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <shell_tick_1ms+0x3c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <shell_tick_1ms+0x3c>)
 8001a0a:	6013      	str	r3, [r2, #0]

	if(delay_cnt >= delay){
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <shell_tick_1ms+0x3c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <shell_tick_1ms+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d306      	bcc.n	8001a26 <shell_tick_1ms+0x36>
		delay_cnt = 0;
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <shell_tick_1ms+0x3c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
		hw_led_toggle();
 8001a1e:	f7ff ffd3 	bl	80019c8 <hw_led_toggle>
 8001a22:	e000      	b.n	8001a26 <shell_tick_1ms+0x36>
		return;
 8001a24:	bf00      	nop
	}
}
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000128 	.word	0x20000128
 8001a2c:	20000174 	.word	0x20000174
 8001a30:	20000170 	.word	0x20000170

08001a34 <shell_uart_tx_byte>:

static void shell_uart_tx_byte(uint8_t c){
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *h = huart1.Instance;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <shell_uart_tx_byte+0x30>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60fb      	str	r3, [r7, #12]

	while(!(h->SR & UART_FLAG_TXE)) {}
 8001a44:	bf00      	nop
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f9      	beq.n	8001a46 <shell_uart_tx_byte+0x12>
	h->DR = c;
 8001a52:	79fa      	ldrb	r2, [r7, #7]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	605a      	str	r2, [r3, #4]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	2000008c 	.word	0x2000008c

08001a68 <shell_uart_tx>:

void shell_uart_tx(uint8_t *buffer, uint32_t size){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	for(size_t pos=0; pos<size; pos++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e009      	b.n	8001a8c <shell_uart_tx+0x24>
		shell_uart_tx_byte(buffer[pos]);
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ffd7 	bl	8001a34 <shell_uart_tx_byte>
	for(size_t pos=0; pos<size; pos++)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d3f1      	bcc.n	8001a78 <shell_uart_tx+0x10>
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <shell_parse_args>:

uint32_t shell_parse_args(uint8_t * const cmdline, uint32_t size, uint32_t *argc, uint8_t *argv[], uint32_t max_args){
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
	uint32_t n, m;

	n = m = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	617b      	str	r3, [r7, #20]
	*argc = 0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

	while(cmdline[n] != '\0'){
 8001abc:	e04d      	b.n	8001b5a <shell_parse_args+0xba>
		while(isspace(cmdline[n]) && n<size)
			cmdline[n++] = '\0';
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	617a      	str	r2, [r7, #20]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
		while(isspace(cmdline[n]) && n<size)
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a30      	ldr	r2, [pc, #192]	; (8001b98 <shell_parse_args+0xf8>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <shell_parse_args+0x4c>
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d3e8      	bcc.n	8001abe <shell_parse_args+0x1e>

		m = n;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]

		while(!isspace(cmdline[n]) && (n<size) && (cmdline[n] != '\0'))
 8001af0:	e002      	b.n	8001af8 <shell_parse_args+0x58>
			n++;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
		while(!isspace(cmdline[n]) && (n<size) && (cmdline[n] != '\0'))
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <shell_parse_args+0xf8>)
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <shell_parse_args+0x84>
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d205      	bcs.n	8001b24 <shell_parse_args+0x84>
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1e6      	bne.n	8001af2 <shell_parse_args+0x52>

		if((n>=size) || (*argc >= max_args) || (m==n))
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d21c      	bcs.n	8001b66 <shell_parse_args+0xc6>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a3a      	ldr	r2, [r7, #32]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d917      	bls.n	8001b66 <shell_parse_args+0xc6>
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d013      	beq.n	8001b66 <shell_parse_args+0xc6>
			break;

		argv[*argc] = cmdline + m;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	440a      	add	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
		*argc += 1;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	601a      	str	r2, [r3, #0]
	while(cmdline[n] != '\0'){
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1b2      	bne.n	8001acc <shell_parse_args+0x2c>
	}

	for(n = *argc; n<max_args; n++)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e008      	b.n	8001b80 <shell_parse_args+0xe0>
		argv[n] = '\0';
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
	for(n = *argc; n<max_args; n++)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d3f2      	bcc.n	8001b6e <shell_parse_args+0xce>

	return *argc;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	08003288 	.word	0x08003288

08001b9c <shell_process>:

void shell_process(void){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af02      	add	r7, sp, #8
	uint32_t argc;
	uint8_t *argv[SHELL_MAX_ARGS];
	bool error = true;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(shell_parse_args(shell_ctrl.cmd, shell_ctrl.size, &argc, (uint8_t **)argv, SHELL_MAX_ARGS)){
 8001ba8:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <shell_process+0x1cc>)
 8001baa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	f107 0220 	add.w	r2, r7, #32
 8001bb4:	2005      	movs	r0, #5
 8001bb6:	9000      	str	r0, [sp, #0]
 8001bb8:	486b      	ldr	r0, [pc, #428]	; (8001d68 <shell_process+0x1cc>)
 8001bba:	f7ff ff71 	bl	8001aa0 <shell_parse_args>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80c1 	beq.w	8001d48 <shell_process+0x1ac>
		if(argc == 3){
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d174      	bne.n	8001cb6 <shell_process+0x11a>
			if((strncmp("set", (char*)argv[0],3) == 0) && (strncmp("time", (char*)argv[1],4) == 0)){
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4866      	ldr	r0, [pc, #408]	; (8001d6c <shell_process+0x1d0>)
 8001bd4:	f000 fa04 	bl	8001fe0 <strncmp>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d125      	bne.n	8001c2a <shell_process+0x8e>
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2204      	movs	r2, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4862      	ldr	r0, [pc, #392]	; (8001d70 <shell_process+0x1d4>)
 8001be6:	f000 f9fb 	bl	8001fe0 <strncmp>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11c      	bne.n	8001c2a <shell_process+0x8e>
				int time_ms = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]

				if(sscanf((char*)argv[2], "%d",&time_ms) == 1){
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f107 0208 	add.w	r2, r7, #8
 8001bfa:	495e      	ldr	r1, [pc, #376]	; (8001d74 <shell_process+0x1d8>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f9c3 	bl	8001f88 <siscanf>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	f040 809e 	bne.w	8001d46 <shell_process+0x1aa>
					if(time_ms > 0){
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f340 809a 	ble.w	8001d46 <shell_process+0x1aa>
						delay = time_ms;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <shell_process+0x1dc>)
 8001c18:	601a      	str	r2, [r3, #0]
						shell_uart_tx((uint8_t*)"ok\n",3);
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	4857      	ldr	r0, [pc, #348]	; (8001d7c <shell_process+0x1e0>)
 8001c1e:	f7ff ff23 	bl	8001a68 <shell_uart_tx>
						error = false;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if((strncmp("set", (char*)argv[0],3) == 0) && (strncmp("time", (char*)argv[1],4) == 0)){
 8001c28:	e08d      	b.n	8001d46 <shell_process+0x1aa>
					}
				}
			}
			else if((strncmp("led", (char*)argv[0],3) == 0) && (strncmp("time", (char*)argv[1],4) == 0)){
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4853      	ldr	r0, [pc, #332]	; (8001d80 <shell_process+0x1e4>)
 8001c32:	f000 f9d5 	bl	8001fe0 <strncmp>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 8085 	bne.w	8001d48 <shell_process+0x1ac>
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2204      	movs	r2, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	484a      	ldr	r0, [pc, #296]	; (8001d70 <shell_process+0x1d4>)
 8001c46:	f000 f9cb 	bl	8001fe0 <strncmp>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d17b      	bne.n	8001d48 <shell_process+0x1ac>
				int n = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]

				if(sscanf((char*)argv[1], "%d",&n)){
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1d3a      	adds	r2, r7, #4
 8001c58:	4946      	ldr	r1, [pc, #280]	; (8001d74 <shell_process+0x1d8>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f994 	bl	8001f88 <siscanf>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d070      	beq.n	8001d48 <shell_process+0x1ac>
					if(strncmp("on", (char*)argv[2],3) == 0){
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4846      	ldr	r0, [pc, #280]	; (8001d84 <shell_process+0x1e8>)
 8001c6c:	f7fe fa6e 	bl	800014c <strcmp>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <shell_process+0xf0>
//						hw_led_state_set(true);
						delay = 100;
 8001c76:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <shell_process+0x1dc>)
 8001c78:	2264      	movs	r2, #100	; 0x64
 8001c7a:	601a      	str	r2, [r3, #0]
						shell_uart_tx((uint8_t*)"led 1 on\n",9);
 8001c7c:	2109      	movs	r1, #9
 8001c7e:	4842      	ldr	r0, [pc, #264]	; (8001d88 <shell_process+0x1ec>)
 8001c80:	f7ff fef2 	bl	8001a68 <shell_uart_tx>
						error = false;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c8a:	e05d      	b.n	8001d48 <shell_process+0x1ac>
					}
					else if(strncmp("off", (char*)argv[2],3) == 0){
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	4619      	mov	r1, r3
 8001c92:	483e      	ldr	r0, [pc, #248]	; (8001d8c <shell_process+0x1f0>)
 8001c94:	f000 f9a4 	bl	8001fe0 <strncmp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d154      	bne.n	8001d48 <shell_process+0x1ac>
//						hw_led_state_set(false);
						delay = 1000;
 8001c9e:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <shell_process+0x1dc>)
 8001ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca4:	601a      	str	r2, [r3, #0]
						shell_uart_tx((uint8_t*)"led 1 off\n",100);
 8001ca6:	2164      	movs	r1, #100	; 0x64
 8001ca8:	4839      	ldr	r0, [pc, #228]	; (8001d90 <shell_process+0x1f4>)
 8001caa:	f7ff fedd 	bl	8001a68 <shell_uart_tx>
						error = false;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cb4:	e048      	b.n	8001d48 <shell_process+0x1ac>
					}
				}
			}
		}else if(argc == 2){
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d145      	bne.n	8001d48 <shell_process+0x1ac>
			if((strncmp("get", (char*)argv[0],3) == 0) && (strncmp("time", (char*)argv[1],4) == 0)){
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4834      	ldr	r0, [pc, #208]	; (8001d94 <shell_process+0x1f8>)
 8001cc4:	f000 f98c 	bl	8001fe0 <strncmp>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d11d      	bne.n	8001d0a <shell_process+0x16e>
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4826      	ldr	r0, [pc, #152]	; (8001d70 <shell_process+0x1d4>)
 8001cd6:	f000 f983 	bl	8001fe0 <strncmp>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d114      	bne.n	8001d0a <shell_process+0x16e>
				shell_ctrl.size = sprintf((char*)shell_ctrl.cmd, "time %u\n",(unsigned int)delay);
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <shell_process+0x1dc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	492c      	ldr	r1, [pc, #176]	; (8001d98 <shell_process+0x1fc>)
 8001ce8:	481f      	ldr	r0, [pc, #124]	; (8001d68 <shell_process+0x1cc>)
 8001cea:	f000 f92d 	bl	8001f48 <siprintf>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <shell_process+0x1cc>)
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
				shell_uart_tx(shell_ctrl.cmd, shell_ctrl.size);
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <shell_process+0x1cc>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481a      	ldr	r0, [pc, #104]	; (8001d68 <shell_process+0x1cc>)
 8001cfe:	f7ff feb3 	bl	8001a68 <shell_uart_tx>
				error = false;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d08:	e01e      	b.n	8001d48 <shell_process+0x1ac>
			}
			else if(strncmp("bot", (char*)argv[0],3) == 0){
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4822      	ldr	r0, [pc, #136]	; (8001d9c <shell_process+0x200>)
 8001d12:	f000 f965 	bl	8001fe0 <strncmp>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d115      	bne.n	8001d48 <shell_process+0x1ac>
				int n = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	603b      	str	r3, [r7, #0]

				if(sscanf((char*)argv[1], "%d",&n)){
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	463a      	mov	r2, r7
 8001d24:	4913      	ldr	r1, [pc, #76]	; (8001d74 <shell_process+0x1d8>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f92e 	bl	8001f88 <siscanf>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <shell_process+0x1ac>
					hw_button_state_get();
 8001d32:	f7ff fe33 	bl	800199c <hw_button_state_get>
					shell_uart_tx((uint8_t*)"bot 1 off\n",10);
 8001d36:	210a      	movs	r1, #10
 8001d38:	4819      	ldr	r0, [pc, #100]	; (8001da0 <shell_process+0x204>)
 8001d3a:	f7ff fe95 	bl	8001a68 <shell_uart_tx>
					error = false;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d44:	e000      	b.n	8001d48 <shell_process+0x1ac>
			if((strncmp("set", (char*)argv[0],3) == 0) && (strncmp("time", (char*)argv[1],4) == 0)){
 8001d46:	bf00      	nop
				}
			}
		}
	}

	if(error){
 8001d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <shell_process+0x1c2>
		shell_uart_tx((uint8_t*)"error\n",6);
 8001d50:	2106      	movs	r1, #6
 8001d52:	4814      	ldr	r0, [pc, #80]	; (8001da4 <shell_process+0x208>)
 8001d54:	f7ff fe88 	bl	8001a68 <shell_uart_tx>
		error = false;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000012c 	.word	0x2000012c
 8001d6c:	08003204 	.word	0x08003204
 8001d70:	08003208 	.word	0x08003208
 8001d74:	08003210 	.word	0x08003210
 8001d78:	20000170 	.word	0x20000170
 8001d7c:	08003214 	.word	0x08003214
 8001d80:	08003218 	.word	0x08003218
 8001d84:	0800321c 	.word	0x0800321c
 8001d88:	08003220 	.word	0x08003220
 8001d8c:	0800322c 	.word	0x0800322c
 8001d90:	08003230 	.word	0x08003230
 8001d94:	0800323c 	.word	0x0800323c
 8001d98:	08003240 	.word	0x08003240
 8001d9c:	0800324c 	.word	0x0800324c
 8001da0:	08003250 	.word	0x08003250
 8001da4:	0800325c 	.word	0x0800325c

08001da8 <shell_add_byte>:

void shell_add_byte(uint8_t c){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
	shell_ctrl.cmd[shell_ctrl.size++] = c;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <shell_add_byte+0x50>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	490f      	ldr	r1, [pc, #60]	; (8001df8 <shell_add_byte+0x50>)
 8001dba:	640a      	str	r2, [r1, #64]	; 0x40
 8001dbc:	490e      	ldr	r1, [pc, #56]	; (8001df8 <shell_add_byte+0x50>)
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	54ca      	strb	r2, [r1, r3]

	if(c == '\n'){ // indicar fim do comando após o enter
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b0a      	cmp	r3, #10
 8001dc6:	d10b      	bne.n	8001de0 <shell_add_byte+0x38>
		shell_ctrl.cmd[shell_ctrl.size-1] = '\0';
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <shell_add_byte+0x50>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <shell_add_byte+0x50>)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	54d1      	strb	r1, [r2, r3]
		shell_process();
 8001dd4:	f7ff fee2 	bl	8001b9c <shell_process>
		shell_ctrl.size = 0;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <shell_add_byte+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
	}else{
		if(shell_ctrl.size >= SHELL_UART_BUFFER_MAX)
			shell_ctrl.size = 0;
	}
}
 8001dde:	e006      	b.n	8001dee <shell_add_byte+0x46>
		if(shell_ctrl.size >= SHELL_UART_BUFFER_MAX)
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <shell_add_byte+0x50>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	2b3f      	cmp	r3, #63	; 0x3f
 8001de6:	d902      	bls.n	8001dee <shell_add_byte+0x46>
			shell_ctrl.size = 0;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <shell_add_byte+0x50>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000012c 	.word	0x2000012c

08001dfc <shell_uart_interrupt>:

void shell_uart_interrupt(void){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t sr;
	USART_TypeDef *h = huart1.Instance; // para o shell q está na uart1
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <shell_uart_interrupt+0x54>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60bb      	str	r3, [r7, #8]

	sr = h->SR;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 8001e0e:	e005      	b.n	8001e1c <shell_uart_interrupt+0x20>
		sr = h->SR;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
		c = h->DR;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	71fb      	strb	r3, [r7, #7]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f4      	bne.n	8001e10 <shell_uart_interrupt+0x14>
	}

	// se sem erros e com dado recebido ... pegar o dado e colocar no buffer
	if(sr & UART_FLAG_RXNE){
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <shell_uart_interrupt+0x4a>
		c = h->DR;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	71fb      	strb	r3, [r7, #7]

		if(shell_started)
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <shell_uart_interrupt+0x58>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <shell_uart_interrupt+0x4a>
			shell_add_byte(c);
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ffb1 	bl	8001da8 <shell_add_byte>
	}
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000008c 	.word	0x2000008c
 8001e54:	20000128 	.word	0x20000128

08001e58 <shell_disable_interrupts>:

void shell_disable_interrupts(void){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001e5c:	2025      	movs	r0, #37	; 0x25
 8001e5e:	f7fe fda6 	bl	80009ae <HAL_NVIC_DisableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <shell_enable_interrupts>:

void shell_enable_interrupts(void){
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2103      	movs	r1, #3
 8001e6e:	2025      	movs	r0, #37	; 0x25
 8001e70:	f7fe fd73 	bl	800095a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e74:	2025      	movs	r0, #37	; 0x25
 8001e76:	f7fe fd8c 	bl	8000992 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 8001e7a:	2025      	movs	r0, #37	; 0x25
 8001e7c:	f7fe fdb1 	bl	80009e2 <HAL_NVIC_ClearPendingIRQ>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <shell_uart_init>:

void shell_uart_init(void){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	shell_disable_interrupts();
 8001e88:	f7ff ffe6 	bl	8001e58 <shell_disable_interrupts>

	huart1.Instance->CR3 |= USART_CR3_EIE;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <shell_uart_init+0x30>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <shell_uart_init+0x30>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	615a      	str	r2, [r3, #20]
	huart1.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <shell_uart_init+0x30>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <shell_uart_init+0x30>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001eaa:	60da      	str	r2, [r3, #12]

	shell_enable_interrupts();
 8001eac:	f7ff ffdb 	bl	8001e66 <shell_enable_interrupts>
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000008c 	.word	0x2000008c

08001eb8 <shell_init>:

void shell_init(void){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	shell_ctrl.size = 0;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <shell_init+0x20>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
	delay = 1000;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <shell_init+0x24>)
 8001ec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec8:	601a      	str	r2, [r3, #0]
	shell_uart_init();
 8001eca:	f7ff ffdb 	bl	8001e84 <shell_uart_init>

	shell_started = true;
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <shell_init+0x28>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	2000012c 	.word	0x2000012c
 8001edc:	20000170 	.word	0x20000170
 8001ee0:	20000128 	.word	0x20000128

08001ee4 <__errno>:
 8001ee4:	4b01      	ldr	r3, [pc, #4]	; (8001eec <__errno+0x8>)
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2000000c 	.word	0x2000000c

08001ef0 <__libc_init_array>:
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	2600      	movs	r6, #0
 8001ef4:	4d0c      	ldr	r5, [pc, #48]	; (8001f28 <__libc_init_array+0x38>)
 8001ef6:	4c0d      	ldr	r4, [pc, #52]	; (8001f2c <__libc_init_array+0x3c>)
 8001ef8:	1b64      	subs	r4, r4, r5
 8001efa:	10a4      	asrs	r4, r4, #2
 8001efc:	42a6      	cmp	r6, r4
 8001efe:	d109      	bne.n	8001f14 <__libc_init_array+0x24>
 8001f00:	f001 f964 	bl	80031cc <_init>
 8001f04:	2600      	movs	r6, #0
 8001f06:	4d0a      	ldr	r5, [pc, #40]	; (8001f30 <__libc_init_array+0x40>)
 8001f08:	4c0a      	ldr	r4, [pc, #40]	; (8001f34 <__libc_init_array+0x44>)
 8001f0a:	1b64      	subs	r4, r4, r5
 8001f0c:	10a4      	asrs	r4, r4, #2
 8001f0e:	42a6      	cmp	r6, r4
 8001f10:	d105      	bne.n	8001f1e <__libc_init_array+0x2e>
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
 8001f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f18:	4798      	blx	r3
 8001f1a:	3601      	adds	r6, #1
 8001f1c:	e7ee      	b.n	8001efc <__libc_init_array+0xc>
 8001f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f22:	4798      	blx	r3
 8001f24:	3601      	adds	r6, #1
 8001f26:	e7f2      	b.n	8001f0e <__libc_init_array+0x1e>
 8001f28:	08003438 	.word	0x08003438
 8001f2c:	08003438 	.word	0x08003438
 8001f30:	08003438 	.word	0x08003438
 8001f34:	0800343c 	.word	0x0800343c

08001f38 <memset>:
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4402      	add	r2, r0
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d100      	bne.n	8001f42 <memset+0xa>
 8001f40:	4770      	bx	lr
 8001f42:	f803 1b01 	strb.w	r1, [r3], #1
 8001f46:	e7f9      	b.n	8001f3c <memset+0x4>

08001f48 <siprintf>:
 8001f48:	b40e      	push	{r1, r2, r3}
 8001f4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f4e:	b500      	push	{lr}
 8001f50:	b09c      	sub	sp, #112	; 0x70
 8001f52:	ab1d      	add	r3, sp, #116	; 0x74
 8001f54:	9002      	str	r0, [sp, #8]
 8001f56:	9006      	str	r0, [sp, #24]
 8001f58:	9107      	str	r1, [sp, #28]
 8001f5a:	9104      	str	r1, [sp, #16]
 8001f5c:	4808      	ldr	r0, [pc, #32]	; (8001f80 <siprintf+0x38>)
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <siprintf+0x3c>)
 8001f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f64:	9105      	str	r1, [sp, #20]
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	a902      	add	r1, sp, #8
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	f000 f8a8 	bl	80020c0 <_svfiprintf_r>
 8001f70:	2200      	movs	r2, #0
 8001f72:	9b02      	ldr	r3, [sp, #8]
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	b01c      	add	sp, #112	; 0x70
 8001f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f7c:	b003      	add	sp, #12
 8001f7e:	4770      	bx	lr
 8001f80:	2000000c 	.word	0x2000000c
 8001f84:	ffff0208 	.word	0xffff0208

08001f88 <siscanf>:
 8001f88:	b40e      	push	{r1, r2, r3}
 8001f8a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001f8e:	b530      	push	{r4, r5, lr}
 8001f90:	b09c      	sub	sp, #112	; 0x70
 8001f92:	ac1f      	add	r4, sp, #124	; 0x7c
 8001f94:	f854 5b04 	ldr.w	r5, [r4], #4
 8001f98:	f8ad 2014 	strh.w	r2, [sp, #20]
 8001f9c:	9002      	str	r0, [sp, #8]
 8001f9e:	9006      	str	r0, [sp, #24]
 8001fa0:	f7fe f8de 	bl	8000160 <strlen>
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <siscanf+0x4c>)
 8001fa6:	9003      	str	r0, [sp, #12]
 8001fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001faa:	2300      	movs	r3, #0
 8001fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8001fae:	9314      	str	r3, [sp, #80]	; 0x50
 8001fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb4:	9007      	str	r0, [sp, #28]
 8001fb6:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <siscanf+0x50>)
 8001fb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001fbc:	462a      	mov	r2, r5
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	a902      	add	r1, sp, #8
 8001fc2:	6800      	ldr	r0, [r0, #0]
 8001fc4:	9401      	str	r4, [sp, #4]
 8001fc6:	f000 f9d5 	bl	8002374 <__ssvfiscanf_r>
 8001fca:	b01c      	add	sp, #112	; 0x70
 8001fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001fd0:	b003      	add	sp, #12
 8001fd2:	4770      	bx	lr
 8001fd4:	08001fdd 	.word	0x08001fdd
 8001fd8:	2000000c 	.word	0x2000000c

08001fdc <__seofread>:
 8001fdc:	2000      	movs	r0, #0
 8001fde:	4770      	bx	lr

08001fe0 <strncmp>:
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	b510      	push	{r4, lr}
 8001fe4:	b172      	cbz	r2, 8002004 <strncmp+0x24>
 8001fe6:	3901      	subs	r1, #1
 8001fe8:	1884      	adds	r4, r0, r2
 8001fea:	f813 0b01 	ldrb.w	r0, [r3], #1
 8001fee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	d101      	bne.n	8001ffa <strncmp+0x1a>
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	d101      	bne.n	8001ffe <strncmp+0x1e>
 8001ffa:	1a80      	subs	r0, r0, r2
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	2800      	cmp	r0, #0
 8002000:	d1f3      	bne.n	8001fea <strncmp+0xa>
 8002002:	e7fa      	b.n	8001ffa <strncmp+0x1a>
 8002004:	4610      	mov	r0, r2
 8002006:	e7f9      	b.n	8001ffc <strncmp+0x1c>

08002008 <__ssputs_r>:
 8002008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800200c:	688e      	ldr	r6, [r1, #8]
 800200e:	4682      	mov	sl, r0
 8002010:	429e      	cmp	r6, r3
 8002012:	460c      	mov	r4, r1
 8002014:	4690      	mov	r8, r2
 8002016:	461f      	mov	r7, r3
 8002018:	d838      	bhi.n	800208c <__ssputs_r+0x84>
 800201a:	898a      	ldrh	r2, [r1, #12]
 800201c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002020:	d032      	beq.n	8002088 <__ssputs_r+0x80>
 8002022:	6825      	ldr	r5, [r4, #0]
 8002024:	6909      	ldr	r1, [r1, #16]
 8002026:	3301      	adds	r3, #1
 8002028:	eba5 0901 	sub.w	r9, r5, r1
 800202c:	6965      	ldr	r5, [r4, #20]
 800202e:	444b      	add	r3, r9
 8002030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002038:	106d      	asrs	r5, r5, #1
 800203a:	429d      	cmp	r5, r3
 800203c:	bf38      	it	cc
 800203e:	461d      	movcc	r5, r3
 8002040:	0553      	lsls	r3, r2, #21
 8002042:	d531      	bpl.n	80020a8 <__ssputs_r+0xa0>
 8002044:	4629      	mov	r1, r5
 8002046:	f000 fff9 	bl	800303c <_malloc_r>
 800204a:	4606      	mov	r6, r0
 800204c:	b950      	cbnz	r0, 8002064 <__ssputs_r+0x5c>
 800204e:	230c      	movs	r3, #12
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f8ca 3000 	str.w	r3, [sl]
 8002058:	89a3      	ldrh	r3, [r4, #12]
 800205a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205e:	81a3      	strh	r3, [r4, #12]
 8002060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002064:	464a      	mov	r2, r9
 8002066:	6921      	ldr	r1, [r4, #16]
 8002068:	f000 ff58 	bl	8002f1c <memcpy>
 800206c:	89a3      	ldrh	r3, [r4, #12]
 800206e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002076:	81a3      	strh	r3, [r4, #12]
 8002078:	6126      	str	r6, [r4, #16]
 800207a:	444e      	add	r6, r9
 800207c:	6026      	str	r6, [r4, #0]
 800207e:	463e      	mov	r6, r7
 8002080:	6165      	str	r5, [r4, #20]
 8002082:	eba5 0509 	sub.w	r5, r5, r9
 8002086:	60a5      	str	r5, [r4, #8]
 8002088:	42be      	cmp	r6, r7
 800208a:	d900      	bls.n	800208e <__ssputs_r+0x86>
 800208c:	463e      	mov	r6, r7
 800208e:	4632      	mov	r2, r6
 8002090:	4641      	mov	r1, r8
 8002092:	6820      	ldr	r0, [r4, #0]
 8002094:	f000 ff50 	bl	8002f38 <memmove>
 8002098:	68a3      	ldr	r3, [r4, #8]
 800209a:	2000      	movs	r0, #0
 800209c:	1b9b      	subs	r3, r3, r6
 800209e:	60a3      	str	r3, [r4, #8]
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	4433      	add	r3, r6
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	e7db      	b.n	8002060 <__ssputs_r+0x58>
 80020a8:	462a      	mov	r2, r5
 80020aa:	f001 f83b 	bl	8003124 <_realloc_r>
 80020ae:	4606      	mov	r6, r0
 80020b0:	2800      	cmp	r0, #0
 80020b2:	d1e1      	bne.n	8002078 <__ssputs_r+0x70>
 80020b4:	4650      	mov	r0, sl
 80020b6:	6921      	ldr	r1, [r4, #16]
 80020b8:	f000 ff58 	bl	8002f6c <_free_r>
 80020bc:	e7c7      	b.n	800204e <__ssputs_r+0x46>
	...

080020c0 <_svfiprintf_r>:
 80020c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c4:	4698      	mov	r8, r3
 80020c6:	898b      	ldrh	r3, [r1, #12]
 80020c8:	4607      	mov	r7, r0
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	460d      	mov	r5, r1
 80020ce:	4614      	mov	r4, r2
 80020d0:	b09d      	sub	sp, #116	; 0x74
 80020d2:	d50e      	bpl.n	80020f2 <_svfiprintf_r+0x32>
 80020d4:	690b      	ldr	r3, [r1, #16]
 80020d6:	b963      	cbnz	r3, 80020f2 <_svfiprintf_r+0x32>
 80020d8:	2140      	movs	r1, #64	; 0x40
 80020da:	f000 ffaf 	bl	800303c <_malloc_r>
 80020de:	6028      	str	r0, [r5, #0]
 80020e0:	6128      	str	r0, [r5, #16]
 80020e2:	b920      	cbnz	r0, 80020ee <_svfiprintf_r+0x2e>
 80020e4:	230c      	movs	r3, #12
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	e0d1      	b.n	8002292 <_svfiprintf_r+0x1d2>
 80020ee:	2340      	movs	r3, #64	; 0x40
 80020f0:	616b      	str	r3, [r5, #20]
 80020f2:	2300      	movs	r3, #0
 80020f4:	9309      	str	r3, [sp, #36]	; 0x24
 80020f6:	2320      	movs	r3, #32
 80020f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020fc:	2330      	movs	r3, #48	; 0x30
 80020fe:	f04f 0901 	mov.w	r9, #1
 8002102:	f8cd 800c 	str.w	r8, [sp, #12]
 8002106:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80022ac <_svfiprintf_r+0x1ec>
 800210a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800210e:	4623      	mov	r3, r4
 8002110:	469a      	mov	sl, r3
 8002112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002116:	b10a      	cbz	r2, 800211c <_svfiprintf_r+0x5c>
 8002118:	2a25      	cmp	r2, #37	; 0x25
 800211a:	d1f9      	bne.n	8002110 <_svfiprintf_r+0x50>
 800211c:	ebba 0b04 	subs.w	fp, sl, r4
 8002120:	d00b      	beq.n	800213a <_svfiprintf_r+0x7a>
 8002122:	465b      	mov	r3, fp
 8002124:	4622      	mov	r2, r4
 8002126:	4629      	mov	r1, r5
 8002128:	4638      	mov	r0, r7
 800212a:	f7ff ff6d 	bl	8002008 <__ssputs_r>
 800212e:	3001      	adds	r0, #1
 8002130:	f000 80aa 	beq.w	8002288 <_svfiprintf_r+0x1c8>
 8002134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002136:	445a      	add	r2, fp
 8002138:	9209      	str	r2, [sp, #36]	; 0x24
 800213a:	f89a 3000 	ldrb.w	r3, [sl]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80a2 	beq.w	8002288 <_svfiprintf_r+0x1c8>
 8002144:	2300      	movs	r3, #0
 8002146:	f04f 32ff 	mov.w	r2, #4294967295
 800214a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800214e:	f10a 0a01 	add.w	sl, sl, #1
 8002152:	9304      	str	r3, [sp, #16]
 8002154:	9307      	str	r3, [sp, #28]
 8002156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800215a:	931a      	str	r3, [sp, #104]	; 0x68
 800215c:	4654      	mov	r4, sl
 800215e:	2205      	movs	r2, #5
 8002160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002164:	4851      	ldr	r0, [pc, #324]	; (80022ac <_svfiprintf_r+0x1ec>)
 8002166:	f000 fecb 	bl	8002f00 <memchr>
 800216a:	9a04      	ldr	r2, [sp, #16]
 800216c:	b9d8      	cbnz	r0, 80021a6 <_svfiprintf_r+0xe6>
 800216e:	06d0      	lsls	r0, r2, #27
 8002170:	bf44      	itt	mi
 8002172:	2320      	movmi	r3, #32
 8002174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002178:	0711      	lsls	r1, r2, #28
 800217a:	bf44      	itt	mi
 800217c:	232b      	movmi	r3, #43	; 0x2b
 800217e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002182:	f89a 3000 	ldrb.w	r3, [sl]
 8002186:	2b2a      	cmp	r3, #42	; 0x2a
 8002188:	d015      	beq.n	80021b6 <_svfiprintf_r+0xf6>
 800218a:	4654      	mov	r4, sl
 800218c:	2000      	movs	r0, #0
 800218e:	f04f 0c0a 	mov.w	ip, #10
 8002192:	9a07      	ldr	r2, [sp, #28]
 8002194:	4621      	mov	r1, r4
 8002196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800219a:	3b30      	subs	r3, #48	; 0x30
 800219c:	2b09      	cmp	r3, #9
 800219e:	d94e      	bls.n	800223e <_svfiprintf_r+0x17e>
 80021a0:	b1b0      	cbz	r0, 80021d0 <_svfiprintf_r+0x110>
 80021a2:	9207      	str	r2, [sp, #28]
 80021a4:	e014      	b.n	80021d0 <_svfiprintf_r+0x110>
 80021a6:	eba0 0308 	sub.w	r3, r0, r8
 80021aa:	fa09 f303 	lsl.w	r3, r9, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	46a2      	mov	sl, r4
 80021b2:	9304      	str	r3, [sp, #16]
 80021b4:	e7d2      	b.n	800215c <_svfiprintf_r+0x9c>
 80021b6:	9b03      	ldr	r3, [sp, #12]
 80021b8:	1d19      	adds	r1, r3, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	9103      	str	r1, [sp, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bfbb      	ittet	lt
 80021c2:	425b      	neglt	r3, r3
 80021c4:	f042 0202 	orrlt.w	r2, r2, #2
 80021c8:	9307      	strge	r3, [sp, #28]
 80021ca:	9307      	strlt	r3, [sp, #28]
 80021cc:	bfb8      	it	lt
 80021ce:	9204      	strlt	r2, [sp, #16]
 80021d0:	7823      	ldrb	r3, [r4, #0]
 80021d2:	2b2e      	cmp	r3, #46	; 0x2e
 80021d4:	d10c      	bne.n	80021f0 <_svfiprintf_r+0x130>
 80021d6:	7863      	ldrb	r3, [r4, #1]
 80021d8:	2b2a      	cmp	r3, #42	; 0x2a
 80021da:	d135      	bne.n	8002248 <_svfiprintf_r+0x188>
 80021dc:	9b03      	ldr	r3, [sp, #12]
 80021de:	3402      	adds	r4, #2
 80021e0:	1d1a      	adds	r2, r3, #4
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	9203      	str	r2, [sp, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bfb8      	it	lt
 80021ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80021ee:	9305      	str	r3, [sp, #20]
 80021f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80022b0 <_svfiprintf_r+0x1f0>
 80021f4:	2203      	movs	r2, #3
 80021f6:	4650      	mov	r0, sl
 80021f8:	7821      	ldrb	r1, [r4, #0]
 80021fa:	f000 fe81 	bl	8002f00 <memchr>
 80021fe:	b140      	cbz	r0, 8002212 <_svfiprintf_r+0x152>
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	eba0 000a 	sub.w	r0, r0, sl
 8002206:	fa03 f000 	lsl.w	r0, r3, r0
 800220a:	9b04      	ldr	r3, [sp, #16]
 800220c:	3401      	adds	r4, #1
 800220e:	4303      	orrs	r3, r0
 8002210:	9304      	str	r3, [sp, #16]
 8002212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002216:	2206      	movs	r2, #6
 8002218:	4826      	ldr	r0, [pc, #152]	; (80022b4 <_svfiprintf_r+0x1f4>)
 800221a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800221e:	f000 fe6f 	bl	8002f00 <memchr>
 8002222:	2800      	cmp	r0, #0
 8002224:	d038      	beq.n	8002298 <_svfiprintf_r+0x1d8>
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <_svfiprintf_r+0x1f8>)
 8002228:	bb1b      	cbnz	r3, 8002272 <_svfiprintf_r+0x1b2>
 800222a:	9b03      	ldr	r3, [sp, #12]
 800222c:	3307      	adds	r3, #7
 800222e:	f023 0307 	bic.w	r3, r3, #7
 8002232:	3308      	adds	r3, #8
 8002234:	9303      	str	r3, [sp, #12]
 8002236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002238:	4433      	add	r3, r6
 800223a:	9309      	str	r3, [sp, #36]	; 0x24
 800223c:	e767      	b.n	800210e <_svfiprintf_r+0x4e>
 800223e:	460c      	mov	r4, r1
 8002240:	2001      	movs	r0, #1
 8002242:	fb0c 3202 	mla	r2, ip, r2, r3
 8002246:	e7a5      	b.n	8002194 <_svfiprintf_r+0xd4>
 8002248:	2300      	movs	r3, #0
 800224a:	f04f 0c0a 	mov.w	ip, #10
 800224e:	4619      	mov	r1, r3
 8002250:	3401      	adds	r4, #1
 8002252:	9305      	str	r3, [sp, #20]
 8002254:	4620      	mov	r0, r4
 8002256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800225a:	3a30      	subs	r2, #48	; 0x30
 800225c:	2a09      	cmp	r2, #9
 800225e:	d903      	bls.n	8002268 <_svfiprintf_r+0x1a8>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0c5      	beq.n	80021f0 <_svfiprintf_r+0x130>
 8002264:	9105      	str	r1, [sp, #20]
 8002266:	e7c3      	b.n	80021f0 <_svfiprintf_r+0x130>
 8002268:	4604      	mov	r4, r0
 800226a:	2301      	movs	r3, #1
 800226c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002270:	e7f0      	b.n	8002254 <_svfiprintf_r+0x194>
 8002272:	ab03      	add	r3, sp, #12
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	462a      	mov	r2, r5
 8002278:	4638      	mov	r0, r7
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <_svfiprintf_r+0x1fc>)
 800227c:	a904      	add	r1, sp, #16
 800227e:	f3af 8000 	nop.w
 8002282:	1c42      	adds	r2, r0, #1
 8002284:	4606      	mov	r6, r0
 8002286:	d1d6      	bne.n	8002236 <_svfiprintf_r+0x176>
 8002288:	89ab      	ldrh	r3, [r5, #12]
 800228a:	065b      	lsls	r3, r3, #25
 800228c:	f53f af2c 	bmi.w	80020e8 <_svfiprintf_r+0x28>
 8002290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002292:	b01d      	add	sp, #116	; 0x74
 8002294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002298:	ab03      	add	r3, sp, #12
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	462a      	mov	r2, r5
 800229e:	4638      	mov	r0, r7
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <_svfiprintf_r+0x1fc>)
 80022a2:	a904      	add	r1, sp, #16
 80022a4:	f000 fa50 	bl	8002748 <_printf_i>
 80022a8:	e7eb      	b.n	8002282 <_svfiprintf_r+0x1c2>
 80022aa:	bf00      	nop
 80022ac:	08003389 	.word	0x08003389
 80022b0:	0800338f 	.word	0x0800338f
 80022b4:	08003393 	.word	0x08003393
 80022b8:	00000000 	.word	0x00000000
 80022bc:	08002009 	.word	0x08002009

080022c0 <_sungetc_r>:
 80022c0:	b538      	push	{r3, r4, r5, lr}
 80022c2:	1c4b      	adds	r3, r1, #1
 80022c4:	4614      	mov	r4, r2
 80022c6:	d103      	bne.n	80022d0 <_sungetc_r+0x10>
 80022c8:	f04f 35ff 	mov.w	r5, #4294967295
 80022cc:	4628      	mov	r0, r5
 80022ce:	bd38      	pop	{r3, r4, r5, pc}
 80022d0:	8993      	ldrh	r3, [r2, #12]
 80022d2:	b2cd      	uxtb	r5, r1
 80022d4:	f023 0320 	bic.w	r3, r3, #32
 80022d8:	8193      	strh	r3, [r2, #12]
 80022da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022dc:	6852      	ldr	r2, [r2, #4]
 80022de:	b18b      	cbz	r3, 8002304 <_sungetc_r+0x44>
 80022e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022e2:	4293      	cmp	r3, r2
 80022e4:	dd08      	ble.n	80022f8 <_sungetc_r+0x38>
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	6022      	str	r2, [r4, #0]
 80022ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80022f0:	6863      	ldr	r3, [r4, #4]
 80022f2:	3301      	adds	r3, #1
 80022f4:	6063      	str	r3, [r4, #4]
 80022f6:	e7e9      	b.n	80022cc <_sungetc_r+0xc>
 80022f8:	4621      	mov	r1, r4
 80022fa:	f000 fdc7 	bl	8002e8c <__submore>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d0f1      	beq.n	80022e6 <_sungetc_r+0x26>
 8002302:	e7e1      	b.n	80022c8 <_sungetc_r+0x8>
 8002304:	6921      	ldr	r1, [r4, #16]
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	b151      	cbz	r1, 8002320 <_sungetc_r+0x60>
 800230a:	4299      	cmp	r1, r3
 800230c:	d208      	bcs.n	8002320 <_sungetc_r+0x60>
 800230e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002312:	42a9      	cmp	r1, r5
 8002314:	d104      	bne.n	8002320 <_sungetc_r+0x60>
 8002316:	3b01      	subs	r3, #1
 8002318:	3201      	adds	r2, #1
 800231a:	6023      	str	r3, [r4, #0]
 800231c:	6062      	str	r2, [r4, #4]
 800231e:	e7d5      	b.n	80022cc <_sungetc_r+0xc>
 8002320:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002328:	6363      	str	r3, [r4, #52]	; 0x34
 800232a:	2303      	movs	r3, #3
 800232c:	63a3      	str	r3, [r4, #56]	; 0x38
 800232e:	4623      	mov	r3, r4
 8002330:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	2301      	movs	r3, #1
 8002338:	e7dc      	b.n	80022f4 <_sungetc_r+0x34>

0800233a <__ssrefill_r>:
 800233a:	b510      	push	{r4, lr}
 800233c:	460c      	mov	r4, r1
 800233e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002340:	b169      	cbz	r1, 800235e <__ssrefill_r+0x24>
 8002342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002346:	4299      	cmp	r1, r3
 8002348:	d001      	beq.n	800234e <__ssrefill_r+0x14>
 800234a:	f000 fe0f 	bl	8002f6c <_free_r>
 800234e:	2000      	movs	r0, #0
 8002350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002352:	6360      	str	r0, [r4, #52]	; 0x34
 8002354:	6063      	str	r3, [r4, #4]
 8002356:	b113      	cbz	r3, 800235e <__ssrefill_r+0x24>
 8002358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800235a:	6023      	str	r3, [r4, #0]
 800235c:	bd10      	pop	{r4, pc}
 800235e:	6923      	ldr	r3, [r4, #16]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	6023      	str	r3, [r4, #0]
 8002366:	2300      	movs	r3, #0
 8002368:	6063      	str	r3, [r4, #4]
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	f043 0320 	orr.w	r3, r3, #32
 8002370:	81a3      	strh	r3, [r4, #12]
 8002372:	e7f3      	b.n	800235c <__ssrefill_r+0x22>

08002374 <__ssvfiscanf_r>:
 8002374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002378:	460c      	mov	r4, r1
 800237a:	2100      	movs	r1, #0
 800237c:	4606      	mov	r6, r0
 800237e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002382:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002386:	49a7      	ldr	r1, [pc, #668]	; (8002624 <__ssvfiscanf_r+0x2b0>)
 8002388:	f10d 0804 	add.w	r8, sp, #4
 800238c:	91a0      	str	r1, [sp, #640]	; 0x280
 800238e:	49a6      	ldr	r1, [pc, #664]	; (8002628 <__ssvfiscanf_r+0x2b4>)
 8002390:	4fa6      	ldr	r7, [pc, #664]	; (800262c <__ssvfiscanf_r+0x2b8>)
 8002392:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8002630 <__ssvfiscanf_r+0x2bc>
 8002396:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800239a:	91a1      	str	r1, [sp, #644]	; 0x284
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	7813      	ldrb	r3, [r2, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 815c 	beq.w	800265e <__ssvfiscanf_r+0x2ea>
 80023a6:	5dd9      	ldrb	r1, [r3, r7]
 80023a8:	1c55      	adds	r5, r2, #1
 80023aa:	f011 0108 	ands.w	r1, r1, #8
 80023ae:	d019      	beq.n	80023e4 <__ssvfiscanf_r+0x70>
 80023b0:	6863      	ldr	r3, [r4, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	dd0f      	ble.n	80023d6 <__ssvfiscanf_r+0x62>
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	5cba      	ldrb	r2, [r7, r2]
 80023bc:	0712      	lsls	r2, r2, #28
 80023be:	d401      	bmi.n	80023c4 <__ssvfiscanf_r+0x50>
 80023c0:	462a      	mov	r2, r5
 80023c2:	e7ec      	b.n	800239e <__ssvfiscanf_r+0x2a>
 80023c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80023c6:	3301      	adds	r3, #1
 80023c8:	3201      	adds	r2, #1
 80023ca:	9245      	str	r2, [sp, #276]	; 0x114
 80023cc:	6862      	ldr	r2, [r4, #4]
 80023ce:	6023      	str	r3, [r4, #0]
 80023d0:	3a01      	subs	r2, #1
 80023d2:	6062      	str	r2, [r4, #4]
 80023d4:	e7ec      	b.n	80023b0 <__ssvfiscanf_r+0x3c>
 80023d6:	4621      	mov	r1, r4
 80023d8:	4630      	mov	r0, r6
 80023da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80023dc:	4798      	blx	r3
 80023de:	2800      	cmp	r0, #0
 80023e0:	d0e9      	beq.n	80023b6 <__ssvfiscanf_r+0x42>
 80023e2:	e7ed      	b.n	80023c0 <__ssvfiscanf_r+0x4c>
 80023e4:	2b25      	cmp	r3, #37	; 0x25
 80023e6:	d012      	beq.n	800240e <__ssvfiscanf_r+0x9a>
 80023e8:	469a      	mov	sl, r3
 80023ea:	6863      	ldr	r3, [r4, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f340 8094 	ble.w	800251a <__ssvfiscanf_r+0x1a6>
 80023f2:	6822      	ldr	r2, [r4, #0]
 80023f4:	7813      	ldrb	r3, [r2, #0]
 80023f6:	4553      	cmp	r3, sl
 80023f8:	f040 8131 	bne.w	800265e <__ssvfiscanf_r+0x2ea>
 80023fc:	6863      	ldr	r3, [r4, #4]
 80023fe:	3201      	adds	r2, #1
 8002400:	3b01      	subs	r3, #1
 8002402:	6063      	str	r3, [r4, #4]
 8002404:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002406:	6022      	str	r2, [r4, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	9345      	str	r3, [sp, #276]	; 0x114
 800240c:	e7d8      	b.n	80023c0 <__ssvfiscanf_r+0x4c>
 800240e:	9141      	str	r1, [sp, #260]	; 0x104
 8002410:	9143      	str	r1, [sp, #268]	; 0x10c
 8002412:	7853      	ldrb	r3, [r2, #1]
 8002414:	2b2a      	cmp	r3, #42	; 0x2a
 8002416:	bf04      	itt	eq
 8002418:	2310      	moveq	r3, #16
 800241a:	1c95      	addeq	r5, r2, #2
 800241c:	f04f 020a 	mov.w	r2, #10
 8002420:	bf08      	it	eq
 8002422:	9341      	streq	r3, [sp, #260]	; 0x104
 8002424:	46aa      	mov	sl, r5
 8002426:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800242a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800242e:	2b09      	cmp	r3, #9
 8002430:	d91d      	bls.n	800246e <__ssvfiscanf_r+0xfa>
 8002432:	2203      	movs	r2, #3
 8002434:	487e      	ldr	r0, [pc, #504]	; (8002630 <__ssvfiscanf_r+0x2bc>)
 8002436:	f000 fd63 	bl	8002f00 <memchr>
 800243a:	b140      	cbz	r0, 800244e <__ssvfiscanf_r+0xda>
 800243c:	2301      	movs	r3, #1
 800243e:	4655      	mov	r5, sl
 8002440:	eba0 0009 	sub.w	r0, r0, r9
 8002444:	fa03 f000 	lsl.w	r0, r3, r0
 8002448:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800244a:	4318      	orrs	r0, r3
 800244c:	9041      	str	r0, [sp, #260]	; 0x104
 800244e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002452:	2b78      	cmp	r3, #120	; 0x78
 8002454:	d806      	bhi.n	8002464 <__ssvfiscanf_r+0xf0>
 8002456:	2b57      	cmp	r3, #87	; 0x57
 8002458:	d810      	bhi.n	800247c <__ssvfiscanf_r+0x108>
 800245a:	2b25      	cmp	r3, #37	; 0x25
 800245c:	d0c4      	beq.n	80023e8 <__ssvfiscanf_r+0x74>
 800245e:	d857      	bhi.n	8002510 <__ssvfiscanf_r+0x19c>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d065      	beq.n	8002530 <__ssvfiscanf_r+0x1bc>
 8002464:	2303      	movs	r3, #3
 8002466:	9347      	str	r3, [sp, #284]	; 0x11c
 8002468:	230a      	movs	r3, #10
 800246a:	9342      	str	r3, [sp, #264]	; 0x108
 800246c:	e072      	b.n	8002554 <__ssvfiscanf_r+0x1e0>
 800246e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002470:	4655      	mov	r5, sl
 8002472:	fb02 1103 	mla	r1, r2, r3, r1
 8002476:	3930      	subs	r1, #48	; 0x30
 8002478:	9143      	str	r1, [sp, #268]	; 0x10c
 800247a:	e7d3      	b.n	8002424 <__ssvfiscanf_r+0xb0>
 800247c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002480:	2a20      	cmp	r2, #32
 8002482:	d8ef      	bhi.n	8002464 <__ssvfiscanf_r+0xf0>
 8002484:	a101      	add	r1, pc, #4	; (adr r1, 800248c <__ssvfiscanf_r+0x118>)
 8002486:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800248a:	bf00      	nop
 800248c:	0800253f 	.word	0x0800253f
 8002490:	08002465 	.word	0x08002465
 8002494:	08002465 	.word	0x08002465
 8002498:	0800259d 	.word	0x0800259d
 800249c:	08002465 	.word	0x08002465
 80024a0:	08002465 	.word	0x08002465
 80024a4:	08002465 	.word	0x08002465
 80024a8:	08002465 	.word	0x08002465
 80024ac:	08002465 	.word	0x08002465
 80024b0:	08002465 	.word	0x08002465
 80024b4:	08002465 	.word	0x08002465
 80024b8:	080025b3 	.word	0x080025b3
 80024bc:	08002589 	.word	0x08002589
 80024c0:	08002517 	.word	0x08002517
 80024c4:	08002517 	.word	0x08002517
 80024c8:	08002517 	.word	0x08002517
 80024cc:	08002465 	.word	0x08002465
 80024d0:	0800258d 	.word	0x0800258d
 80024d4:	08002465 	.word	0x08002465
 80024d8:	08002465 	.word	0x08002465
 80024dc:	08002465 	.word	0x08002465
 80024e0:	08002465 	.word	0x08002465
 80024e4:	080025c3 	.word	0x080025c3
 80024e8:	08002595 	.word	0x08002595
 80024ec:	08002537 	.word	0x08002537
 80024f0:	08002465 	.word	0x08002465
 80024f4:	08002465 	.word	0x08002465
 80024f8:	080025bf 	.word	0x080025bf
 80024fc:	08002465 	.word	0x08002465
 8002500:	08002589 	.word	0x08002589
 8002504:	08002465 	.word	0x08002465
 8002508:	08002465 	.word	0x08002465
 800250c:	0800253f 	.word	0x0800253f
 8002510:	3b45      	subs	r3, #69	; 0x45
 8002512:	2b02      	cmp	r3, #2
 8002514:	d8a6      	bhi.n	8002464 <__ssvfiscanf_r+0xf0>
 8002516:	2305      	movs	r3, #5
 8002518:	e01b      	b.n	8002552 <__ssvfiscanf_r+0x1de>
 800251a:	4621      	mov	r1, r4
 800251c:	4630      	mov	r0, r6
 800251e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002520:	4798      	blx	r3
 8002522:	2800      	cmp	r0, #0
 8002524:	f43f af65 	beq.w	80023f2 <__ssvfiscanf_r+0x7e>
 8002528:	9844      	ldr	r0, [sp, #272]	; 0x110
 800252a:	2800      	cmp	r0, #0
 800252c:	f040 808d 	bne.w	800264a <__ssvfiscanf_r+0x2d6>
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	e08f      	b.n	8002656 <__ssvfiscanf_r+0x2e2>
 8002536:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002538:	f042 0220 	orr.w	r2, r2, #32
 800253c:	9241      	str	r2, [sp, #260]	; 0x104
 800253e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002544:	9241      	str	r2, [sp, #260]	; 0x104
 8002546:	2210      	movs	r2, #16
 8002548:	2b6f      	cmp	r3, #111	; 0x6f
 800254a:	bf34      	ite	cc
 800254c:	2303      	movcc	r3, #3
 800254e:	2304      	movcs	r3, #4
 8002550:	9242      	str	r2, [sp, #264]	; 0x108
 8002552:	9347      	str	r3, [sp, #284]	; 0x11c
 8002554:	6863      	ldr	r3, [r4, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	dd42      	ble.n	80025e0 <__ssvfiscanf_r+0x26c>
 800255a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800255c:	0659      	lsls	r1, r3, #25
 800255e:	d404      	bmi.n	800256a <__ssvfiscanf_r+0x1f6>
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	5cba      	ldrb	r2, [r7, r2]
 8002566:	0712      	lsls	r2, r2, #28
 8002568:	d441      	bmi.n	80025ee <__ssvfiscanf_r+0x27a>
 800256a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800256c:	2b02      	cmp	r3, #2
 800256e:	dc50      	bgt.n	8002612 <__ssvfiscanf_r+0x29e>
 8002570:	466b      	mov	r3, sp
 8002572:	4622      	mov	r2, r4
 8002574:	4630      	mov	r0, r6
 8002576:	a941      	add	r1, sp, #260	; 0x104
 8002578:	f000 fa0c 	bl	8002994 <_scanf_chars>
 800257c:	2801      	cmp	r0, #1
 800257e:	d06e      	beq.n	800265e <__ssvfiscanf_r+0x2ea>
 8002580:	2802      	cmp	r0, #2
 8002582:	f47f af1d 	bne.w	80023c0 <__ssvfiscanf_r+0x4c>
 8002586:	e7cf      	b.n	8002528 <__ssvfiscanf_r+0x1b4>
 8002588:	220a      	movs	r2, #10
 800258a:	e7dd      	b.n	8002548 <__ssvfiscanf_r+0x1d4>
 800258c:	2300      	movs	r3, #0
 800258e:	9342      	str	r3, [sp, #264]	; 0x108
 8002590:	2303      	movs	r3, #3
 8002592:	e7de      	b.n	8002552 <__ssvfiscanf_r+0x1de>
 8002594:	2308      	movs	r3, #8
 8002596:	9342      	str	r3, [sp, #264]	; 0x108
 8002598:	2304      	movs	r3, #4
 800259a:	e7da      	b.n	8002552 <__ssvfiscanf_r+0x1de>
 800259c:	4629      	mov	r1, r5
 800259e:	4640      	mov	r0, r8
 80025a0:	f000 fb4a 	bl	8002c38 <__sccl>
 80025a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80025a6:	4605      	mov	r5, r0
 80025a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ac:	9341      	str	r3, [sp, #260]	; 0x104
 80025ae:	2301      	movs	r3, #1
 80025b0:	e7cf      	b.n	8002552 <__ssvfiscanf_r+0x1de>
 80025b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80025b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b8:	9341      	str	r3, [sp, #260]	; 0x104
 80025ba:	2300      	movs	r3, #0
 80025bc:	e7c9      	b.n	8002552 <__ssvfiscanf_r+0x1de>
 80025be:	2302      	movs	r3, #2
 80025c0:	e7c7      	b.n	8002552 <__ssvfiscanf_r+0x1de>
 80025c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80025c4:	06c3      	lsls	r3, r0, #27
 80025c6:	f53f aefb 	bmi.w	80023c0 <__ssvfiscanf_r+0x4c>
 80025ca:	9b00      	ldr	r3, [sp, #0]
 80025cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80025ce:	1d19      	adds	r1, r3, #4
 80025d0:	9100      	str	r1, [sp, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f010 0f01 	tst.w	r0, #1
 80025d8:	bf14      	ite	ne
 80025da:	801a      	strhne	r2, [r3, #0]
 80025dc:	601a      	streq	r2, [r3, #0]
 80025de:	e6ef      	b.n	80023c0 <__ssvfiscanf_r+0x4c>
 80025e0:	4621      	mov	r1, r4
 80025e2:	4630      	mov	r0, r6
 80025e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80025e6:	4798      	blx	r3
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d0b6      	beq.n	800255a <__ssvfiscanf_r+0x1e6>
 80025ec:	e79c      	b.n	8002528 <__ssvfiscanf_r+0x1b4>
 80025ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80025f0:	3201      	adds	r2, #1
 80025f2:	9245      	str	r2, [sp, #276]	; 0x114
 80025f4:	6862      	ldr	r2, [r4, #4]
 80025f6:	3a01      	subs	r2, #1
 80025f8:	2a00      	cmp	r2, #0
 80025fa:	6062      	str	r2, [r4, #4]
 80025fc:	dd02      	ble.n	8002604 <__ssvfiscanf_r+0x290>
 80025fe:	3301      	adds	r3, #1
 8002600:	6023      	str	r3, [r4, #0]
 8002602:	e7ad      	b.n	8002560 <__ssvfiscanf_r+0x1ec>
 8002604:	4621      	mov	r1, r4
 8002606:	4630      	mov	r0, r6
 8002608:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800260a:	4798      	blx	r3
 800260c:	2800      	cmp	r0, #0
 800260e:	d0a7      	beq.n	8002560 <__ssvfiscanf_r+0x1ec>
 8002610:	e78a      	b.n	8002528 <__ssvfiscanf_r+0x1b4>
 8002612:	2b04      	cmp	r3, #4
 8002614:	dc0e      	bgt.n	8002634 <__ssvfiscanf_r+0x2c0>
 8002616:	466b      	mov	r3, sp
 8002618:	4622      	mov	r2, r4
 800261a:	4630      	mov	r0, r6
 800261c:	a941      	add	r1, sp, #260	; 0x104
 800261e:	f000 fa13 	bl	8002a48 <_scanf_i>
 8002622:	e7ab      	b.n	800257c <__ssvfiscanf_r+0x208>
 8002624:	080022c1 	.word	0x080022c1
 8002628:	0800233b 	.word	0x0800233b
 800262c:	08003289 	.word	0x08003289
 8002630:	0800338f 	.word	0x0800338f
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <__ssvfiscanf_r+0x2f0>)
 8002636:	2b00      	cmp	r3, #0
 8002638:	f43f aec2 	beq.w	80023c0 <__ssvfiscanf_r+0x4c>
 800263c:	466b      	mov	r3, sp
 800263e:	4622      	mov	r2, r4
 8002640:	4630      	mov	r0, r6
 8002642:	a941      	add	r1, sp, #260	; 0x104
 8002644:	f3af 8000 	nop.w
 8002648:	e798      	b.n	800257c <__ssvfiscanf_r+0x208>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002650:	bf18      	it	ne
 8002652:	f04f 30ff 	movne.w	r0, #4294967295
 8002656:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800265a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800265e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002660:	e7f9      	b.n	8002656 <__ssvfiscanf_r+0x2e2>
 8002662:	bf00      	nop
 8002664:	00000000 	.word	0x00000000

08002668 <_printf_common>:
 8002668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800266c:	4616      	mov	r6, r2
 800266e:	4699      	mov	r9, r3
 8002670:	688a      	ldr	r2, [r1, #8]
 8002672:	690b      	ldr	r3, [r1, #16]
 8002674:	4607      	mov	r7, r0
 8002676:	4293      	cmp	r3, r2
 8002678:	bfb8      	it	lt
 800267a:	4613      	movlt	r3, r2
 800267c:	6033      	str	r3, [r6, #0]
 800267e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002682:	460c      	mov	r4, r1
 8002684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002688:	b10a      	cbz	r2, 800268e <_printf_common+0x26>
 800268a:	3301      	adds	r3, #1
 800268c:	6033      	str	r3, [r6, #0]
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	0699      	lsls	r1, r3, #26
 8002692:	bf42      	ittt	mi
 8002694:	6833      	ldrmi	r3, [r6, #0]
 8002696:	3302      	addmi	r3, #2
 8002698:	6033      	strmi	r3, [r6, #0]
 800269a:	6825      	ldr	r5, [r4, #0]
 800269c:	f015 0506 	ands.w	r5, r5, #6
 80026a0:	d106      	bne.n	80026b0 <_printf_common+0x48>
 80026a2:	f104 0a19 	add.w	sl, r4, #25
 80026a6:	68e3      	ldr	r3, [r4, #12]
 80026a8:	6832      	ldr	r2, [r6, #0]
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	42ab      	cmp	r3, r5
 80026ae:	dc28      	bgt.n	8002702 <_printf_common+0x9a>
 80026b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026b4:	1e13      	subs	r3, r2, #0
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	bf18      	it	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	0692      	lsls	r2, r2, #26
 80026be:	d42d      	bmi.n	800271c <_printf_common+0xb4>
 80026c0:	4649      	mov	r1, r9
 80026c2:	4638      	mov	r0, r7
 80026c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026c8:	47c0      	blx	r8
 80026ca:	3001      	adds	r0, #1
 80026cc:	d020      	beq.n	8002710 <_printf_common+0xa8>
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	68e5      	ldr	r5, [r4, #12]
 80026d2:	f003 0306 	and.w	r3, r3, #6
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	bf18      	it	ne
 80026da:	2500      	movne	r5, #0
 80026dc:	6832      	ldr	r2, [r6, #0]
 80026de:	f04f 0600 	mov.w	r6, #0
 80026e2:	68a3      	ldr	r3, [r4, #8]
 80026e4:	bf08      	it	eq
 80026e6:	1aad      	subeq	r5, r5, r2
 80026e8:	6922      	ldr	r2, [r4, #16]
 80026ea:	bf08      	it	eq
 80026ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026f0:	4293      	cmp	r3, r2
 80026f2:	bfc4      	itt	gt
 80026f4:	1a9b      	subgt	r3, r3, r2
 80026f6:	18ed      	addgt	r5, r5, r3
 80026f8:	341a      	adds	r4, #26
 80026fa:	42b5      	cmp	r5, r6
 80026fc:	d11a      	bne.n	8002734 <_printf_common+0xcc>
 80026fe:	2000      	movs	r0, #0
 8002700:	e008      	b.n	8002714 <_printf_common+0xac>
 8002702:	2301      	movs	r3, #1
 8002704:	4652      	mov	r2, sl
 8002706:	4649      	mov	r1, r9
 8002708:	4638      	mov	r0, r7
 800270a:	47c0      	blx	r8
 800270c:	3001      	adds	r0, #1
 800270e:	d103      	bne.n	8002718 <_printf_common+0xb0>
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002718:	3501      	adds	r5, #1
 800271a:	e7c4      	b.n	80026a6 <_printf_common+0x3e>
 800271c:	2030      	movs	r0, #48	; 0x30
 800271e:	18e1      	adds	r1, r4, r3
 8002720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800272a:	4422      	add	r2, r4
 800272c:	3302      	adds	r3, #2
 800272e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002732:	e7c5      	b.n	80026c0 <_printf_common+0x58>
 8002734:	2301      	movs	r3, #1
 8002736:	4622      	mov	r2, r4
 8002738:	4649      	mov	r1, r9
 800273a:	4638      	mov	r0, r7
 800273c:	47c0      	blx	r8
 800273e:	3001      	adds	r0, #1
 8002740:	d0e6      	beq.n	8002710 <_printf_common+0xa8>
 8002742:	3601      	adds	r6, #1
 8002744:	e7d9      	b.n	80026fa <_printf_common+0x92>
	...

08002748 <_printf_i>:
 8002748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800274c:	7e0f      	ldrb	r7, [r1, #24]
 800274e:	4691      	mov	r9, r2
 8002750:	2f78      	cmp	r7, #120	; 0x78
 8002752:	4680      	mov	r8, r0
 8002754:	460c      	mov	r4, r1
 8002756:	469a      	mov	sl, r3
 8002758:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800275a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800275e:	d807      	bhi.n	8002770 <_printf_i+0x28>
 8002760:	2f62      	cmp	r7, #98	; 0x62
 8002762:	d80a      	bhi.n	800277a <_printf_i+0x32>
 8002764:	2f00      	cmp	r7, #0
 8002766:	f000 80d9 	beq.w	800291c <_printf_i+0x1d4>
 800276a:	2f58      	cmp	r7, #88	; 0x58
 800276c:	f000 80a4 	beq.w	80028b8 <_printf_i+0x170>
 8002770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002778:	e03a      	b.n	80027f0 <_printf_i+0xa8>
 800277a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800277e:	2b15      	cmp	r3, #21
 8002780:	d8f6      	bhi.n	8002770 <_printf_i+0x28>
 8002782:	a101      	add	r1, pc, #4	; (adr r1, 8002788 <_printf_i+0x40>)
 8002784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002788:	080027e1 	.word	0x080027e1
 800278c:	080027f5 	.word	0x080027f5
 8002790:	08002771 	.word	0x08002771
 8002794:	08002771 	.word	0x08002771
 8002798:	08002771 	.word	0x08002771
 800279c:	08002771 	.word	0x08002771
 80027a0:	080027f5 	.word	0x080027f5
 80027a4:	08002771 	.word	0x08002771
 80027a8:	08002771 	.word	0x08002771
 80027ac:	08002771 	.word	0x08002771
 80027b0:	08002771 	.word	0x08002771
 80027b4:	08002903 	.word	0x08002903
 80027b8:	08002825 	.word	0x08002825
 80027bc:	080028e5 	.word	0x080028e5
 80027c0:	08002771 	.word	0x08002771
 80027c4:	08002771 	.word	0x08002771
 80027c8:	08002925 	.word	0x08002925
 80027cc:	08002771 	.word	0x08002771
 80027d0:	08002825 	.word	0x08002825
 80027d4:	08002771 	.word	0x08002771
 80027d8:	08002771 	.word	0x08002771
 80027dc:	080028ed 	.word	0x080028ed
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	1d1a      	adds	r2, r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	602a      	str	r2, [r5, #0]
 80027e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0a4      	b.n	800293e <_printf_i+0x1f6>
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	6829      	ldr	r1, [r5, #0]
 80027f8:	0606      	lsls	r6, r0, #24
 80027fa:	f101 0304 	add.w	r3, r1, #4
 80027fe:	d50a      	bpl.n	8002816 <_printf_i+0xce>
 8002800:	680e      	ldr	r6, [r1, #0]
 8002802:	602b      	str	r3, [r5, #0]
 8002804:	2e00      	cmp	r6, #0
 8002806:	da03      	bge.n	8002810 <_printf_i+0xc8>
 8002808:	232d      	movs	r3, #45	; 0x2d
 800280a:	4276      	negs	r6, r6
 800280c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002810:	230a      	movs	r3, #10
 8002812:	485e      	ldr	r0, [pc, #376]	; (800298c <_printf_i+0x244>)
 8002814:	e019      	b.n	800284a <_printf_i+0x102>
 8002816:	680e      	ldr	r6, [r1, #0]
 8002818:	f010 0f40 	tst.w	r0, #64	; 0x40
 800281c:	602b      	str	r3, [r5, #0]
 800281e:	bf18      	it	ne
 8002820:	b236      	sxthne	r6, r6
 8002822:	e7ef      	b.n	8002804 <_printf_i+0xbc>
 8002824:	682b      	ldr	r3, [r5, #0]
 8002826:	6820      	ldr	r0, [r4, #0]
 8002828:	1d19      	adds	r1, r3, #4
 800282a:	6029      	str	r1, [r5, #0]
 800282c:	0601      	lsls	r1, r0, #24
 800282e:	d501      	bpl.n	8002834 <_printf_i+0xec>
 8002830:	681e      	ldr	r6, [r3, #0]
 8002832:	e002      	b.n	800283a <_printf_i+0xf2>
 8002834:	0646      	lsls	r6, r0, #25
 8002836:	d5fb      	bpl.n	8002830 <_printf_i+0xe8>
 8002838:	881e      	ldrh	r6, [r3, #0]
 800283a:	2f6f      	cmp	r7, #111	; 0x6f
 800283c:	bf0c      	ite	eq
 800283e:	2308      	moveq	r3, #8
 8002840:	230a      	movne	r3, #10
 8002842:	4852      	ldr	r0, [pc, #328]	; (800298c <_printf_i+0x244>)
 8002844:	2100      	movs	r1, #0
 8002846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800284a:	6865      	ldr	r5, [r4, #4]
 800284c:	2d00      	cmp	r5, #0
 800284e:	bfa8      	it	ge
 8002850:	6821      	ldrge	r1, [r4, #0]
 8002852:	60a5      	str	r5, [r4, #8]
 8002854:	bfa4      	itt	ge
 8002856:	f021 0104 	bicge.w	r1, r1, #4
 800285a:	6021      	strge	r1, [r4, #0]
 800285c:	b90e      	cbnz	r6, 8002862 <_printf_i+0x11a>
 800285e:	2d00      	cmp	r5, #0
 8002860:	d04d      	beq.n	80028fe <_printf_i+0x1b6>
 8002862:	4615      	mov	r5, r2
 8002864:	fbb6 f1f3 	udiv	r1, r6, r3
 8002868:	fb03 6711 	mls	r7, r3, r1, r6
 800286c:	5dc7      	ldrb	r7, [r0, r7]
 800286e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002872:	4637      	mov	r7, r6
 8002874:	42bb      	cmp	r3, r7
 8002876:	460e      	mov	r6, r1
 8002878:	d9f4      	bls.n	8002864 <_printf_i+0x11c>
 800287a:	2b08      	cmp	r3, #8
 800287c:	d10b      	bne.n	8002896 <_printf_i+0x14e>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	07de      	lsls	r6, r3, #31
 8002882:	d508      	bpl.n	8002896 <_printf_i+0x14e>
 8002884:	6923      	ldr	r3, [r4, #16]
 8002886:	6861      	ldr	r1, [r4, #4]
 8002888:	4299      	cmp	r1, r3
 800288a:	bfde      	ittt	le
 800288c:	2330      	movle	r3, #48	; 0x30
 800288e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002892:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002896:	1b52      	subs	r2, r2, r5
 8002898:	6122      	str	r2, [r4, #16]
 800289a:	464b      	mov	r3, r9
 800289c:	4621      	mov	r1, r4
 800289e:	4640      	mov	r0, r8
 80028a0:	f8cd a000 	str.w	sl, [sp]
 80028a4:	aa03      	add	r2, sp, #12
 80028a6:	f7ff fedf 	bl	8002668 <_printf_common>
 80028aa:	3001      	adds	r0, #1
 80028ac:	d14c      	bne.n	8002948 <_printf_i+0x200>
 80028ae:	f04f 30ff 	mov.w	r0, #4294967295
 80028b2:	b004      	add	sp, #16
 80028b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b8:	4834      	ldr	r0, [pc, #208]	; (800298c <_printf_i+0x244>)
 80028ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80028be:	6829      	ldr	r1, [r5, #0]
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80028c6:	6029      	str	r1, [r5, #0]
 80028c8:	061d      	lsls	r5, r3, #24
 80028ca:	d514      	bpl.n	80028f6 <_printf_i+0x1ae>
 80028cc:	07df      	lsls	r7, r3, #31
 80028ce:	bf44      	itt	mi
 80028d0:	f043 0320 	orrmi.w	r3, r3, #32
 80028d4:	6023      	strmi	r3, [r4, #0]
 80028d6:	b91e      	cbnz	r6, 80028e0 <_printf_i+0x198>
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	f023 0320 	bic.w	r3, r3, #32
 80028de:	6023      	str	r3, [r4, #0]
 80028e0:	2310      	movs	r3, #16
 80028e2:	e7af      	b.n	8002844 <_printf_i+0xfc>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f043 0320 	orr.w	r3, r3, #32
 80028ea:	6023      	str	r3, [r4, #0]
 80028ec:	2378      	movs	r3, #120	; 0x78
 80028ee:	4828      	ldr	r0, [pc, #160]	; (8002990 <_printf_i+0x248>)
 80028f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028f4:	e7e3      	b.n	80028be <_printf_i+0x176>
 80028f6:	0659      	lsls	r1, r3, #25
 80028f8:	bf48      	it	mi
 80028fa:	b2b6      	uxthmi	r6, r6
 80028fc:	e7e6      	b.n	80028cc <_printf_i+0x184>
 80028fe:	4615      	mov	r5, r2
 8002900:	e7bb      	b.n	800287a <_printf_i+0x132>
 8002902:	682b      	ldr	r3, [r5, #0]
 8002904:	6826      	ldr	r6, [r4, #0]
 8002906:	1d18      	adds	r0, r3, #4
 8002908:	6961      	ldr	r1, [r4, #20]
 800290a:	6028      	str	r0, [r5, #0]
 800290c:	0635      	lsls	r5, r6, #24
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	d501      	bpl.n	8002916 <_printf_i+0x1ce>
 8002912:	6019      	str	r1, [r3, #0]
 8002914:	e002      	b.n	800291c <_printf_i+0x1d4>
 8002916:	0670      	lsls	r0, r6, #25
 8002918:	d5fb      	bpl.n	8002912 <_printf_i+0x1ca>
 800291a:	8019      	strh	r1, [r3, #0]
 800291c:	2300      	movs	r3, #0
 800291e:	4615      	mov	r5, r2
 8002920:	6123      	str	r3, [r4, #16]
 8002922:	e7ba      	b.n	800289a <_printf_i+0x152>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	2100      	movs	r1, #0
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	602a      	str	r2, [r5, #0]
 800292c:	681d      	ldr	r5, [r3, #0]
 800292e:	6862      	ldr	r2, [r4, #4]
 8002930:	4628      	mov	r0, r5
 8002932:	f000 fae5 	bl	8002f00 <memchr>
 8002936:	b108      	cbz	r0, 800293c <_printf_i+0x1f4>
 8002938:	1b40      	subs	r0, r0, r5
 800293a:	6060      	str	r0, [r4, #4]
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	6123      	str	r3, [r4, #16]
 8002940:	2300      	movs	r3, #0
 8002942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002946:	e7a8      	b.n	800289a <_printf_i+0x152>
 8002948:	462a      	mov	r2, r5
 800294a:	4649      	mov	r1, r9
 800294c:	4640      	mov	r0, r8
 800294e:	6923      	ldr	r3, [r4, #16]
 8002950:	47d0      	blx	sl
 8002952:	3001      	adds	r0, #1
 8002954:	d0ab      	beq.n	80028ae <_printf_i+0x166>
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	079b      	lsls	r3, r3, #30
 800295a:	d413      	bmi.n	8002984 <_printf_i+0x23c>
 800295c:	68e0      	ldr	r0, [r4, #12]
 800295e:	9b03      	ldr	r3, [sp, #12]
 8002960:	4298      	cmp	r0, r3
 8002962:	bfb8      	it	lt
 8002964:	4618      	movlt	r0, r3
 8002966:	e7a4      	b.n	80028b2 <_printf_i+0x16a>
 8002968:	2301      	movs	r3, #1
 800296a:	4632      	mov	r2, r6
 800296c:	4649      	mov	r1, r9
 800296e:	4640      	mov	r0, r8
 8002970:	47d0      	blx	sl
 8002972:	3001      	adds	r0, #1
 8002974:	d09b      	beq.n	80028ae <_printf_i+0x166>
 8002976:	3501      	adds	r5, #1
 8002978:	68e3      	ldr	r3, [r4, #12]
 800297a:	9903      	ldr	r1, [sp, #12]
 800297c:	1a5b      	subs	r3, r3, r1
 800297e:	42ab      	cmp	r3, r5
 8002980:	dcf2      	bgt.n	8002968 <_printf_i+0x220>
 8002982:	e7eb      	b.n	800295c <_printf_i+0x214>
 8002984:	2500      	movs	r5, #0
 8002986:	f104 0619 	add.w	r6, r4, #25
 800298a:	e7f5      	b.n	8002978 <_printf_i+0x230>
 800298c:	0800339a 	.word	0x0800339a
 8002990:	080033ab 	.word	0x080033ab

08002994 <_scanf_chars>:
 8002994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002998:	4615      	mov	r5, r2
 800299a:	688a      	ldr	r2, [r1, #8]
 800299c:	4680      	mov	r8, r0
 800299e:	460c      	mov	r4, r1
 80029a0:	b932      	cbnz	r2, 80029b0 <_scanf_chars+0x1c>
 80029a2:	698a      	ldr	r2, [r1, #24]
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2201      	moveq	r2, #1
 80029aa:	f04f 32ff 	movne.w	r2, #4294967295
 80029ae:	608a      	str	r2, [r1, #8]
 80029b0:	2700      	movs	r7, #0
 80029b2:	6822      	ldr	r2, [r4, #0]
 80029b4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002a44 <_scanf_chars+0xb0>
 80029b8:	06d1      	lsls	r1, r2, #27
 80029ba:	bf5f      	itttt	pl
 80029bc:	681a      	ldrpl	r2, [r3, #0]
 80029be:	1d11      	addpl	r1, r2, #4
 80029c0:	6019      	strpl	r1, [r3, #0]
 80029c2:	6816      	ldrpl	r6, [r2, #0]
 80029c4:	69a0      	ldr	r0, [r4, #24]
 80029c6:	b188      	cbz	r0, 80029ec <_scanf_chars+0x58>
 80029c8:	2801      	cmp	r0, #1
 80029ca:	d107      	bne.n	80029dc <_scanf_chars+0x48>
 80029cc:	682b      	ldr	r3, [r5, #0]
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	6963      	ldr	r3, [r4, #20]
 80029d2:	5c9b      	ldrb	r3, [r3, r2]
 80029d4:	b953      	cbnz	r3, 80029ec <_scanf_chars+0x58>
 80029d6:	2f00      	cmp	r7, #0
 80029d8:	d031      	beq.n	8002a3e <_scanf_chars+0xaa>
 80029da:	e022      	b.n	8002a22 <_scanf_chars+0x8e>
 80029dc:	2802      	cmp	r0, #2
 80029de:	d120      	bne.n	8002a22 <_scanf_chars+0x8e>
 80029e0:	682b      	ldr	r3, [r5, #0]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80029e8:	071b      	lsls	r3, r3, #28
 80029ea:	d41a      	bmi.n	8002a22 <_scanf_chars+0x8e>
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	3701      	adds	r7, #1
 80029f0:	06da      	lsls	r2, r3, #27
 80029f2:	bf5e      	ittt	pl
 80029f4:	682b      	ldrpl	r3, [r5, #0]
 80029f6:	781b      	ldrbpl	r3, [r3, #0]
 80029f8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80029fc:	682a      	ldr	r2, [r5, #0]
 80029fe:	686b      	ldr	r3, [r5, #4]
 8002a00:	3201      	adds	r2, #1
 8002a02:	602a      	str	r2, [r5, #0]
 8002a04:	68a2      	ldr	r2, [r4, #8]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	606b      	str	r3, [r5, #4]
 8002a0c:	60a2      	str	r2, [r4, #8]
 8002a0e:	b142      	cbz	r2, 8002a22 <_scanf_chars+0x8e>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	dcd7      	bgt.n	80029c4 <_scanf_chars+0x30>
 8002a14:	4629      	mov	r1, r5
 8002a16:	4640      	mov	r0, r8
 8002a18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002a1c:	4798      	blx	r3
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d0d0      	beq.n	80029c4 <_scanf_chars+0x30>
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	f013 0310 	ands.w	r3, r3, #16
 8002a28:	d105      	bne.n	8002a36 <_scanf_chars+0xa2>
 8002a2a:	68e2      	ldr	r2, [r4, #12]
 8002a2c:	3201      	adds	r2, #1
 8002a2e:	60e2      	str	r2, [r4, #12]
 8002a30:	69a2      	ldr	r2, [r4, #24]
 8002a32:	b102      	cbz	r2, 8002a36 <_scanf_chars+0xa2>
 8002a34:	7033      	strb	r3, [r6, #0]
 8002a36:	2000      	movs	r0, #0
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	443b      	add	r3, r7
 8002a3c:	6123      	str	r3, [r4, #16]
 8002a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a42:	bf00      	nop
 8002a44:	08003289 	.word	0x08003289

08002a48 <_scanf_i>:
 8002a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4c:	460c      	mov	r4, r1
 8002a4e:	4698      	mov	r8, r3
 8002a50:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <_scanf_i+0x1e0>)
 8002a52:	b087      	sub	sp, #28
 8002a54:	4682      	mov	sl, r0
 8002a56:	4616      	mov	r6, r2
 8002a58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a5c:	ab03      	add	r3, sp, #12
 8002a5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a62:	4b72      	ldr	r3, [pc, #456]	; (8002c2c <_scanf_i+0x1e4>)
 8002a64:	69a1      	ldr	r1, [r4, #24]
 8002a66:	4a72      	ldr	r2, [pc, #456]	; (8002c30 <_scanf_i+0x1e8>)
 8002a68:	4627      	mov	r7, r4
 8002a6a:	2903      	cmp	r1, #3
 8002a6c:	bf18      	it	ne
 8002a6e:	461a      	movne	r2, r3
 8002a70:	68a3      	ldr	r3, [r4, #8]
 8002a72:	9201      	str	r2, [sp, #4]
 8002a74:	1e5a      	subs	r2, r3, #1
 8002a76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002a7a:	bf81      	itttt	hi
 8002a7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002a80:	eb03 0905 	addhi.w	r9, r3, r5
 8002a84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002a88:	60a3      	strhi	r3, [r4, #8]
 8002a8a:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002a8e:	bf98      	it	ls
 8002a90:	f04f 0900 	movls.w	r9, #0
 8002a94:	463d      	mov	r5, r7
 8002a96:	f04f 0b00 	mov.w	fp, #0
 8002a9a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002a9e:	6023      	str	r3, [r4, #0]
 8002aa0:	6831      	ldr	r1, [r6, #0]
 8002aa2:	ab03      	add	r3, sp, #12
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	7809      	ldrb	r1, [r1, #0]
 8002aa8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002aac:	f000 fa28 	bl	8002f00 <memchr>
 8002ab0:	b328      	cbz	r0, 8002afe <_scanf_i+0xb6>
 8002ab2:	f1bb 0f01 	cmp.w	fp, #1
 8002ab6:	d159      	bne.n	8002b6c <_scanf_i+0x124>
 8002ab8:	6862      	ldr	r2, [r4, #4]
 8002aba:	b92a      	cbnz	r2, 8002ac8 <_scanf_i+0x80>
 8002abc:	2308      	movs	r3, #8
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	6063      	str	r3, [r4, #4]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	6022      	str	r2, [r4, #0]
 8002ac8:	6822      	ldr	r2, [r4, #0]
 8002aca:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8002ace:	6022      	str	r2, [r4, #0]
 8002ad0:	68a2      	ldr	r2, [r4, #8]
 8002ad2:	1e51      	subs	r1, r2, #1
 8002ad4:	60a1      	str	r1, [r4, #8]
 8002ad6:	b192      	cbz	r2, 8002afe <_scanf_i+0xb6>
 8002ad8:	6832      	ldr	r2, [r6, #0]
 8002ada:	1c51      	adds	r1, r2, #1
 8002adc:	6031      	str	r1, [r6, #0]
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	f805 2b01 	strb.w	r2, [r5], #1
 8002ae4:	6872      	ldr	r2, [r6, #4]
 8002ae6:	3a01      	subs	r2, #1
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	6072      	str	r2, [r6, #4]
 8002aec:	dc07      	bgt.n	8002afe <_scanf_i+0xb6>
 8002aee:	4631      	mov	r1, r6
 8002af0:	4650      	mov	r0, sl
 8002af2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8002af6:	4790      	blx	r2
 8002af8:	2800      	cmp	r0, #0
 8002afa:	f040 8085 	bne.w	8002c08 <_scanf_i+0x1c0>
 8002afe:	f10b 0b01 	add.w	fp, fp, #1
 8002b02:	f1bb 0f03 	cmp.w	fp, #3
 8002b06:	d1cb      	bne.n	8002aa0 <_scanf_i+0x58>
 8002b08:	6863      	ldr	r3, [r4, #4]
 8002b0a:	b90b      	cbnz	r3, 8002b10 <_scanf_i+0xc8>
 8002b0c:	230a      	movs	r3, #10
 8002b0e:	6063      	str	r3, [r4, #4]
 8002b10:	6863      	ldr	r3, [r4, #4]
 8002b12:	4948      	ldr	r1, [pc, #288]	; (8002c34 <_scanf_i+0x1ec>)
 8002b14:	6960      	ldr	r0, [r4, #20]
 8002b16:	1ac9      	subs	r1, r1, r3
 8002b18:	f000 f88e 	bl	8002c38 <__sccl>
 8002b1c:	f04f 0b00 	mov.w	fp, #0
 8002b20:	68a3      	ldr	r3, [r4, #8]
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d03d      	beq.n	8002ba4 <_scanf_i+0x15c>
 8002b28:	6831      	ldr	r1, [r6, #0]
 8002b2a:	6960      	ldr	r0, [r4, #20]
 8002b2c:	f891 c000 	ldrb.w	ip, [r1]
 8002b30:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d035      	beq.n	8002ba4 <_scanf_i+0x15c>
 8002b38:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8002b3c:	d124      	bne.n	8002b88 <_scanf_i+0x140>
 8002b3e:	0510      	lsls	r0, r2, #20
 8002b40:	d522      	bpl.n	8002b88 <_scanf_i+0x140>
 8002b42:	f10b 0b01 	add.w	fp, fp, #1
 8002b46:	f1b9 0f00 	cmp.w	r9, #0
 8002b4a:	d003      	beq.n	8002b54 <_scanf_i+0x10c>
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8002b52:	60a3      	str	r3, [r4, #8]
 8002b54:	6873      	ldr	r3, [r6, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	6073      	str	r3, [r6, #4]
 8002b5c:	dd1b      	ble.n	8002b96 <_scanf_i+0x14e>
 8002b5e:	6833      	ldr	r3, [r6, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	6033      	str	r3, [r6, #0]
 8002b64:	68a3      	ldr	r3, [r4, #8]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	60a3      	str	r3, [r4, #8]
 8002b6a:	e7d9      	b.n	8002b20 <_scanf_i+0xd8>
 8002b6c:	f1bb 0f02 	cmp.w	fp, #2
 8002b70:	d1ae      	bne.n	8002ad0 <_scanf_i+0x88>
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8002b78:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002b7c:	d1bf      	bne.n	8002afe <_scanf_i+0xb6>
 8002b7e:	2310      	movs	r3, #16
 8002b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b84:	6063      	str	r3, [r4, #4]
 8002b86:	e7a2      	b.n	8002ace <_scanf_i+0x86>
 8002b88:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8002b8c:	6022      	str	r2, [r4, #0]
 8002b8e:	780b      	ldrb	r3, [r1, #0]
 8002b90:	f805 3b01 	strb.w	r3, [r5], #1
 8002b94:	e7de      	b.n	8002b54 <_scanf_i+0x10c>
 8002b96:	4631      	mov	r1, r6
 8002b98:	4650      	mov	r0, sl
 8002b9a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002b9e:	4798      	blx	r3
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d0df      	beq.n	8002b64 <_scanf_i+0x11c>
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	05db      	lsls	r3, r3, #23
 8002ba8:	d50d      	bpl.n	8002bc6 <_scanf_i+0x17e>
 8002baa:	42bd      	cmp	r5, r7
 8002bac:	d909      	bls.n	8002bc2 <_scanf_i+0x17a>
 8002bae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002bb2:	4632      	mov	r2, r6
 8002bb4:	4650      	mov	r0, sl
 8002bb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002bba:	f105 39ff 	add.w	r9, r5, #4294967295
 8002bbe:	4798      	blx	r3
 8002bc0:	464d      	mov	r5, r9
 8002bc2:	42bd      	cmp	r5, r7
 8002bc4:	d02d      	beq.n	8002c22 <_scanf_i+0x1da>
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	f012 0210 	ands.w	r2, r2, #16
 8002bcc:	d113      	bne.n	8002bf6 <_scanf_i+0x1ae>
 8002bce:	702a      	strb	r2, [r5, #0]
 8002bd0:	4639      	mov	r1, r7
 8002bd2:	6863      	ldr	r3, [r4, #4]
 8002bd4:	4650      	mov	r0, sl
 8002bd6:	9e01      	ldr	r6, [sp, #4]
 8002bd8:	47b0      	blx	r6
 8002bda:	6821      	ldr	r1, [r4, #0]
 8002bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8002be0:	f011 0f20 	tst.w	r1, #32
 8002be4:	d013      	beq.n	8002c0e <_scanf_i+0x1c6>
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	f8c8 2000 	str.w	r2, [r8]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6018      	str	r0, [r3, #0]
 8002bf0:	68e3      	ldr	r3, [r4, #12]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	60e3      	str	r3, [r4, #12]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	1bed      	subs	r5, r5, r7
 8002bfa:	44ab      	add	fp, r5
 8002bfc:	6925      	ldr	r5, [r4, #16]
 8002bfe:	445d      	add	r5, fp
 8002c00:	6125      	str	r5, [r4, #16]
 8002c02:	b007      	add	sp, #28
 8002c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c08:	f04f 0b00 	mov.w	fp, #0
 8002c0c:	e7ca      	b.n	8002ba4 <_scanf_i+0x15c>
 8002c0e:	1d1a      	adds	r2, r3, #4
 8002c10:	f8c8 2000 	str.w	r2, [r8]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f011 0f01 	tst.w	r1, #1
 8002c1a:	bf14      	ite	ne
 8002c1c:	8018      	strhne	r0, [r3, #0]
 8002c1e:	6018      	streq	r0, [r3, #0]
 8002c20:	e7e6      	b.n	8002bf0 <_scanf_i+0x1a8>
 8002c22:	2001      	movs	r0, #1
 8002c24:	e7ed      	b.n	8002c02 <_scanf_i+0x1ba>
 8002c26:	bf00      	nop
 8002c28:	08003264 	.word	0x08003264
 8002c2c:	08002e89 	.word	0x08002e89
 8002c30:	08002da1 	.word	0x08002da1
 8002c34:	080033d5 	.word	0x080033d5

08002c38 <__sccl>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	780b      	ldrb	r3, [r1, #0]
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	2b5e      	cmp	r3, #94	; 0x5e
 8002c40:	bf13      	iteet	ne
 8002c42:	2200      	movne	r2, #0
 8002c44:	2201      	moveq	r2, #1
 8002c46:	784b      	ldrbeq	r3, [r1, #1]
 8002c48:	1c48      	addne	r0, r1, #1
 8002c4a:	bf08      	it	eq
 8002c4c:	1c88      	addeq	r0, r1, #2
 8002c4e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8002c52:	1e61      	subs	r1, r4, #1
 8002c54:	f801 2f01 	strb.w	r2, [r1, #1]!
 8002c58:	42a9      	cmp	r1, r5
 8002c5a:	d1fb      	bne.n	8002c54 <__sccl+0x1c>
 8002c5c:	b90b      	cbnz	r3, 8002c62 <__sccl+0x2a>
 8002c5e:	3801      	subs	r0, #1
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
 8002c62:	f082 0201 	eor.w	r2, r2, #1
 8002c66:	4605      	mov	r5, r0
 8002c68:	54e2      	strb	r2, [r4, r3]
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8002c70:	292d      	cmp	r1, #45	; 0x2d
 8002c72:	d006      	beq.n	8002c82 <__sccl+0x4a>
 8002c74:	295d      	cmp	r1, #93	; 0x5d
 8002c76:	d0f3      	beq.n	8002c60 <__sccl+0x28>
 8002c78:	b909      	cbnz	r1, 8002c7e <__sccl+0x46>
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	e7f0      	b.n	8002c60 <__sccl+0x28>
 8002c7e:	460b      	mov	r3, r1
 8002c80:	e7f1      	b.n	8002c66 <__sccl+0x2e>
 8002c82:	786e      	ldrb	r6, [r5, #1]
 8002c84:	2e5d      	cmp	r6, #93	; 0x5d
 8002c86:	d0fa      	beq.n	8002c7e <__sccl+0x46>
 8002c88:	42b3      	cmp	r3, r6
 8002c8a:	dcf8      	bgt.n	8002c7e <__sccl+0x46>
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	3502      	adds	r5, #2
 8002c90:	3101      	adds	r1, #1
 8002c92:	428e      	cmp	r6, r1
 8002c94:	5462      	strb	r2, [r4, r1]
 8002c96:	dcfb      	bgt.n	8002c90 <__sccl+0x58>
 8002c98:	1af1      	subs	r1, r6, r3
 8002c9a:	3901      	subs	r1, #1
 8002c9c:	42b3      	cmp	r3, r6
 8002c9e:	bfa8      	it	ge
 8002ca0:	2100      	movge	r1, #0
 8002ca2:	1c58      	adds	r0, r3, #1
 8002ca4:	1843      	adds	r3, r0, r1
 8002ca6:	e7e0      	b.n	8002c6a <__sccl+0x32>

08002ca8 <_strtol_l.constprop.0>:
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cae:	4680      	mov	r8, r0
 8002cb0:	d001      	beq.n	8002cb6 <_strtol_l.constprop.0+0xe>
 8002cb2:	2b24      	cmp	r3, #36	; 0x24
 8002cb4:	d906      	bls.n	8002cc4 <_strtol_l.constprop.0+0x1c>
 8002cb6:	f7ff f915 	bl	8001ee4 <__errno>
 8002cba:	2316      	movs	r3, #22
 8002cbc:	6003      	str	r3, [r0, #0]
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc4:	460d      	mov	r5, r1
 8002cc6:	4f35      	ldr	r7, [pc, #212]	; (8002d9c <_strtol_l.constprop.0+0xf4>)
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002cce:	5de6      	ldrb	r6, [r4, r7]
 8002cd0:	f016 0608 	ands.w	r6, r6, #8
 8002cd4:	d1f8      	bne.n	8002cc8 <_strtol_l.constprop.0+0x20>
 8002cd6:	2c2d      	cmp	r4, #45	; 0x2d
 8002cd8:	d12f      	bne.n	8002d3a <_strtol_l.constprop.0+0x92>
 8002cda:	2601      	movs	r6, #1
 8002cdc:	782c      	ldrb	r4, [r5, #0]
 8002cde:	1c85      	adds	r5, r0, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d057      	beq.n	8002d94 <_strtol_l.constprop.0+0xec>
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d109      	bne.n	8002cfc <_strtol_l.constprop.0+0x54>
 8002ce8:	2c30      	cmp	r4, #48	; 0x30
 8002cea:	d107      	bne.n	8002cfc <_strtol_l.constprop.0+0x54>
 8002cec:	7828      	ldrb	r0, [r5, #0]
 8002cee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002cf2:	2858      	cmp	r0, #88	; 0x58
 8002cf4:	d149      	bne.n	8002d8a <_strtol_l.constprop.0+0xe2>
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	786c      	ldrb	r4, [r5, #1]
 8002cfa:	3502      	adds	r5, #2
 8002cfc:	2700      	movs	r7, #0
 8002cfe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8002d02:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002d06:	fbbe f9f3 	udiv	r9, lr, r3
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	fb03 ea19 	mls	sl, r3, r9, lr
 8002d10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002d14:	f1bc 0f09 	cmp.w	ip, #9
 8002d18:	d814      	bhi.n	8002d44 <_strtol_l.constprop.0+0x9c>
 8002d1a:	4664      	mov	r4, ip
 8002d1c:	42a3      	cmp	r3, r4
 8002d1e:	dd22      	ble.n	8002d66 <_strtol_l.constprop.0+0xbe>
 8002d20:	2f00      	cmp	r7, #0
 8002d22:	db1d      	blt.n	8002d60 <_strtol_l.constprop.0+0xb8>
 8002d24:	4581      	cmp	r9, r0
 8002d26:	d31b      	bcc.n	8002d60 <_strtol_l.constprop.0+0xb8>
 8002d28:	d101      	bne.n	8002d2e <_strtol_l.constprop.0+0x86>
 8002d2a:	45a2      	cmp	sl, r4
 8002d2c:	db18      	blt.n	8002d60 <_strtol_l.constprop.0+0xb8>
 8002d2e:	2701      	movs	r7, #1
 8002d30:	fb00 4003 	mla	r0, r0, r3, r4
 8002d34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002d38:	e7ea      	b.n	8002d10 <_strtol_l.constprop.0+0x68>
 8002d3a:	2c2b      	cmp	r4, #43	; 0x2b
 8002d3c:	bf04      	itt	eq
 8002d3e:	782c      	ldrbeq	r4, [r5, #0]
 8002d40:	1c85      	addeq	r5, r0, #2
 8002d42:	e7cd      	b.n	8002ce0 <_strtol_l.constprop.0+0x38>
 8002d44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002d48:	f1bc 0f19 	cmp.w	ip, #25
 8002d4c:	d801      	bhi.n	8002d52 <_strtol_l.constprop.0+0xaa>
 8002d4e:	3c37      	subs	r4, #55	; 0x37
 8002d50:	e7e4      	b.n	8002d1c <_strtol_l.constprop.0+0x74>
 8002d52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002d56:	f1bc 0f19 	cmp.w	ip, #25
 8002d5a:	d804      	bhi.n	8002d66 <_strtol_l.constprop.0+0xbe>
 8002d5c:	3c57      	subs	r4, #87	; 0x57
 8002d5e:	e7dd      	b.n	8002d1c <_strtol_l.constprop.0+0x74>
 8002d60:	f04f 37ff 	mov.w	r7, #4294967295
 8002d64:	e7e6      	b.n	8002d34 <_strtol_l.constprop.0+0x8c>
 8002d66:	2f00      	cmp	r7, #0
 8002d68:	da07      	bge.n	8002d7a <_strtol_l.constprop.0+0xd2>
 8002d6a:	2322      	movs	r3, #34	; 0x22
 8002d6c:	4670      	mov	r0, lr
 8002d6e:	f8c8 3000 	str.w	r3, [r8]
 8002d72:	2a00      	cmp	r2, #0
 8002d74:	d0a4      	beq.n	8002cc0 <_strtol_l.constprop.0+0x18>
 8002d76:	1e69      	subs	r1, r5, #1
 8002d78:	e005      	b.n	8002d86 <_strtol_l.constprop.0+0xde>
 8002d7a:	b106      	cbz	r6, 8002d7e <_strtol_l.constprop.0+0xd6>
 8002d7c:	4240      	negs	r0, r0
 8002d7e:	2a00      	cmp	r2, #0
 8002d80:	d09e      	beq.n	8002cc0 <_strtol_l.constprop.0+0x18>
 8002d82:	2f00      	cmp	r7, #0
 8002d84:	d1f7      	bne.n	8002d76 <_strtol_l.constprop.0+0xce>
 8002d86:	6011      	str	r1, [r2, #0]
 8002d88:	e79a      	b.n	8002cc0 <_strtol_l.constprop.0+0x18>
 8002d8a:	2430      	movs	r4, #48	; 0x30
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1b5      	bne.n	8002cfc <_strtol_l.constprop.0+0x54>
 8002d90:	2308      	movs	r3, #8
 8002d92:	e7b3      	b.n	8002cfc <_strtol_l.constprop.0+0x54>
 8002d94:	2c30      	cmp	r4, #48	; 0x30
 8002d96:	d0a9      	beq.n	8002cec <_strtol_l.constprop.0+0x44>
 8002d98:	230a      	movs	r3, #10
 8002d9a:	e7af      	b.n	8002cfc <_strtol_l.constprop.0+0x54>
 8002d9c:	08003289 	.word	0x08003289

08002da0 <_strtol_r>:
 8002da0:	f7ff bf82 	b.w	8002ca8 <_strtol_l.constprop.0>

08002da4 <_strtoul_l.constprop.0>:
 8002da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002da8:	4686      	mov	lr, r0
 8002daa:	460d      	mov	r5, r1
 8002dac:	4f35      	ldr	r7, [pc, #212]	; (8002e84 <_strtoul_l.constprop.0+0xe0>)
 8002dae:	4628      	mov	r0, r5
 8002db0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002db4:	5de6      	ldrb	r6, [r4, r7]
 8002db6:	f016 0608 	ands.w	r6, r6, #8
 8002dba:	d1f8      	bne.n	8002dae <_strtoul_l.constprop.0+0xa>
 8002dbc:	2c2d      	cmp	r4, #45	; 0x2d
 8002dbe:	d12f      	bne.n	8002e20 <_strtoul_l.constprop.0+0x7c>
 8002dc0:	2601      	movs	r6, #1
 8002dc2:	782c      	ldrb	r4, [r5, #0]
 8002dc4:	1c85      	adds	r5, r0, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d057      	beq.n	8002e7a <_strtoul_l.constprop.0+0xd6>
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d109      	bne.n	8002de2 <_strtoul_l.constprop.0+0x3e>
 8002dce:	2c30      	cmp	r4, #48	; 0x30
 8002dd0:	d107      	bne.n	8002de2 <_strtoul_l.constprop.0+0x3e>
 8002dd2:	7828      	ldrb	r0, [r5, #0]
 8002dd4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002dd8:	2858      	cmp	r0, #88	; 0x58
 8002dda:	d149      	bne.n	8002e70 <_strtoul_l.constprop.0+0xcc>
 8002ddc:	2310      	movs	r3, #16
 8002dde:	786c      	ldrb	r4, [r5, #1]
 8002de0:	3502      	adds	r5, #2
 8002de2:	f04f 38ff 	mov.w	r8, #4294967295
 8002de6:	fbb8 f8f3 	udiv	r8, r8, r3
 8002dea:	2700      	movs	r7, #0
 8002dec:	fb03 f908 	mul.w	r9, r3, r8
 8002df0:	4638      	mov	r0, r7
 8002df2:	ea6f 0909 	mvn.w	r9, r9
 8002df6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002dfa:	f1bc 0f09 	cmp.w	ip, #9
 8002dfe:	d814      	bhi.n	8002e2a <_strtoul_l.constprop.0+0x86>
 8002e00:	4664      	mov	r4, ip
 8002e02:	42a3      	cmp	r3, r4
 8002e04:	dd22      	ble.n	8002e4c <_strtoul_l.constprop.0+0xa8>
 8002e06:	2f00      	cmp	r7, #0
 8002e08:	db1d      	blt.n	8002e46 <_strtoul_l.constprop.0+0xa2>
 8002e0a:	4580      	cmp	r8, r0
 8002e0c:	d31b      	bcc.n	8002e46 <_strtoul_l.constprop.0+0xa2>
 8002e0e:	d101      	bne.n	8002e14 <_strtoul_l.constprop.0+0x70>
 8002e10:	45a1      	cmp	r9, r4
 8002e12:	db18      	blt.n	8002e46 <_strtoul_l.constprop.0+0xa2>
 8002e14:	2701      	movs	r7, #1
 8002e16:	fb00 4003 	mla	r0, r0, r3, r4
 8002e1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e1e:	e7ea      	b.n	8002df6 <_strtoul_l.constprop.0+0x52>
 8002e20:	2c2b      	cmp	r4, #43	; 0x2b
 8002e22:	bf04      	itt	eq
 8002e24:	782c      	ldrbeq	r4, [r5, #0]
 8002e26:	1c85      	addeq	r5, r0, #2
 8002e28:	e7cd      	b.n	8002dc6 <_strtoul_l.constprop.0+0x22>
 8002e2a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002e2e:	f1bc 0f19 	cmp.w	ip, #25
 8002e32:	d801      	bhi.n	8002e38 <_strtoul_l.constprop.0+0x94>
 8002e34:	3c37      	subs	r4, #55	; 0x37
 8002e36:	e7e4      	b.n	8002e02 <_strtoul_l.constprop.0+0x5e>
 8002e38:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002e3c:	f1bc 0f19 	cmp.w	ip, #25
 8002e40:	d804      	bhi.n	8002e4c <_strtoul_l.constprop.0+0xa8>
 8002e42:	3c57      	subs	r4, #87	; 0x57
 8002e44:	e7dd      	b.n	8002e02 <_strtoul_l.constprop.0+0x5e>
 8002e46:	f04f 37ff 	mov.w	r7, #4294967295
 8002e4a:	e7e6      	b.n	8002e1a <_strtoul_l.constprop.0+0x76>
 8002e4c:	2f00      	cmp	r7, #0
 8002e4e:	da07      	bge.n	8002e60 <_strtoul_l.constprop.0+0xbc>
 8002e50:	2322      	movs	r3, #34	; 0x22
 8002e52:	f04f 30ff 	mov.w	r0, #4294967295
 8002e56:	f8ce 3000 	str.w	r3, [lr]
 8002e5a:	b932      	cbnz	r2, 8002e6a <_strtoul_l.constprop.0+0xc6>
 8002e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e60:	b106      	cbz	r6, 8002e64 <_strtoul_l.constprop.0+0xc0>
 8002e62:	4240      	negs	r0, r0
 8002e64:	2a00      	cmp	r2, #0
 8002e66:	d0f9      	beq.n	8002e5c <_strtoul_l.constprop.0+0xb8>
 8002e68:	b107      	cbz	r7, 8002e6c <_strtoul_l.constprop.0+0xc8>
 8002e6a:	1e69      	subs	r1, r5, #1
 8002e6c:	6011      	str	r1, [r2, #0]
 8002e6e:	e7f5      	b.n	8002e5c <_strtoul_l.constprop.0+0xb8>
 8002e70:	2430      	movs	r4, #48	; 0x30
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1b5      	bne.n	8002de2 <_strtoul_l.constprop.0+0x3e>
 8002e76:	2308      	movs	r3, #8
 8002e78:	e7b3      	b.n	8002de2 <_strtoul_l.constprop.0+0x3e>
 8002e7a:	2c30      	cmp	r4, #48	; 0x30
 8002e7c:	d0a9      	beq.n	8002dd2 <_strtoul_l.constprop.0+0x2e>
 8002e7e:	230a      	movs	r3, #10
 8002e80:	e7af      	b.n	8002de2 <_strtoul_l.constprop.0+0x3e>
 8002e82:	bf00      	nop
 8002e84:	08003289 	.word	0x08003289

08002e88 <_strtoul_r>:
 8002e88:	f7ff bf8c 	b.w	8002da4 <_strtoul_l.constprop.0>

08002e8c <__submore>:
 8002e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e90:	460c      	mov	r4, r1
 8002e92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e98:	4299      	cmp	r1, r3
 8002e9a:	d11b      	bne.n	8002ed4 <__submore+0x48>
 8002e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ea0:	f000 f8cc 	bl	800303c <_malloc_r>
 8002ea4:	b918      	cbnz	r0, 8002eae <__submore+0x22>
 8002ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002eb4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8002eba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002ebe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ec2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002ec6:	7043      	strb	r3, [r0, #1]
 8002ec8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002ecc:	7003      	strb	r3, [r0, #0]
 8002ece:	6020      	str	r0, [r4, #0]
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	e7ea      	b.n	8002eaa <__submore+0x1e>
 8002ed4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002ed6:	0077      	lsls	r7, r6, #1
 8002ed8:	463a      	mov	r2, r7
 8002eda:	f000 f923 	bl	8003124 <_realloc_r>
 8002ede:	4605      	mov	r5, r0
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d0e0      	beq.n	8002ea6 <__submore+0x1a>
 8002ee4:	eb00 0806 	add.w	r8, r0, r6
 8002ee8:	4601      	mov	r1, r0
 8002eea:	4632      	mov	r2, r6
 8002eec:	4640      	mov	r0, r8
 8002eee:	f000 f815 	bl	8002f1c <memcpy>
 8002ef2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8002ef6:	f8c4 8000 	str.w	r8, [r4]
 8002efa:	e7e9      	b.n	8002ed0 <__submore+0x44>

08002efc <__retarget_lock_acquire_recursive>:
 8002efc:	4770      	bx	lr

08002efe <__retarget_lock_release_recursive>:
 8002efe:	4770      	bx	lr

08002f00 <memchr>:
 8002f00:	4603      	mov	r3, r0
 8002f02:	b510      	push	{r4, lr}
 8002f04:	b2c9      	uxtb	r1, r1
 8002f06:	4402      	add	r2, r0
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	d101      	bne.n	8002f12 <memchr+0x12>
 8002f0e:	2000      	movs	r0, #0
 8002f10:	e003      	b.n	8002f1a <memchr+0x1a>
 8002f12:	7804      	ldrb	r4, [r0, #0]
 8002f14:	3301      	adds	r3, #1
 8002f16:	428c      	cmp	r4, r1
 8002f18:	d1f6      	bne.n	8002f08 <memchr+0x8>
 8002f1a:	bd10      	pop	{r4, pc}

08002f1c <memcpy>:
 8002f1c:	440a      	add	r2, r1
 8002f1e:	4291      	cmp	r1, r2
 8002f20:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f24:	d100      	bne.n	8002f28 <memcpy+0xc>
 8002f26:	4770      	bx	lr
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f2e:	4291      	cmp	r1, r2
 8002f30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f34:	d1f9      	bne.n	8002f2a <memcpy+0xe>
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <memmove>:
 8002f38:	4288      	cmp	r0, r1
 8002f3a:	b510      	push	{r4, lr}
 8002f3c:	eb01 0402 	add.w	r4, r1, r2
 8002f40:	d902      	bls.n	8002f48 <memmove+0x10>
 8002f42:	4284      	cmp	r4, r0
 8002f44:	4623      	mov	r3, r4
 8002f46:	d807      	bhi.n	8002f58 <memmove+0x20>
 8002f48:	1e43      	subs	r3, r0, #1
 8002f4a:	42a1      	cmp	r1, r4
 8002f4c:	d008      	beq.n	8002f60 <memmove+0x28>
 8002f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f56:	e7f8      	b.n	8002f4a <memmove+0x12>
 8002f58:	4601      	mov	r1, r0
 8002f5a:	4402      	add	r2, r0
 8002f5c:	428a      	cmp	r2, r1
 8002f5e:	d100      	bne.n	8002f62 <memmove+0x2a>
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f6a:	e7f7      	b.n	8002f5c <memmove+0x24>

08002f6c <_free_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4605      	mov	r5, r0
 8002f70:	2900      	cmp	r1, #0
 8002f72:	d040      	beq.n	8002ff6 <_free_r+0x8a>
 8002f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f78:	1f0c      	subs	r4, r1, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bfb8      	it	lt
 8002f7e:	18e4      	addlt	r4, r4, r3
 8002f80:	f000 f910 	bl	80031a4 <__malloc_lock>
 8002f84:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <_free_r+0x8c>)
 8002f86:	6813      	ldr	r3, [r2, #0]
 8002f88:	b933      	cbnz	r3, 8002f98 <_free_r+0x2c>
 8002f8a:	6063      	str	r3, [r4, #4]
 8002f8c:	6014      	str	r4, [r2, #0]
 8002f8e:	4628      	mov	r0, r5
 8002f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f94:	f000 b90c 	b.w	80031b0 <__malloc_unlock>
 8002f98:	42a3      	cmp	r3, r4
 8002f9a:	d908      	bls.n	8002fae <_free_r+0x42>
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	1821      	adds	r1, r4, r0
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	bf01      	itttt	eq
 8002fa4:	6819      	ldreq	r1, [r3, #0]
 8002fa6:	685b      	ldreq	r3, [r3, #4]
 8002fa8:	1809      	addeq	r1, r1, r0
 8002faa:	6021      	streq	r1, [r4, #0]
 8002fac:	e7ed      	b.n	8002f8a <_free_r+0x1e>
 8002fae:	461a      	mov	r2, r3
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	b10b      	cbz	r3, 8002fb8 <_free_r+0x4c>
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	d9fa      	bls.n	8002fae <_free_r+0x42>
 8002fb8:	6811      	ldr	r1, [r2, #0]
 8002fba:	1850      	adds	r0, r2, r1
 8002fbc:	42a0      	cmp	r0, r4
 8002fbe:	d10b      	bne.n	8002fd8 <_free_r+0x6c>
 8002fc0:	6820      	ldr	r0, [r4, #0]
 8002fc2:	4401      	add	r1, r0
 8002fc4:	1850      	adds	r0, r2, r1
 8002fc6:	4283      	cmp	r3, r0
 8002fc8:	6011      	str	r1, [r2, #0]
 8002fca:	d1e0      	bne.n	8002f8e <_free_r+0x22>
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4401      	add	r1, r0
 8002fd2:	6011      	str	r1, [r2, #0]
 8002fd4:	6053      	str	r3, [r2, #4]
 8002fd6:	e7da      	b.n	8002f8e <_free_r+0x22>
 8002fd8:	d902      	bls.n	8002fe0 <_free_r+0x74>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	602b      	str	r3, [r5, #0]
 8002fde:	e7d6      	b.n	8002f8e <_free_r+0x22>
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	1821      	adds	r1, r4, r0
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	bf01      	itttt	eq
 8002fe8:	6819      	ldreq	r1, [r3, #0]
 8002fea:	685b      	ldreq	r3, [r3, #4]
 8002fec:	1809      	addeq	r1, r1, r0
 8002fee:	6021      	streq	r1, [r4, #0]
 8002ff0:	6063      	str	r3, [r4, #4]
 8002ff2:	6054      	str	r4, [r2, #4]
 8002ff4:	e7cb      	b.n	8002f8e <_free_r+0x22>
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	20000180 	.word	0x20000180

08002ffc <sbrk_aligned>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	4e0e      	ldr	r6, [pc, #56]	; (8003038 <sbrk_aligned+0x3c>)
 8003000:	460c      	mov	r4, r1
 8003002:	6831      	ldr	r1, [r6, #0]
 8003004:	4605      	mov	r5, r0
 8003006:	b911      	cbnz	r1, 800300e <sbrk_aligned+0x12>
 8003008:	f000 f8bc 	bl	8003184 <_sbrk_r>
 800300c:	6030      	str	r0, [r6, #0]
 800300e:	4621      	mov	r1, r4
 8003010:	4628      	mov	r0, r5
 8003012:	f000 f8b7 	bl	8003184 <_sbrk_r>
 8003016:	1c43      	adds	r3, r0, #1
 8003018:	d00a      	beq.n	8003030 <sbrk_aligned+0x34>
 800301a:	1cc4      	adds	r4, r0, #3
 800301c:	f024 0403 	bic.w	r4, r4, #3
 8003020:	42a0      	cmp	r0, r4
 8003022:	d007      	beq.n	8003034 <sbrk_aligned+0x38>
 8003024:	1a21      	subs	r1, r4, r0
 8003026:	4628      	mov	r0, r5
 8003028:	f000 f8ac 	bl	8003184 <_sbrk_r>
 800302c:	3001      	adds	r0, #1
 800302e:	d101      	bne.n	8003034 <sbrk_aligned+0x38>
 8003030:	f04f 34ff 	mov.w	r4, #4294967295
 8003034:	4620      	mov	r0, r4
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	20000184 	.word	0x20000184

0800303c <_malloc_r>:
 800303c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003040:	1ccd      	adds	r5, r1, #3
 8003042:	f025 0503 	bic.w	r5, r5, #3
 8003046:	3508      	adds	r5, #8
 8003048:	2d0c      	cmp	r5, #12
 800304a:	bf38      	it	cc
 800304c:	250c      	movcc	r5, #12
 800304e:	2d00      	cmp	r5, #0
 8003050:	4607      	mov	r7, r0
 8003052:	db01      	blt.n	8003058 <_malloc_r+0x1c>
 8003054:	42a9      	cmp	r1, r5
 8003056:	d905      	bls.n	8003064 <_malloc_r+0x28>
 8003058:	230c      	movs	r3, #12
 800305a:	2600      	movs	r6, #0
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4630      	mov	r0, r6
 8003060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003064:	4e2e      	ldr	r6, [pc, #184]	; (8003120 <_malloc_r+0xe4>)
 8003066:	f000 f89d 	bl	80031a4 <__malloc_lock>
 800306a:	6833      	ldr	r3, [r6, #0]
 800306c:	461c      	mov	r4, r3
 800306e:	bb34      	cbnz	r4, 80030be <_malloc_r+0x82>
 8003070:	4629      	mov	r1, r5
 8003072:	4638      	mov	r0, r7
 8003074:	f7ff ffc2 	bl	8002ffc <sbrk_aligned>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	4604      	mov	r4, r0
 800307c:	d14d      	bne.n	800311a <_malloc_r+0xde>
 800307e:	6834      	ldr	r4, [r6, #0]
 8003080:	4626      	mov	r6, r4
 8003082:	2e00      	cmp	r6, #0
 8003084:	d140      	bne.n	8003108 <_malloc_r+0xcc>
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	4631      	mov	r1, r6
 800308a:	4638      	mov	r0, r7
 800308c:	eb04 0803 	add.w	r8, r4, r3
 8003090:	f000 f878 	bl	8003184 <_sbrk_r>
 8003094:	4580      	cmp	r8, r0
 8003096:	d13a      	bne.n	800310e <_malloc_r+0xd2>
 8003098:	6821      	ldr	r1, [r4, #0]
 800309a:	3503      	adds	r5, #3
 800309c:	1a6d      	subs	r5, r5, r1
 800309e:	f025 0503 	bic.w	r5, r5, #3
 80030a2:	3508      	adds	r5, #8
 80030a4:	2d0c      	cmp	r5, #12
 80030a6:	bf38      	it	cc
 80030a8:	250c      	movcc	r5, #12
 80030aa:	4638      	mov	r0, r7
 80030ac:	4629      	mov	r1, r5
 80030ae:	f7ff ffa5 	bl	8002ffc <sbrk_aligned>
 80030b2:	3001      	adds	r0, #1
 80030b4:	d02b      	beq.n	800310e <_malloc_r+0xd2>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	442b      	add	r3, r5
 80030ba:	6023      	str	r3, [r4, #0]
 80030bc:	e00e      	b.n	80030dc <_malloc_r+0xa0>
 80030be:	6822      	ldr	r2, [r4, #0]
 80030c0:	1b52      	subs	r2, r2, r5
 80030c2:	d41e      	bmi.n	8003102 <_malloc_r+0xc6>
 80030c4:	2a0b      	cmp	r2, #11
 80030c6:	d916      	bls.n	80030f6 <_malloc_r+0xba>
 80030c8:	1961      	adds	r1, r4, r5
 80030ca:	42a3      	cmp	r3, r4
 80030cc:	6025      	str	r5, [r4, #0]
 80030ce:	bf18      	it	ne
 80030d0:	6059      	strne	r1, [r3, #4]
 80030d2:	6863      	ldr	r3, [r4, #4]
 80030d4:	bf08      	it	eq
 80030d6:	6031      	streq	r1, [r6, #0]
 80030d8:	5162      	str	r2, [r4, r5]
 80030da:	604b      	str	r3, [r1, #4]
 80030dc:	4638      	mov	r0, r7
 80030de:	f104 060b 	add.w	r6, r4, #11
 80030e2:	f000 f865 	bl	80031b0 <__malloc_unlock>
 80030e6:	f026 0607 	bic.w	r6, r6, #7
 80030ea:	1d23      	adds	r3, r4, #4
 80030ec:	1af2      	subs	r2, r6, r3
 80030ee:	d0b6      	beq.n	800305e <_malloc_r+0x22>
 80030f0:	1b9b      	subs	r3, r3, r6
 80030f2:	50a3      	str	r3, [r4, r2]
 80030f4:	e7b3      	b.n	800305e <_malloc_r+0x22>
 80030f6:	6862      	ldr	r2, [r4, #4]
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	bf0c      	ite	eq
 80030fc:	6032      	streq	r2, [r6, #0]
 80030fe:	605a      	strne	r2, [r3, #4]
 8003100:	e7ec      	b.n	80030dc <_malloc_r+0xa0>
 8003102:	4623      	mov	r3, r4
 8003104:	6864      	ldr	r4, [r4, #4]
 8003106:	e7b2      	b.n	800306e <_malloc_r+0x32>
 8003108:	4634      	mov	r4, r6
 800310a:	6876      	ldr	r6, [r6, #4]
 800310c:	e7b9      	b.n	8003082 <_malloc_r+0x46>
 800310e:	230c      	movs	r3, #12
 8003110:	4638      	mov	r0, r7
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	f000 f84c 	bl	80031b0 <__malloc_unlock>
 8003118:	e7a1      	b.n	800305e <_malloc_r+0x22>
 800311a:	6025      	str	r5, [r4, #0]
 800311c:	e7de      	b.n	80030dc <_malloc_r+0xa0>
 800311e:	bf00      	nop
 8003120:	20000180 	.word	0x20000180

08003124 <_realloc_r>:
 8003124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003128:	4680      	mov	r8, r0
 800312a:	4614      	mov	r4, r2
 800312c:	460e      	mov	r6, r1
 800312e:	b921      	cbnz	r1, 800313a <_realloc_r+0x16>
 8003130:	4611      	mov	r1, r2
 8003132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003136:	f7ff bf81 	b.w	800303c <_malloc_r>
 800313a:	b92a      	cbnz	r2, 8003148 <_realloc_r+0x24>
 800313c:	f7ff ff16 	bl	8002f6c <_free_r>
 8003140:	4625      	mov	r5, r4
 8003142:	4628      	mov	r0, r5
 8003144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003148:	f000 f838 	bl	80031bc <_malloc_usable_size_r>
 800314c:	4284      	cmp	r4, r0
 800314e:	4607      	mov	r7, r0
 8003150:	d802      	bhi.n	8003158 <_realloc_r+0x34>
 8003152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003156:	d812      	bhi.n	800317e <_realloc_r+0x5a>
 8003158:	4621      	mov	r1, r4
 800315a:	4640      	mov	r0, r8
 800315c:	f7ff ff6e 	bl	800303c <_malloc_r>
 8003160:	4605      	mov	r5, r0
 8003162:	2800      	cmp	r0, #0
 8003164:	d0ed      	beq.n	8003142 <_realloc_r+0x1e>
 8003166:	42bc      	cmp	r4, r7
 8003168:	4622      	mov	r2, r4
 800316a:	4631      	mov	r1, r6
 800316c:	bf28      	it	cs
 800316e:	463a      	movcs	r2, r7
 8003170:	f7ff fed4 	bl	8002f1c <memcpy>
 8003174:	4631      	mov	r1, r6
 8003176:	4640      	mov	r0, r8
 8003178:	f7ff fef8 	bl	8002f6c <_free_r>
 800317c:	e7e1      	b.n	8003142 <_realloc_r+0x1e>
 800317e:	4635      	mov	r5, r6
 8003180:	e7df      	b.n	8003142 <_realloc_r+0x1e>
	...

08003184 <_sbrk_r>:
 8003184:	b538      	push	{r3, r4, r5, lr}
 8003186:	2300      	movs	r3, #0
 8003188:	4d05      	ldr	r5, [pc, #20]	; (80031a0 <_sbrk_r+0x1c>)
 800318a:	4604      	mov	r4, r0
 800318c:	4608      	mov	r0, r1
 800318e:	602b      	str	r3, [r5, #0]
 8003190:	f7fd fa06 	bl	80005a0 <_sbrk>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d102      	bne.n	800319e <_sbrk_r+0x1a>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	b103      	cbz	r3, 800319e <_sbrk_r+0x1a>
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	bd38      	pop	{r3, r4, r5, pc}
 80031a0:	20000178 	.word	0x20000178

080031a4 <__malloc_lock>:
 80031a4:	4801      	ldr	r0, [pc, #4]	; (80031ac <__malloc_lock+0x8>)
 80031a6:	f7ff bea9 	b.w	8002efc <__retarget_lock_acquire_recursive>
 80031aa:	bf00      	nop
 80031ac:	2000017c 	.word	0x2000017c

080031b0 <__malloc_unlock>:
 80031b0:	4801      	ldr	r0, [pc, #4]	; (80031b8 <__malloc_unlock+0x8>)
 80031b2:	f7ff bea4 	b.w	8002efe <__retarget_lock_release_recursive>
 80031b6:	bf00      	nop
 80031b8:	2000017c 	.word	0x2000017c

080031bc <_malloc_usable_size_r>:
 80031bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031c0:	1f18      	subs	r0, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bfbc      	itt	lt
 80031c6:	580b      	ldrlt	r3, [r1, r0]
 80031c8:	18c0      	addlt	r0, r0, r3
 80031ca:	4770      	bx	lr

080031cc <_init>:
 80031cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ce:	bf00      	nop
 80031d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d2:	bc08      	pop	{r3}
 80031d4:	469e      	mov	lr, r3
 80031d6:	4770      	bx	lr

080031d8 <_fini>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	bf00      	nop
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr
